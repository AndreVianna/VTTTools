// <auto-generated />
#nullable disable

namespace VttTools.Data.MigrationService.Migrations;

/// <inheritdoc />
public partial class RefactorAssetDomainModel : Migration {
    /// <inheritdoc />
    protected override void Up(MigrationBuilder migrationBuilder) {
        migrationBuilder.DropColumn(
            name: "Grid_CellSize_X",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "Grid_CellSize_Y",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "Grid_Offset_X",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "Grid_Offset_Y",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "Category",
            table: "Assets");

        migrationBuilder.DropColumn(
            name: "Type",
            table: "Assets");

        migrationBuilder.AlterColumn<double>(
            name: "Panning_Y",
            table: "Scenes",
            type: "float",
            nullable: false,
            defaultValue: 0.0,
            oldClrType: typeof(int),
            oldType: "int",
            oldDefaultValue: 0);

        migrationBuilder.AlterColumn<double>(
            name: "Panning_X",
            table: "Scenes",
            type: "float",
            nullable: false,
            defaultValue: 0.0,
            oldClrType: typeof(int),
            oldType: "int",
            oldDefaultValue: 0);

        migrationBuilder.AddColumn<double>(
            name: "Grid_CellSize_Height",
            table: "Scenes",
            type: "float",
            nullable: false,
            defaultValue: 50.0);

        migrationBuilder.AddColumn<double>(
            name: "Grid_CellSize_Width",
            table: "Scenes",
            type: "float",
            nullable: false,
            defaultValue: 50.0);

        migrationBuilder.AddColumn<double>(
            name: "Grid_Offset_Left",
            table: "Scenes",
            type: "float",
            nullable: false,
            defaultValue: 0.0);

        migrationBuilder.AddColumn<double>(
            name: "Grid_Offset_Top",
            table: "Scenes",
            type: "float",
            nullable: false,
            defaultValue: 0.0);

        migrationBuilder.AlterColumn<bool>(
            name: "IsPublished",
            table: "Assets",
            type: "bit",
            nullable: false,
            defaultValue: false,
            oldClrType: typeof(bool),
            oldType: "bit");

        migrationBuilder.AlterColumn<bool>(
            name: "IsPublic",
            table: "Assets",
            type: "bit",
            nullable: false,
            defaultValue: false,
            oldClrType: typeof(bool),
            oldType: "bit");

        migrationBuilder.AddColumn<DateTime>(
            name: "CreatedAt",
            table: "Assets",
            type: "datetime2",
            nullable: false,
            defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

        migrationBuilder.AddColumn<string>(
            name: "EntityProperties",
            table: "Assets",
            type: "nvarchar(max)",
            nullable: true);

        migrationBuilder.AddColumn<string>(
            name: "Kind",
            table: "Assets",
            type: "nvarchar(max)",
            nullable: false,
            defaultValue: "");

        migrationBuilder.AddColumn<string>(
            name: "ObjectProperties",
            table: "Assets",
            type: "nvarchar(max)",
            nullable: true);

        migrationBuilder.AddColumn<DateTime>(
            name: "UpdatedAt",
            table: "Assets",
            type: "datetime2",
            nullable: false,
            defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

        migrationBuilder.CreateTable(
            name: "Effects",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                Description = table.Column<string>(type: "nvarchar(max)", maxLength: 4096, nullable: true),
                Shape = table.Column<string>(type: "nvarchar(max)", nullable: false),
                Size = table.Column<int>(type: "int", nullable: false),
                Direction = table.Column<int>(type: "int", nullable: true),
                BoundedByStructures = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                VisualResourceId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                Category = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: true),
                CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
            },
            constraints: table => {
                table.PrimaryKey("PK_Effects", x => x.Id);
                table.ForeignKey(
                    name: "FK_Effects_Resources_VisualResourceId",
                    column: x => x.VisualResourceId,
                    principalTable: "Resources",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Restrict);
            });

        migrationBuilder.CreateTable(
            name: "StatBlocks",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
            },
            constraints: table => table.PrimaryKey("PK_StatBlocks", x => x.Id));

        migrationBuilder.CreateTable(
            name: "Structures",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                Description = table.Column<string>(type: "nvarchar(max)", maxLength: 4096, nullable: true),
                IsBlocking = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                IsOpaque = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                IsSecret = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                IsOpenable = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                IsLocked = table.Column<bool>(type: "bit", nullable: false, defaultValue: false),
                VisualResourceId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
            },
            constraints: table => {
                table.PrimaryKey("PK_Structures", x => x.Id);
                table.ForeignKey(
                    name: "FK_Structures_Resources_VisualResourceId",
                    column: x => x.VisualResourceId,
                    principalTable: "Resources",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Restrict);
            });

        migrationBuilder.CreateTable(
            name: "SceneEffects",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                SceneId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                EffectId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                Size = table.Column<int>(type: "int", nullable: true),
                Direction = table.Column<int>(type: "int", nullable: true),
                Origin_X = table.Column<double>(type: "float", nullable: false),
                Origin_Y = table.Column<double>(type: "float", nullable: false)
            },
            constraints: table => {
                table.PrimaryKey("PK_SceneEffects", x => x.Id);
                table.ForeignKey(
                    name: "FK_SceneEffects_Effects_EffectId",
                    column: x => x.EffectId,
                    principalTable: "Effects",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Restrict);
                table.ForeignKey(
                    name: "FK_SceneEffects_Scenes_SceneId",
                    column: x => x.SceneId,
                    principalTable: "Scenes",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "SceneStructures",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                SceneId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                StructureId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                IsOpen = table.Column<bool>(type: "bit", nullable: true),
                IsLocked = table.Column<bool>(type: "bit", nullable: true),
                IsSecret = table.Column<bool>(type: "bit", nullable: true),
                Vertices = table.Column<string>(type: "nvarchar(max)", nullable: true)
            },
            constraints: table => {
                table.PrimaryKey("PK_SceneStructures", x => x.Id);
                table.ForeignKey(
                    name: "FK_SceneStructures_Scenes_SceneId",
                    column: x => x.SceneId,
                    principalTable: "Scenes",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_SceneStructures_Structures_StructureId",
                    column: x => x.StructureId,
                    principalTable: "Structures",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Restrict);
            });

        migrationBuilder.CreateIndex(
            name: "IX_Effects_VisualResourceId",
            table: "Effects",
            column: "VisualResourceId");

        migrationBuilder.CreateIndex(
            name: "IX_SceneEffects_EffectId",
            table: "SceneEffects",
            column: "EffectId");

        migrationBuilder.CreateIndex(
            name: "IX_SceneEffects_SceneId",
            table: "SceneEffects",
            column: "SceneId");

        migrationBuilder.CreateIndex(
            name: "IX_SceneStructures_SceneId",
            table: "SceneStructures",
            column: "SceneId");

        migrationBuilder.CreateIndex(
            name: "IX_SceneStructures_StructureId",
            table: "SceneStructures",
            column: "StructureId");

        migrationBuilder.CreateIndex(
            name: "IX_Structures_VisualResourceId",
            table: "Structures",
            column: "VisualResourceId");
    }

    /// <inheritdoc />
    protected override void Down(MigrationBuilder migrationBuilder) {
        migrationBuilder.DropTable(
            name: "SceneEffects");

        migrationBuilder.DropTable(
            name: "SceneStructures");

        migrationBuilder.DropTable(
            name: "StatBlocks");

        migrationBuilder.DropTable(
            name: "Effects");

        migrationBuilder.DropTable(
            name: "Structures");

        migrationBuilder.DropColumn(
            name: "Grid_CellSize_Height",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "Grid_CellSize_Width",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "Grid_Offset_Left",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "Grid_Offset_Top",
            table: "Scenes");

        migrationBuilder.DropColumn(
            name: "CreatedAt",
            table: "Assets");

        migrationBuilder.DropColumn(
            name: "EntityProperties",
            table: "Assets");

        migrationBuilder.DropColumn(
            name: "Kind",
            table: "Assets");

        migrationBuilder.DropColumn(
            name: "ObjectProperties",
            table: "Assets");

        migrationBuilder.DropColumn(
            name: "UpdatedAt",
            table: "Assets");

        migrationBuilder.AlterColumn<int>(
            name: "Panning_Y",
            table: "Scenes",
            type: "int",
            nullable: false,
            defaultValue: 0,
            oldClrType: typeof(double),
            oldType: "float",
            oldDefaultValue: 0.0);

        migrationBuilder.AlterColumn<int>(
            name: "Panning_X",
            table: "Scenes",
            type: "int",
            nullable: false,
            defaultValue: 0,
            oldClrType: typeof(double),
            oldType: "float",
            oldDefaultValue: 0.0);

        migrationBuilder.AddColumn<float>(
            name: "Grid_CellSize_X",
            table: "Scenes",
            type: "real",
            nullable: false,
            defaultValue: 0f);

        migrationBuilder.AddColumn<float>(
            name: "Grid_CellSize_Y",
            table: "Scenes",
            type: "real",
            nullable: false,
            defaultValue: 0f);

        migrationBuilder.AddColumn<float>(
            name: "Grid_Offset_X",
            table: "Scenes",
            type: "real",
            nullable: false,
            defaultValue: 0f);

        migrationBuilder.AddColumn<float>(
            name: "Grid_Offset_Y",
            table: "Scenes",
            type: "real",
            nullable: false,
            defaultValue: 0f);

        migrationBuilder.AlterColumn<bool>(
            name: "IsPublished",
            table: "Assets",
            type: "bit",
            nullable: false,
            oldClrType: typeof(bool),
            oldType: "bit",
            oldDefaultValue: false);

        migrationBuilder.AlterColumn<bool>(
            name: "IsPublic",
            table: "Assets",
            type: "bit",
            nullable: false,
            oldClrType: typeof(bool),
            oldType: "bit",
            oldDefaultValue: false);

        migrationBuilder.AddColumn<int>(
            name: "Category",
            table: "Assets",
            type: "int",
            nullable: false,
            defaultValue: 0);

        migrationBuilder.AddColumn<string>(
            name: "Type",
            table: "Assets",
            type: "nvarchar(max)",
            nullable: false,
            defaultValue: "Placeholder");
    }
}