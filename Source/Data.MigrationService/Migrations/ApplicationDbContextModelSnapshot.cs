// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VttTools.Data;

#nullable disable

namespace VttTools.Data.MigrationService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VttTools.Data.Assets.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Assets", (string)null);

                    b.HasDiscriminator<string>("Kind");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.AssetResource", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("AssetId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("AssetResources", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GameSessions", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetimeoffset");

                    b.ComplexProperty<Dictionary<string, object>>("Recurrence", "VttTools.Data.Game.Entities.Schedule.Recurrence#Recurrence", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Count")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.PrimitiveCollection<string>("Days")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("[]");

                            b1.Property<string>("Frequency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("Daily");

                            b1.Property<int>("Interval")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.Property<DateTimeOffset?>("Until")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("UseWeekdays")
                                .HasColumnType("bit");
                        });

                    b.HasKey("Id");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.StatBlock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("StatBlocks", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Adventure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BackgroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOneShot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Adventures", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Barrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOpaque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsOpenable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSecret")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSolid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Barriers", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EpicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpicId");

                    b.HasIndex("ResourceId");

                    b.ToTable("Campaigns", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Effect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BoundedByStructures")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<Guid?>("VisualResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VisualResourceId");

                    b.ToTable("Effects", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Epic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId");

                    b.ToTable("Epics", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelMap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdventureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BackgroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultDisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Always");

                    b.Property<string>("DefaultLabelPosition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Bottom");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<float>("ZoomLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.ComplexProperty<Dictionary<string, object>>("Grid", "VttTools.Data.Library.Entities.Scene.Grid#Grid", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Snap")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false);

                            b1.Property<string>("Type")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("NoGrid");

                            b1.ComplexProperty<Dictionary<string, object>>("CellSize", "VttTools.Data.Library.Entities.Scene.Grid#Grid.CellSize#CellSize", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<double>("Height")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("float")
                                        .HasDefaultValue(64.0);

                                    b2.Property<double>("Width")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("float")
                                        .HasDefaultValue(64.0);
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Offset", "VttTools.Data.Library.Entities.Scene.Grid#Grid.Offset#Offset", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<double>("Left")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("float")
                                        .HasDefaultValue(0.0);

                                    b2.Property<double>("Top")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("float")
                                        .HasDefaultValue(0.0);
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Panning", "VttTools.Data.Library.Entities.Scene.Panning#Point", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("X")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);

                            b1.Property<double>("Y")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);
                        });

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("BackgroundId");

                    b.ToTable("Scenes", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneAsset", b =>
                {
                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ControlledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Default");

                    b.Property<float>("Elevation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LabelPosition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Rotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.ComplexProperty<Dictionary<string, object>>("Frame", "VttTools.Data.Library.Entities.SceneAsset.Frame#Frame", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Background")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("");

                            b1.Property<string>("BorderColor")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("white");

                            b1.Property<int>("BorderThickness")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.Property<string>("Shape")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("Square");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Position", "VttTools.Data.Library.Entities.SceneAsset.Position#Position", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("X")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);

                            b1.Property<double>("Y")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Size", "VttTools.Data.Library.Entities.SceneAsset.Size#NamedSize", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Height")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);

                            b1.Property<bool>("IsSquare")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(true);

                            b1.Property<double>("Width")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);
                        });

                    b.HasKey("SceneId", "Index");

                    b.HasIndex("AssetId");

                    b.HasIndex("ResourceId");

                    b.ToTable("SceneAssets", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneBarrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarrierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BarrierId");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneBarriers", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Origin", "VttTools.Data.Library.Entities.SceneEffect.Origin#Point", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("X")
                                .HasColumnType("float");

                            b1.Property<double>("Y")
                                .HasColumnType("float");
                        });

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneEffects", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneRegions", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Intensity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<bool>("IsGradient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("Range")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(5.0m);

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Position", "VttTools.Data.Library.Entities.SceneSource.Position#Point", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("X")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);

                            b1.Property<double>("Y")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("float")
                                .HasDefaultValue(0.0);
                        });

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("SourceId");

                    b.ToTable("SceneSources", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneStructure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSecret")
                        .HasColumnType("bit");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StructureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.HasIndex("StructureId");

                    b.ToTable("SceneStructures", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DefaultIntensity")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(1.0m);

                    b.Property<bool>("DefaultIsGradient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("DefaultRange")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(5.0m);

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Sources", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Structure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOpaque")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsOpenable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSecret")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VisualResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VisualResourceId");

                    b.ToTable("Structures", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Media.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<TimeSpan>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValue(new TimeSpan(0, 0, 0, 0, 0));

                    b.Property<decimal>("FileLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Undefined");

                    b.ComplexProperty<Dictionary<string, object>>("ImageSize", "VttTools.Data.Media.Entities.Resource.ImageSize#Size", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Height")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("Width")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);
                        });

                    b.HasKey("Id");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f"),
                            ConcurrencyStamp = "b62e16a3-1d3a-4ae3-8c30-9bc628231f7a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("019639ea-c7de-786f-9f95-b397ca9509df"),
                            ConcurrencyStamp = "11d8a8d1-3a54-4464-890f-5e8c71b46c0b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54c61fbd-4b9f-4a08-a6ce-c46443f8afb8",
                            DisplayName = "Master",
                            Email = "master@host.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Master",
                            NormalizedEmail = "MASTER@HOST.COM",
                            NormalizedUserName = "MASTER@HOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCIPOjKQsg/WIuLEYnhnyHOsif13MaeUlO0J2ZVkMe41HuVFCqudWtLqGMKQXNBNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QAZB7SA3GUP4I2DQCDEDORPB5Q5ICUQG",
                            TwoFactorEnabled = false,
                            UserName = "master@host.com"
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            RoleId = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f")
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.CreatureAsset", b =>
                {
                    b.HasBaseType("VttTools.Data.Assets.Entities.Asset");

                    b.HasDiscriminator().HasValue("Creature");
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.ObjectAsset", b =>
                {
                    b.HasBaseType("VttTools.Data.Assets.Entities.Asset");

                    b.HasDiscriminator().HasValue("Object");
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.AssetResource", b =>
                {
                    b.HasOne("VttTools.Data.Assets.Entities.Asset", "Asset")
                        .WithMany("Resources")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.GameSession", b =>
                {
                    b.OwnsMany("VttTools.Common.Model.Participant", "Players", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("bit");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("GameSessionId", "UserId");

                            b1.ToTable("Players", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.OwnsMany("VttTools.Game.Sessions.Model.GameSessionEvent", "Events", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Timestamp")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.HasKey("GameSessionId", "Timestamp");

                            b1.ToTable("Events", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.OwnsMany("VttTools.Game.Sessions.Model.GameSessionMessage", "Messages", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("SentAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("SentBy")
                                .HasColumnType("uniqueidentifier");

                            b1.PrimitiveCollection<string>("SentTo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("GameSessionId", "SentAt");

                            b1.ToTable("Messages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.Schedule", b =>
                {
                    b.OwnsMany("VttTools.Common.Model.Participant", "Participants", b1 =>
                        {
                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("bit");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("ScheduleId", "UserId");

                            b1.ToTable("Participants", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");
                        });

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Adventure", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VttTools.Data.Library.Entities.Campaign", "Campaign")
                        .WithMany("Adventures")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Background");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Campaign", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Epic", "Epic")
                        .WithMany("Campaigns")
                        .HasForeignKey("EpicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Epic");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Effect", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Visual")
                        .WithMany()
                        .HasForeignKey("VisualResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Visual");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Epic", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Scene", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Adventure", "Adventure")
                        .WithMany("Scenes")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Adventure");

                    b.Navigation("Background");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneAsset", b =>
                {
                    b.HasOne("VttTools.Data.Assets.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Scene", null)
                        .WithMany("SceneAssets")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneBarrier", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Barrier", "Barrier")
                        .WithMany()
                        .HasForeignKey("BarrierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("VttTools.Common.Model.Point", "Vertices", b1 =>
                        {
                            b1.Property<Guid>("SceneBarrierId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<double>("X")
                                .HasColumnType("float");

                            b1.Property<double>("Y")
                                .HasColumnType("float");

                            b1.HasKey("SceneBarrierId", "__synthesizedOrdinal");

                            b1.ToTable("SceneBarriers");

                            b1.ToJson("Vertices");

                            b1.WithOwner()
                                .HasForeignKey("SceneBarrierId");
                        });

                    b.Navigation("Barrier");

                    b.Navigation("Scene");

                    b.Navigation("Vertices");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneEffect", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneRegion", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("VttTools.Common.Model.Point", "Vertices", b1 =>
                        {
                            b1.Property<Guid>("SceneRegionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<double>("X")
                                .HasColumnType("float");

                            b1.Property<double>("Y")
                                .HasColumnType("float");

                            b1.HasKey("SceneRegionId", "__synthesizedOrdinal");

                            b1.ToTable("SceneRegions");

                            b1.ToJson("Vertices");

                            b1.WithOwner()
                                .HasForeignKey("SceneRegionId");
                        });

                    b.Navigation("Region");

                    b.Navigation("Scene");

                    b.Navigation("Vertices");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneSource", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Scene");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneStructure", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Scene", "Scene")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("VttTools.Common.Model.Point", "Vertices", b1 =>
                        {
                            b1.Property<Guid>("SceneStructureId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<double>("X")
                                .HasColumnType("float");

                            b1.Property<double>("Y")
                                .HasColumnType("float");

                            b1.HasKey("SceneStructureId", "__synthesizedOrdinal");

                            b1.ToTable("SceneStructures");

                            b1.ToJson("Vertices");

                            b1.WithOwner()
                                .HasForeignKey("SceneStructureId");
                        });

                    b.Navigation("Scene");

                    b.Navigation("Structure");

                    b.Navigation("Vertices");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Structure", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Visual")
                        .WithMany()
                        .HasForeignKey("VisualResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Visual");
                });

            modelBuilder.Entity("VttTools.Identity.Model.RoleClaim", b =>
                {
                    b.HasOne("VttTools.Identity.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserClaim", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserLogin", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserRole", b =>
                {
                    b.HasOne("VttTools.Identity.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserToken", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.CreatureAsset", b =>
                {
                    b.OwnsOne("VttTools.Data.Assets.Entities.CreatureProperties", "Properties", b1 =>
                        {
                            b1.Property<Guid>("CreatureAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("CellSize")
                                .HasColumnType("float");

                            b1.Property<Guid?>("StatBlockId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CreatureAssetId");

                            b1.ToTable("Assets");

                            b1.ToJson("CreatureProperties");

                            b1.WithOwner()
                                .HasForeignKey("CreatureAssetId");

                            b1.OwnsOne("VttTools.Data.Assets.Entities.TokenStyle", "TokenStyle", b2 =>
                                {
                                    b2.Property<Guid>("CreaturePropertiesCreatureAssetId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("BackgroundColor")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("BorderColor")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Shape")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("CreaturePropertiesCreatureAssetId");

                                    b2.ToTable("Assets");

                                    b2.WithOwner()
                                        .HasForeignKey("CreaturePropertiesCreatureAssetId");
                                });

                            b1.Navigation("TokenStyle");
                        });

                    b.Navigation("Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.ObjectAsset", b =>
                {
                    b.OwnsOne("VttTools.Data.Assets.Entities.ObjectProperties", "Properties", b1 =>
                        {
                            b1.Property<Guid>("ObjectAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("CellHeight")
                                .HasColumnType("float");

                            b1.Property<double>("CellWidth")
                                .HasColumnType("float");

                            b1.Property<bool>("IsMovable")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsOpaque")
                                .HasColumnType("bit");

                            b1.Property<Guid?>("TriggerEffectId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ObjectAssetId");

                            b1.ToTable("Assets");

                            b1.ToJson("ObjectProperties");

                            b1.WithOwner()
                                .HasForeignKey("ObjectAssetId");
                        });

                    b.Navigation("Properties")
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.Asset", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Adventure", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Campaign", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Epic", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Scene", b =>
                {
                    b.Navigation("SceneAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
