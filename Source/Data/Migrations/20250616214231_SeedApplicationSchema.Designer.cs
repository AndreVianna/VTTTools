// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VttTools.Data;

#nullable disable

namespace VttTools.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250616214231_SeedApplicationSchema")]
    partial class SeedApplicationSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VttTools.Data.Assets.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DisplayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Placeholder");

                    b.HasKey("Id");

                    b.HasIndex("DisplayId");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GameSessions", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetimeoffset");

                    b.ComplexProperty<Dictionary<string, object>>("Recurrence", "VttTools.Data.Game.Entities.Schedule.Recurrence#Recurrence", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Count")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.PrimitiveCollection<string>("Days")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("[]");

                            b1.Property<string>("Frequency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("Daily");

                            b1.Property<int>("Interval")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.Property<DateTimeOffset?>("Until")
                                .HasColumnType("datetimeoffset");

                            b1.Property<bool>("UseWeekdays")
                                .HasColumnType("bit");
                        });

                    b.HasKey("Id");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Adventure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BackgroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Adventures", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DisplayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EpicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DisplayId");

                    b.HasIndex("EpicId");

                    b.ToTable("Campaigns", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Epic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DisplayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DisplayId");

                    b.ToTable("Epics", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdventureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ZoomLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1f);

                    b.ComplexProperty<Dictionary<string, object>>("Grid", "VttTools.Data.Library.Entities.Scene.Grid#Grid", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Snap")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false);

                            b1.Property<string>("Type")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("NoGrid");

                            b1.ComplexProperty<Dictionary<string, object>>("CellSize", "VttTools.Data.Library.Entities.Scene.Grid#Grid.CellSize#Vector2", b2 =>
                                {
                                    b2.Property<float>("X")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("real")
                                        .HasDefaultValue(0f);

                                    b2.Property<float>("Y")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("real")
                                        .HasDefaultValue(0f);
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("Offset", "VttTools.Data.Library.Entities.Scene.Grid#Grid.Offset#Vector2", b2 =>
                                {
                                    b2.Property<float>("X")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("real")
                                        .HasDefaultValue(0f);

                                    b2.Property<float>("Y")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("real")
                                        .HasDefaultValue(0f);
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Panning", "VttTools.Data.Library.Entities.Scene.Panning#Point", b1 =>
                        {
                            b1.Property<int>("X")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("Y")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);
                        });

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("StageId");

                    b.ToTable("Scenes", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneAsset", b =>
                {
                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ControlledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DisplayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Elevation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<float>("Rotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.ComplexProperty<Dictionary<string, object>>("Frame", "VttTools.Data.Library.Entities.SceneAsset.Frame#Frame", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Background")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("");

                            b1.Property<string>("BorderColor")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("white");

                            b1.Property<int>("BorderThickness")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(1);

                            b1.Property<string>("Shape")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("nvarchar(max)")
                                .HasDefaultValue("Square");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Position", "VttTools.Data.Library.Entities.SceneAsset.Position#Point", b1 =>
                        {
                            b1.Property<int>("X")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("Y")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Size", "VttTools.Data.Library.Entities.SceneAsset.Size#Size", b1 =>
                        {
                            b1.Property<int>("Height")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("Width")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);
                        });

                    b.HasKey("SceneId", "Index");

                    b.HasIndex("AssetId");

                    b.HasIndex("DisplayId");

                    b.ToTable("SceneAssets", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Media.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<TimeSpan>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time")
                        .HasDefaultValue(new TimeSpan(0, 0, 0, 0, 0));

                    b.Property<decimal>("FileLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[]");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Undefined");

                    b.ComplexProperty<Dictionary<string, object>>("ImageSize", "VttTools.Data.Media.Entities.Resource.ImageSize#Size", b1 =>
                        {
                            b1.Property<int>("Height")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.Property<int>("Width")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);
                        });

                    b.HasKey("Id");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f"),
                            ConcurrencyStamp = "b62e16a3-1d3a-4ae3-8c30-9bc628231f7a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("019639ea-c7de-786f-9f95-b397ca9509df"),
                            ConcurrencyStamp = "11d8a8d1-3a54-4464-890f-5e8c71b46c0b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54c61fbd-4b9f-4a08-a6ce-c46443f8afb8",
                            DisplayName = "Master",
                            Email = "master@host.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Master",
                            NormalizedEmail = "MASTER@HOST.COM",
                            NormalizedUserName = "MASTER@HOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCIPOjKQsg/WIuLEYnhnyHOsif13MaeUlO0J2ZVkMe41HuVFCqudWtLqGMKQXNBNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QAZB7SA3GUP4I2DQCDEDORPB5Q5ICUQG",
                            TwoFactorEnabled = false,
                            UserName = "master@host.com"
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            RoleId = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f")
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("VttTools.Data.Assets.Entities.Asset", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Display");
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.GameSession", b =>
                {
                    b.OwnsMany("VttTools.Common.Model.Participant", "Players", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("bit");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("GameSessionId", "UserId");

                            b1.ToTable("Players", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.OwnsMany("VttTools.Game.Sessions.Model.GameSessionEvent", "Events", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Timestamp")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.HasKey("GameSessionId", "Timestamp");

                            b1.ToTable("Events", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.OwnsMany("VttTools.Game.Sessions.Model.GameSessionMessage", "Messages", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("SentAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("SentBy")
                                .HasColumnType("uniqueidentifier");

                            b1.PrimitiveCollection<string>("SentTo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("GameSessionId", "SentAt");

                            b1.ToTable("Messages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("VttTools.Data.Game.Entities.Schedule", b =>
                {
                    b.OwnsMany("VttTools.Common.Model.Participant", "Participants", b1 =>
                        {
                            b1.Property<Guid>("ScheduleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("bit");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("ScheduleId", "UserId");

                            b1.ToTable("Participants", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ScheduleId");
                        });

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Adventure", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Campaign", "Campaign")
                        .WithMany("Adventures")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Background");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Campaign", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Epic", "Epic")
                        .WithMany("Campaigns")
                        .HasForeignKey("EpicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Display");

                    b.Navigation("Epic");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Epic", b =>
                {
                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Display");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Scene", b =>
                {
                    b.HasOne("VttTools.Data.Library.Entities.Adventure", "Adventure")
                        .WithMany("Scenes")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adventure");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.SceneAsset", b =>
                {
                    b.HasOne("VttTools.Data.Assets.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Media.Entities.Resource", "Display")
                        .WithMany()
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Data.Library.Entities.Scene", null)
                        .WithMany("SceneAssets")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Display");
                });

            modelBuilder.Entity("VttTools.Identity.Model.RoleClaim", b =>
                {
                    b.HasOne("VttTools.Identity.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserClaim", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserLogin", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserRole", b =>
                {
                    b.HasOne("VttTools.Identity.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserToken", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Adventure", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Campaign", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Epic", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("VttTools.Data.Library.Entities.Scene", b =>
                {
                    b.Navigation("SceneAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
