// <auto-generated />
using System;

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace VttTools.Data.Migrations;
/// <inheritdoc />
public partial class CreateLibrarySchema : Migration {
    /// <inheritdoc />
    protected override void Up(MigrationBuilder migrationBuilder) {
        migrationBuilder.CreateTable(
            name: "Epics",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                TemplateId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                Visibility = table.Column<int>(type: "int", nullable: false)
            },
            constraints: table => table.PrimaryKey("PK_Epics", x => x.Id));

        migrationBuilder.CreateTable(
            name: "Campaigns",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                ParentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                TemplateId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                Visibility = table.Column<int>(type: "int", nullable: false)
            },
            constraints: table => {
                table.PrimaryKey("PK_Campaigns", x => x.Id);
                table.ForeignKey(
                    name: "FK_Campaigns_Epics_ParentId",
                    column: x => x.ParentId,
                    principalTable: "Epics",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "Adventures",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                ParentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                TemplateId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                Visibility = table.Column<int>(type: "int", nullable: false)
            },
            constraints: table => {
                table.PrimaryKey("PK_Adventures", x => x.Id);
                table.ForeignKey(
                    name: "FK_Adventures_Campaigns_ParentId",
                    column: x => x.ParentId,
                    principalTable: "Campaigns",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "Scenes",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                OwnerId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                ParentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                IsTemplate = table.Column<bool>(type: "bit", nullable: false),
                TemplateId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                Visibility = table.Column<int>(type: "int", nullable: false),
                Stage_MapType = table.Column<int>(type: "int", nullable: false),
                Stage_Source = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: false),
                Stage_Size_Width = table.Column<double>(type: "float", nullable: false),
                Stage_Size_Height = table.Column<double>(type: "float", nullable: false),
                Stage_Grid_Offset_Left = table.Column<double>(type: "float", nullable: false),
                Stage_Grid_Offset_Top = table.Column<double>(type: "float", nullable: false),
                Stage_Grid_CellSize_Width = table.Column<double>(type: "float", nullable: false),
                Stage_Grid_CellSize_Height = table.Column<double>(type: "float", nullable: false)
            },
            constraints: table => {
                table.PrimaryKey("PK_Scenes", x => x.Id);
                table.ForeignKey(
                    name: "FK_Scenes_Adventures_ParentId",
                    column: x => x.ParentId,
                    principalTable: "Adventures",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "SceneAssets",
            columns: table => new {
                Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                SceneId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                AssetId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                Name = table.Column<string>(type: "nvarchar(128)", maxLength: 128, nullable: false),
                Position_Left = table.Column<double>(type: "float", nullable: false),
                Position_Top = table.Column<double>(type: "float", nullable: false),
                Scale = table.Column<double>(type: "float", nullable: false, defaultValue: 1.0),
                IsLocked = table.Column<bool>(type: "bit", nullable: false),
                ControlledBy = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
            },
            constraints: table => {
                table.PrimaryKey("PK_SceneAssets", x => x.Id);
                table.ForeignKey(
                    name: "FK_SceneAssets_Assets_SceneId",
                    column: x => x.SceneId,
                    principalTable: "Assets",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "FK_SceneAssets_Scenes_SceneId",
                    column: x => x.SceneId,
                    principalTable: "Scenes",
                    principalColumn: "Id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateIndex(
            name: "IX_Adventures_ParentId",
            table: "Adventures",
            column: "AdventureId");

        migrationBuilder.CreateIndex(
            name: "IX_Campaigns_ParentId",
            table: "Campaigns",
            column: "AdventureId");

        migrationBuilder.CreateIndex(
            name: "IX_SceneAssets_SceneId",
            table: "SceneAssets",
            column: "TemplateId");

        migrationBuilder.CreateIndex(
            name: "IX_Scenes_ParentId",
            table: "Scenes",
            column: "AdventureId");
    }

    /// <inheritdoc />
    protected override void Down(MigrationBuilder migrationBuilder) {
        migrationBuilder.DropTable(
            name: "SceneAssets");

        migrationBuilder.DropTable(
            name: "Scenes");

        migrationBuilder.DropTable(
            name: "Adventures");

        migrationBuilder.DropTable(
            name: "Campaigns");

        migrationBuilder.DropTable(
            name: "Epics");
    }
}