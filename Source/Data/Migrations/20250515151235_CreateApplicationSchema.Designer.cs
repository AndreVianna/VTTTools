// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VttTools.Data;

#nullable disable

namespace VttTools.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515151235_CreateApplicationSchema")]
    partial class CreateApplicationSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VttTools.Assets.Model.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("VttTools.Game.Sessions.Model.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GameSessions", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f"),
                            ConcurrencyStamp = "b62e16a3-1d3a-4ae3-8c30-9bc628231f7a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("019639ea-c7de-786f-9f95-b397ca9509df"),
                            ConcurrencyStamp = "11d8a8d1-3a54-4464-890f-5e8c71b46c0b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54c61fbd-4b9f-4a08-a6ce-c46443f8afb8",
                            DisplayName = "Master",
                            Email = "master@host.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Master",
                            NormalizedEmail = "MASTER@HOST.COM",
                            NormalizedUserName = "MASTER@HOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCIPOjKQsg/WIuLEYnhnyHOsif13MaeUlO0J2ZVkMe41HuVFCqudWtLqGMKQXNBNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QAZB7SA3GUP4I2DQCDEDORPB5Q5ICUQG",
                            TwoFactorEnabled = false,
                            UserName = "master@host.com"
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            RoleId = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f")
                        });
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("VttTools.Library.Adventures.Model.Adventure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Adventures", (string)null);
                });

            modelBuilder.Entity("VttTools.Library.Campaigns.Model.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EpicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EpicId");

                    b.ToTable("Campaigns", (string)null);
                });

            modelBuilder.Entity("VttTools.Library.Epics.Model.Epic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Epics", (string)null);
                });

            modelBuilder.Entity("VttTools.Library.Scenes.Model.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdventureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("Scenes", (string)null);
                });

            modelBuilder.Entity("VttTools.Library.Scenes.Model.SceneAsset", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SceneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ControlledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("Scale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("AssetId", "SceneId", "Number");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneAssets", (string)null);
                });

            modelBuilder.Entity("VttTools.Assets.Model.Asset", b =>
                {
                    b.OwnsOne("VttTools.Assets.Model.Format", "Format", b1 =>
                        {
                            b1.Property<Guid>("AssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("SourceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("AssetId");

                            b1.ToTable("Assets");

                            b1.WithOwner()
                                .HasForeignKey("AssetId");

                            b1.OwnsOne("VttTools.Common.Model.Size", "Size", b2 =>
                                {
                                    b2.Property<Guid>("FormatAssetId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<double>("Height")
                                        .HasColumnType("float");

                                    b2.Property<double>("Width")
                                        .HasColumnType("float");

                                    b2.HasKey("FormatAssetId");

                                    b2.ToTable("Assets");

                                    b2.WithOwner()
                                        .HasForeignKey("FormatAssetId");
                                });

                            b1.Navigation("Size")
                                .IsRequired();
                        });

                    b.Navigation("Format")
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Game.Sessions.Model.GameSession", b =>
                {
                    b.OwnsMany("VttTools.Game.Sessions.Model.GameSessionEvent", "Events", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Timestamp")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.HasKey("GameSessionId", "Timestamp");

                            b1.ToTable("Events", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.OwnsMany("VttTools.Game.Sessions.Model.GameSessionMessage", "Messages", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("SentAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("SentBy")
                                .HasColumnType("uniqueidentifier");

                            b1.PrimitiveCollection<string>("SentTo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("GameSessionId", "SentAt");

                            b1.ToTable("Messages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.OwnsMany("VttTools.Game.Sessions.Model.Player", "Players", b1 =>
                        {
                            b1.Property<Guid>("GameSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("GameSessionId", "UserId");

                            b1.ToTable("Players", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("GameSessionId");
                        });

                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("VttTools.Identity.Model.RoleClaim", b =>
                {
                    b.HasOne("VttTools.Identity.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserClaim", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserLogin", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserRole", b =>
                {
                    b.HasOne("VttTools.Identity.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Identity.Model.UserToken", b =>
                {
                    b.HasOne("VttTools.Identity.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Library.Adventures.Model.Adventure", b =>
                {
                    b.HasOne("VttTools.Library.Campaigns.Model.Campaign", "Campaign")
                        .WithMany("Adventures")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("VttTools.Library.Campaigns.Model.Campaign", b =>
                {
                    b.HasOne("VttTools.Library.Epics.Model.Epic", "Epic")
                        .WithMany("Campaigns")
                        .HasForeignKey("EpicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Epic");
                });

            modelBuilder.Entity("VttTools.Library.Scenes.Model.Scene", b =>
                {
                    b.HasOne("VttTools.Library.Adventures.Model.Adventure", "Adventure")
                        .WithMany("Scenes")
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("VttTools.Library.Scenes.Model.Stage", "Stage", b1 =>
                        {
                            b1.Property<Guid>("SceneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.HasKey("SceneId");

                            b1.ToTable("Scenes");

                            b1.WithOwner()
                                .HasForeignKey("SceneId");

                            b1.OwnsOne("VttTools.Library.Scenes.Model.Grid", "Grid", b2 =>
                                {
                                    b2.Property<Guid>("StageSceneId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("Type")
                                        .HasColumnType("int");

                                    b2.HasKey("StageSceneId");

                                    b2.ToTable("Scenes");

                                    b2.WithOwner()
                                        .HasForeignKey("StageSceneId");

                                    b2.OwnsOne("VttTools.Common.Model.Size", "CellSize", b3 =>
                                        {
                                            b3.Property<Guid>("GridStageSceneId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double>("Height")
                                                .HasColumnType("float");

                                            b3.Property<double>("Width")
                                                .HasColumnType("float");

                                            b3.HasKey("GridStageSceneId");

                                            b3.ToTable("Scenes");

                                            b3.WithOwner()
                                                .HasForeignKey("GridStageSceneId");
                                        });

                                    b2.OwnsOne("VttTools.Common.Model.Position", "Offset", b3 =>
                                        {
                                            b3.Property<Guid>("GridStageSceneId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double>("Left")
                                                .HasColumnType("float");

                                            b3.Property<double>("Top")
                                                .HasColumnType("float");

                                            b3.HasKey("GridStageSceneId");

                                            b3.ToTable("Scenes");

                                            b3.WithOwner()
                                                .HasForeignKey("GridStageSceneId");
                                        });

                                    b2.Navigation("CellSize")
                                        .IsRequired();

                                    b2.Navigation("Offset")
                                        .IsRequired();
                                });

                            b1.OwnsOne("VttTools.Common.Model.Size", "Size", b2 =>
                                {
                                    b2.Property<Guid>("StageSceneId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<double>("Height")
                                        .HasColumnType("float");

                                    b2.Property<double>("Width")
                                        .HasColumnType("float");

                                    b2.HasKey("StageSceneId");

                                    b2.ToTable("Scenes");

                                    b2.WithOwner()
                                        .HasForeignKey("StageSceneId");
                                });

                            b1.Navigation("Grid")
                                .IsRequired();

                            b1.Navigation("Size")
                                .IsRequired();
                        });

                    b.Navigation("Adventure");

                    b.Navigation("Stage")
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Library.Scenes.Model.SceneAsset", b =>
                {
                    b.HasOne("VttTools.Assets.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Library.Scenes.Model.Scene", "Scene")
                        .WithMany("SceneAssets")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("VttTools.Assets.Model.Format", "Format", b1 =>
                        {
                            b1.Property<Guid>("SceneAssetAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("SceneAssetSceneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("SceneAssetNumber")
                                .HasColumnType("bigint");

                            b1.Property<Guid?>("SourceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("SceneAssetAssetId", "SceneAssetSceneId", "SceneAssetNumber");

                            b1.ToTable("SceneAssets");

                            b1.WithOwner()
                                .HasForeignKey("SceneAssetAssetId", "SceneAssetSceneId", "SceneAssetNumber");

                            b1.OwnsOne("VttTools.Common.Model.Size", "Size", b2 =>
                                {
                                    b2.Property<Guid>("FormatSceneAssetAssetId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("FormatSceneAssetSceneId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<long>("FormatSceneAssetNumber")
                                        .HasColumnType("bigint");

                                    b2.Property<double>("Height")
                                        .HasColumnType("float");

                                    b2.Property<double>("Width")
                                        .HasColumnType("float");

                                    b2.HasKey("FormatSceneAssetAssetId", "FormatSceneAssetSceneId", "FormatSceneAssetNumber");

                                    b2.ToTable("SceneAssets");

                                    b2.WithOwner()
                                        .HasForeignKey("FormatSceneAssetAssetId", "FormatSceneAssetSceneId", "FormatSceneAssetNumber");
                                });

                            b1.Navigation("Size")
                                .IsRequired();
                        });

                    b.OwnsOne("VttTools.Common.Model.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("SceneAssetAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("SceneAssetSceneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("SceneAssetNumber")
                                .HasColumnType("bigint");

                            b1.Property<double>("Left")
                                .HasColumnType("float");

                            b1.Property<double>("Top")
                                .HasColumnType("float");

                            b1.HasKey("SceneAssetAssetId", "SceneAssetSceneId", "SceneAssetNumber");

                            b1.ToTable("SceneAssets");

                            b1.WithOwner()
                                .HasForeignKey("SceneAssetAssetId", "SceneAssetSceneId", "SceneAssetNumber");
                        });

                    b.Navigation("Asset");

                    b.Navigation("Format")
                        .IsRequired();

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("VttTools.Library.Adventures.Model.Adventure", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("VttTools.Library.Campaigns.Model.Campaign", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("VttTools.Library.Epics.Model.Epic", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("VttTools.Library.Scenes.Model.Scene", b =>
                {
                    b.Navigation("SceneAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
