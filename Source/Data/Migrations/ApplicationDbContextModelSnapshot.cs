// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VttTools.Data;

#nullable disable

namespace VttTools.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VttTools.Model.Game.Adventure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Adventures", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Game.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Game.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Campaigns", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Game.Epic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Epics", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Game.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Episodes", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Game.EpisodeAsset", b =>
                {
                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ControlledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double>("Scale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0);

                    b.HasKey("EpisodeId", "AssetId");

                    b.ToTable("EpisodeAssets", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Game.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EpisodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f"),
                            ConcurrencyStamp = "b62e16a3-1d3a-4ae3-8c30-9bc628231f7a",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("019639ea-c7de-786f-9f95-b397ca9509df"),
                            ConcurrencyStamp = "11d8a8d1-3a54-4464-890f-5e8c71b46c0b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("VttTools.Model.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54c61fbd-4b9f-4a08-a6ce-c46443f8afb8",
                            DisplayName = "Master",
                            Email = "master@host.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Master",
                            NormalizedEmail = "MASTER@HOST.COM",
                            NormalizedUserName = "MASTER@HOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGCIPOjKQsg/WIuLEYnhnyHOsif13MaeUlO0J2ZVkMe41HuVFCqudWtLqGMKQXNBNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "QAZB7SA3GUP4I2DQCDEDORPB5Q5ICUQG",
                            TwoFactorEnabled = false,
                            UserName = "master@host.com"
                        });
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("019639ea-c7de-7a01-8548-41edfccde206"),
                            RoleId = new Guid("019639ea-c7de-7e6f-b549-baf14386ad2f")
                        });
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("VttTools.Model.Game.Adventure", b =>
                {
                    b.HasOne("VttTools.Model.Game.Campaign", "Campaign")
                        .WithMany("Adventures")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("VttTools.Model.Game.Asset", b =>
                {
                    b.OwnsOne("VttTools.Model.Game.Size", "Size", b1 =>
                        {
                            b1.Property<Guid>("AssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Height")
                                .HasColumnType("float");

                            b1.Property<double>("Width")
                                .HasColumnType("float");

                            b1.HasKey("AssetId");

                            b1.ToTable("Assets");

                            b1.WithOwner()
                                .HasForeignKey("AssetId");
                        });

                    b.Navigation("Size")
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Game.Campaign", b =>
                {
                    b.HasOne("VttTools.Model.Game.Epic", "Epic")
                        .WithMany("Campaigns")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Epic");
                });

            modelBuilder.Entity("VttTools.Model.Game.Episode", b =>
                {
                    b.HasOne("VttTools.Model.Game.Adventure", "Adventure")
                        .WithMany("Episodes")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("VttTools.Model.Game.Stage", "Stage", b1 =>
                        {
                            b1.Property<Guid>("EpisodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MapType")
                                .HasColumnType("int");

                            b1.Property<string>("Source")
                                .IsRequired()
                                .HasMaxLength(512)
                                .HasColumnType("nvarchar(512)");

                            b1.HasKey("EpisodeId");

                            b1.ToTable("Episodes");

                            b1.WithOwner()
                                .HasForeignKey("EpisodeId");

                            b1.OwnsOne("VttTools.Model.Game.Grid", "Grid", b2 =>
                                {
                                    b2.Property<Guid>("StageEpisodeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("StageEpisodeId");

                                    b2.ToTable("Episodes");

                                    b2.WithOwner()
                                        .HasForeignKey("StageEpisodeId");

                                    b2.OwnsOne("VttTools.Model.Game.Size", "CellSize", b3 =>
                                        {
                                            b3.Property<Guid>("GridStageEpisodeId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double>("Height")
                                                .HasColumnType("float");

                                            b3.Property<double>("Width")
                                                .HasColumnType("float");

                                            b3.HasKey("GridStageEpisodeId");

                                            b3.ToTable("Episodes");

                                            b3.WithOwner()
                                                .HasForeignKey("GridStageEpisodeId");
                                        });

                                    b2.OwnsOne("VttTools.Model.Game.Position", "Offset", b3 =>
                                        {
                                            b3.Property<Guid>("GridStageEpisodeId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<double>("Left")
                                                .HasColumnType("float");

                                            b3.Property<double>("Top")
                                                .HasColumnType("float");

                                            b3.HasKey("GridStageEpisodeId");

                                            b3.ToTable("Episodes");

                                            b3.WithOwner()
                                                .HasForeignKey("GridStageEpisodeId");
                                        });

                                    b2.Navigation("CellSize")
                                        .IsRequired();

                                    b2.Navigation("Offset")
                                        .IsRequired();
                                });

                            b1.OwnsOne("VttTools.Model.Game.Size", "Size", b2 =>
                                {
                                    b2.Property<Guid>("StageEpisodeId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<double>("Height")
                                        .HasColumnType("float");

                                    b2.Property<double>("Width")
                                        .HasColumnType("float");

                                    b2.HasKey("StageEpisodeId");

                                    b2.ToTable("Episodes");

                                    b2.WithOwner()
                                        .HasForeignKey("StageEpisodeId");
                                });

                            b1.Navigation("Grid")
                                .IsRequired();

                            b1.Navigation("Size")
                                .IsRequired();
                        });

                    b.Navigation("Adventure");

                    b.Navigation("Stage")
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Game.EpisodeAsset", b =>
                {
                    b.HasOne("VttTools.Model.Game.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Model.Game.Episode", "Episode")
                        .WithMany("EpisodeAssets")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("VttTools.Model.Game.Position", "Position", b1 =>
                        {
                            b1.Property<Guid>("EpisodeAssetEpisodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("EpisodeAssetAssetId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Left")
                                .HasColumnType("float");

                            b1.Property<double>("Top")
                                .HasColumnType("float");

                            b1.HasKey("EpisodeAssetEpisodeId", "EpisodeAssetAssetId");

                            b1.ToTable("EpisodeAssets");

                            b1.WithOwner()
                                .HasForeignKey("EpisodeAssetEpisodeId", "EpisodeAssetAssetId");
                        });

                    b.Navigation("Asset");

                    b.Navigation("Episode");

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Game.Meeting", b =>
                {
                    b.OwnsMany("VttTools.Model.Game.MeetingEvent", "Events", b1 =>
                        {
                            b1.Property<Guid>("MeetingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("Timestamp")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.HasKey("MeetingId", "Timestamp");

                            b1.ToTable("MeetingEvents", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.OwnsMany("VttTools.Model.Game.MeetingMessage", "Messages", b1 =>
                        {
                            b1.Property<Guid>("MeetingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("SentAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasMaxLength(4096)
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SentBy")
                                .HasColumnType("int");

                            b1.PrimitiveCollection<string>("SentTo")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("MeetingId", "SentAt");

                            b1.ToTable("MeetingMessages", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.OwnsMany("VttTools.Model.Game.MeetingPlayer", "Players", b1 =>
                        {
                            b1.Property<Guid>("MeetingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("MeetingId", "UserId");

                            b1.ToTable("MeetingPlayers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.Navigation("Events");

                    b.Navigation("Messages");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("VttTools.Model.Identity.RoleClaim", b =>
                {
                    b.HasOne("VttTools.Model.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserClaim", b =>
                {
                    b.HasOne("VttTools.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserLogin", b =>
                {
                    b.HasOne("VttTools.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserRole", b =>
                {
                    b.HasOne("VttTools.Model.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VttTools.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Identity.UserToken", b =>
                {
                    b.HasOne("VttTools.Model.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VttTools.Model.Game.Adventure", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("VttTools.Model.Game.Campaign", b =>
                {
                    b.Navigation("Adventures");
                });

            modelBuilder.Entity("VttTools.Model.Game.Epic", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("VttTools.Model.Game.Episode", b =>
                {
                    b.Navigation("EpisodeAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
