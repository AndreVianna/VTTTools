@page "/adventures/{AdventureId:guid}/scenes"
@inherits Page<ScenesPage, ScenesPageHandler>
@rendermode InteractiveServer

<PageTitle>Scenes</PageTitle>

<div class="container">
  <div id="page-header" class="row mb-4">
    <div class="col">
      <h1>Scenes</h1>
    </div>
    <div class="col-auto">
      <button class="btn btn-secondary ms-2" @onclick='() => RedirectTo("/adventures")'>Back to your Adventures</button>
    </div>
  </div>
@if (!IsReady) {
  <div id="loading-message" class="d-flex justify-content-center">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
}
else {
  <EditForm id="scene-create-form" Model="CreateInput" FormName="create" OnValidSubmit="CreateScene" method="post">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
      <InputText id="create-scene-name-input" @bind-Value="CreateInput.Name" class="form-control mb-1" />
      <label for="create-scene-name-input" class="form-label">@nameof(Scene.Name)</label>
      <ValidationMessage For="() => CreateInput.Name" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
      <button id="create-scene" type="submit" class="btn btn-primary">Create</button>
    </div>
  </EditForm>
  @if (State.Scenes.Count == 0) {
    <div id="no-items-message" class="alert alert-info">
      You don't have any scenes yet. Create a new one to get started!
    </div>
  }
  else {
  <table id="scenes-table" class="table">
  <thead>
    <tr>
      <th id="scenes-name-header">@nameof(Scene.Name)</th>
      <th id="scenes-action-header">Actions</th>
    </tr>
  </thead>
  <tbody>
  @foreach (var scene in State.Scenes) {
    <tr>
      <td id="@($"scene-{scene.Id}-name")">@scene.Name</td>
      <td id="@($"scene-{scene.Id}-actions")">
        <button id="@($"edit-scene-{scene.Id}")" class="btn btn-secondary btn-sm me-1" @onclick="() => StartEdit(scene)">Edit</button>
        <button id="@($"delete-scene-{scene.Id}")" class="btn btn-danger btn-sm me-1" @onclick="() => DeleteScene(scene.Id)">Delete</button>
        <button id="@($"clone-scene-{scene.Id}")" class="btn btn-info btn-sm" @onclick="() => CloneScene(scene.Id)">Clone</button>
      </td>
    </tr>
  }
  </tbody>
  </table>
  }
}

@if (IsReady && State.IsEditing) {
  <div id="edit-scene-dialog" class="modal fade show" style="display: block;" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
      <EditForm id="edit-scene-form" Model="EditInput" FormName="edit" OnValidSubmit="SaveEdit" method="post">
        <div class="modal-header">
          <h5 class="modal-title">Edit Scene</h5>
          <button id="edit-scene-dialog-close" sceneid="button" class="btn-close" @onclick="CancelEdit"></button>
        </div>
        <div class="modal-body">
          <DataAnnotationsValidator />
          <ValidationSummary class="text-danger" role="alert" />
          <div class="form-floating mb-3">
            <InputText id="edit-scene-name-input" @bind-Value="EditInput.Name" class="form-control mb-1" />
            <label for="edit-scene-name-input" class="form-label">@nameof(Scene.Name)</label>
            <ValidationMessage For="() => EditInput.Name" class="text-danger" />
          </div>
        </div>
        <div class="modal-footer">
          <button id="edit-scene-cancel"sceneid="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
          <button id="edit-scene-submit" sceneid="submit" class="btn btn-primary">Edit</button>
        </div>
      </EditForm>
      </div>
    </div>
  </div>
  <div class="modal-backdrop fade show"></div>
}
</div>
