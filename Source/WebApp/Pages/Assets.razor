@page "/Assets"
@using VttTools.Model.Game
@using VttTools.Contracts.Game
@inject WebApp.Services.GameServiceClient GameClient

<h3>Assets</h3>

<div class="mb-3">
    <input class="form-control mb-1" placeholder="Name" @bind="newName" />
    <input class="form-control mb-1" placeholder="Source URL" @bind="newSource" />
    <select class="form-select mb-1" @bind="newType">
        @foreach (var t in Enum.GetValues<AssetType>())
        {
            <option value="@t">@t</option>
        }
    </select>
    <select class="form-select mb-1" @bind="newVisibility">
        @foreach (var v in Enum.GetValues<Visibility>())
        {
            <option value="@v">@v</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CreateAsset">Create</button>
</div>

@if (assets is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Source</th>
                <th>Visibility</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var asset in assets)
            {
                <tr>
                    <td>@asset.Name</td>
                    <td>@asset.Type</td>
                    <td><a href="@asset.Source" target="_blank">Link</a></td>
                    <td>@asset.Visibility</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAsset(asset.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Asset[]? assets;
    private string newName = string.Empty;
    private string newSource = string.Empty;
    private AssetType newType = AssetType.Placeholder;
    private Visibility newVisibility = Visibility.Hidden;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssets();
    }

    private async Task LoadAssets()
    {
        assets = await GameClient.GetAssetsAsync();
        StateHasChanged();
    }

    private async Task CreateAsset()
    {
        if (string.IsNullOrWhiteSpace(newName) || string.IsNullOrWhiteSpace(newSource))
            return;
        var request = new CreateAssetRequest
        {
            Name = newName,
            Source = newSource,
            Type = newType,
            Visibility = newVisibility
        };
        var created = await GameClient.CreateAssetAsync(request);
        if (created != null)
        {
            newName = string.Empty;
            newSource = string.Empty;
            await LoadAssets();
        }
    }

    private async Task DeleteAsset(Guid id)
    {
        await GameClient.DeleteAssetAsync(id);
        await LoadAssets();
    }
}