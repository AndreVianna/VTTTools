@page "/meetings/{MeetingId:guid}"
@inherits PrivateComponent<MeetingDetailsPageHandler>
@rendermode InteractiveAuto

<PageTitle>Game Meeting: @(IsReady ? "Loading..." : State.Meeting.Subject)</PageTitle>

@if (!IsReady) {
  <div class="d-flex justify-content-center">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
}
else {
  <div class="container">
    <div class="row mb-4 align-items-center">
      <div class="col">
        <h1>@State.Meeting.Subject</h1>
      </div>
      <div class="col-auto">
      @if (State.CanEdit) {
        <button class="btn btn-primary me-2" @onclick="OpenEditMeetingDialog">Edit Meeting</button>
      }
      @if (State.CanStart) {
        <button class="btn btn-success me-2" @onclick="StartMeeting">Start Meeting</button>
      }
        <button class="btn btn-secondary" @onclick="NavigateToMeetings">Back to Meetings</button>
      </div>
    </div>

    <div class="row">
      <div class="col-md-8">
        <div class="card mb-4">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Maps</h5>
          @if (State.CanEdit) {
            <button class="btn btn-sm btn-outline-primary">Add Map</button>
          }
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card">
          <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Players</h5>
          @if (State.CanEdit) {
            <button class="btn btn-sm btn-outline-primary">Invite Player</button>
          }
          </div>
          <div class="card-body">
          @if (!State.Meeting.Players.Any()) {
            <div class="alert alert-info">
              No players have joined this meeting.
            </div>
          }
          else {
            <ul class="list-group">
            @foreach (var player in State.Meeting.Players)
            {
              <li class="list-group-item d-flex justify-content-between align-items-center">
                @(player.UserId == CurrentUser.Id ? "You" : player.UserId.ToString()[..8])
                <span class="badge bg-@(player.Type == PlayerType.Master ? "danger" : "primary")">
                  @player.Type
                </span>
              </li>
            }
            </ul>
          }
          </div>
        </div>
      </div>
    </div>
  </div>
}

@if (IsReady && State.ShowEditDialog) {
  <div class="modal fade show" style="display: block;" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit Meeting</h5>
          <button type="button" class="btn-close" @onclick="CloseEditMeetingDialog"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="meetingName" class="form-label">Meeting Subject</label>
            <input type="text" class="form-control" id="meetingName" @bind="Input.Subject">
            @if (Input.Errors.Length != 0) {
              <ul>
              @foreach (var error in Input.Errors) {
                <li class="text-danger mt-1">@error.Message</li>
              }
              </ul>
            }
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" @onclick="CloseEditMeetingDialog">Cancel</button>
          <button type="button" class="btn btn-primary" @onclick="UpdateMeeting">Save</button>
        </div>
      </div>
    </div>
  </div>
  <div class="modal-backdrop fade show"></div>
}
