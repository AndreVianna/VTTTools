@page "/Adventures/{AdventureId:guid}/Episodes"
@using VttTools.Model.Game
@using VttTools.Contracts.Game
@inject WebApp.Services.GameServiceClient GameClient
@inject NavigationManager NavManager

<h3>Episodes for Adventure @AdventureId</h3>

<div class="mb-3">
    <input class="form-control mb-1" placeholder="Name" @bind="newName" />
    <select class="form-select mb-1" @bind="newVisibility">
        <option value="@Visibility.Hidden">Hidden</option>
        <option value="@Visibility.Private">Private</option>
        <option value="@Visibility.Public">Public</option>
    </select>
    <button class="btn btn-primary" @onclick="CreateEpisode">Create</button>
    <button class="btn btn-secondary ms-2" @onclick='() => NavManager.NavigateTo("/Adventures")'>Back to Adventures</button>
</div>

@if (episodes is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Visibility</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ep in episodes)
            {
                <tr>
                    <td>@ep.Name</td>
                    <td>@ep.Visibility</td>
                    <td>
                        <button class="btn btn-secondary btn-sm me-1" @onclick="() => StartEdit(ep)">Edit</button>
                        <button class="btn btn-danger btn-sm me-1" @onclick="() => DeleteEpisode(ep.Id)">Delete</button>
                        <button class="btn btn-info btn-sm" @onclick="() => CloneEpisode(ep.Id)">Clone</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isEditing && editEpisode is not null)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Episode</h5>
                    <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                </div>
                <div class="modal-body">
                    <input class="form-control mb-1" @bind="editEpisode.Name" />
                    <select class="form-select mb-1" @bind="editEpisode.Visibility">
                        <option value="@Visibility.Hidden">Hidden</option>
                        <option value="@Visibility.Private">Private</option>
                        <option value="@Visibility.Public">Public</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    <button class="btn btn-primary" @onclick="SaveEdit">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public Guid AdventureId { get; set; }

    private Episode[]? episodes;
    private string newName = string.Empty;
    private Visibility newVisibility = Visibility.Hidden;

    private bool isEditing;
    private UpdateEpisodeRequest editEpisode = new();
    private Guid editingEpisodeId;

    protected override async Task OnInitializedAsync()
    {
        await LoadEpisodes();
    }

    private async Task LoadEpisodes()
    {
        episodes = await GameClient.GetEpisodesAsync(AdventureId);
        StateHasChanged();
    }

    private async Task CreateEpisode()
    {
        if (string.IsNullOrWhiteSpace(newName))
            return;
        var request = new CreateEpisodeRequest
        {
            Name = newName,
            Visibility = newVisibility
        };
        var created = await GameClient.CreateEpisodeAsync(AdventureId, request);
        if (created != null)
        {
            newName = string.Empty;
            await LoadEpisodes();
        }
    }

    private void StartEdit(Episode ep)
    {
        isEditing = true;
        editingEpisodeId = ep.Id;
        editEpisode = new UpdateEpisodeRequest
        {
            Name = ep.Name,
            Visibility = ep.Visibility
        };
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    private async Task SaveEdit()
    {
        var updated = await GameClient.UpdateEpisodeAsync(editingEpisodeId, editEpisode);
        if (updated != null)
        {
            isEditing = false;
            await LoadEpisodes();
        }
    }

    private async Task DeleteEpisode(Guid id)
    {
        await GameClient.DeleteEpisodeAsync(id);
        await LoadEpisodes();
    }

    private async Task CloneEpisode(Guid id)
    {
        var clone = await GameClient.CloneEpisodeAsync(id);
        if (clone != null)
        {
            await LoadEpisodes();
        }
    }
}