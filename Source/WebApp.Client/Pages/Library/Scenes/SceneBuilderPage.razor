@page "/scenes/builder/{SceneId:guid}"
@rendermode InteractiveWebAssembly

<PageTitle>Scene Builder</PageTitle>

<div class="container-fluid">
  <div class="scene-builder-toolbar">
    <div class="toolbar-group">
      <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="stageMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
          Stage
        </button>
        <ul class="dropdown-menu" aria-labelledby="stageMenuButton">
          <li><button class="dropdown-item" @onclick="OpenChangeImageModal">Change Image</button></li>
          <li><button class="dropdown-item" @onclick="OpenGridSettingsModal">Set Grid</button></li>
        </ul>
      </div>
    </div>
    <div class="toolbar-group">
      <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="assetsMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
          Assets
        </button>
        <ul class="dropdown-menu" aria-labelledby="assetsMenuButton">
          <li><button class="dropdown-item" @onclick="() => StartAssetPlacement(AssetType.Creature)">Add Creature</button></li>
          <li><button class="dropdown-item" @onclick="() => StartAssetPlacement(AssetType.Character)">Add Character</button></li>
          <li><button class="dropdown-item" @onclick="() => StartAssetPlacement(AssetType.NPC)">Add NPC</button></li>
          <li><button class="dropdown-item" @onclick="() => StartAssetPlacement(AssetType.Object)">Add Object</button></li>
        </ul>
      </div>
    </div>
    <div class="toolbar-group">
      <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="structuresMenuButton" data-bs-toggle="dropdown" aria-expanded="false" disabled>
          Structures
        </button>
        <ul class="dropdown-menu" aria-labelledby="structuresMenuButton">
          <li><button class="dropdown-item" disabled>Draw Wall</button></li>
          <li><button class="dropdown-item" disabled>Draw Door</button></li>
          <li><button class="dropdown-item" disabled>Draw Window</button></li>
        </ul>
      </div>
    </div>
    <div class="toolbar-group ml-auto">
      <button class="btn btn-primary" @onclick="SaveScene">Save</button>
      <button class="btn btn-secondary" @onclick="NavigateBack">Back</button>
    </div>
  </div>
@if (!State.IsReady) {
  <div id="loading-message" class="d-flex justify-content-center">
    <div class="spinner-border" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
}
else {
  <div class="scene-canvas-container" @ref="_canvasContainerRef">
    <canvas @ref="_canvasRef"
              @onmousedown="OnCanvasMouseDown"
              @onmousemove="OnCanvasMouseMove"
              @onmouseup="OnCanvasMouseUp"
              @oncontextmenu:preventDefault
              @oncontextmenu="OnCanvasContextMenu">
      </canvas>
  </div>
}
</div>

@if (State.ShowChangeImageModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Change Background Image</h5>
                    <button type="button" class="btn-close" @onclick="CloseModals"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="imageUpload" class="form-label">Upload Image</label>
                        <InputFile id="imageUpload" OnChange="OnImageFileSelected" class="form-control" />
                    </div>
                    <div class="current-image mb-3">
                        <p>Current image:</p>
                        <img src="@State.BackgroundUrl" style="max-width: 100%; max-height: 200px;" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveBackgroundImage">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (State.ShowGridSettingsModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Grid Settings</h5>
                    <button type="button" class="btn-close" @onclick="CloseModals"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="gridType" class="form-label">Grid Type</label>
                        <select id="gridType" class="form-select" @bind="Grid.Type">
                            <option value="@GridType.NoGrid">No Grid</option>
                            <option value="@GridType.Square">Square</option>
                            <option value="@GridType.HexH">Hex (Horizontal)</option>
                            <option value="@GridType.HexV">Hex (Vertical)</option>
                            <option value="@GridType.Isometric">Isometric</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="cellWidth" class="form-label">Cell Width</label>
                        <input type="number" id="cellWidth" class="form-control" @bind="Grid.CellWidth" min="1" />
                    </div>
                    <div class="mb-3">
                        <label for="cellHeight" class="form-label">Cell Height</label>
                        <input type="number" id="cellHeight" class="form-control" @bind="Grid.CellHeight" min="1" />
                    </div>
                    <div class="mb-3">
                        <label for="offsetX" class="form-label">Offset X</label>
                        <input type="number" id="offsetX" class="form-control" @bind="Grid.OffsetLeft" />
                    </div>
                    <div class="mb-3">
                        <label for="offsetY" class="form-label">Offset Y</label>
                        <input type="number" id="offsetY" class="form-control" @bind="Grid.OffsetTop" />
                    </div>
                    <div class="form-check mb-3">
                        <input type="checkbox" id="snapToGrid" class="form-check-input" @bind="State.SnapToGrid" />
                        <label for="snapToGrid" class="form-check-label">Snap to Grid</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveGridSettings">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (State.ShowAssetSelectorModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Asset</h5>
                    <button type="button" class="btn-close" @onclick="CloseModals"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="assetName" class="form-label">Name</label>
                        <input type="text" id="assetName" class="form-control" @bind="SelectedAsset.Name" />
                    </div>
                    <div class="mb-3">
                        <label for="assetUpload" class="form-label">Upload Image</label>
                        <InputFile id="assetUpload" OnChange="OnAssetFileSelected" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddAssetToScene">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (State.ShowAssetContextMenu)
{
    <div class="asset-context-menu" style="position: absolute; left: @(State.ContextMenuPosition.X)px; top: @(State.ContextMenuPosition.Y)px; z-index: 1000; background-color: white; border: 1px solid #ccc; border-radius: 4px; padding: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">
        <ul style="list-style: none; padding: 0; margin: 0;">
            <li><button class="btn btn-sm btn-link w-100 text-start" @onclick="ToggleLockSelectedAsset">@(State.SelectedAsset?.IsLocked == true ? "Unlock" : "Lock")</button></li>
            <li><button class="btn btn-sm btn-link w-100 text-start" @onclick="DeleteSelectedAsset">Delete</button></li>
            <li><button class="btn btn-sm btn-link w-100 text-start" @onclick="CloseContextMenu">Cancel</button></li>
        </ul>
    </div>
}
