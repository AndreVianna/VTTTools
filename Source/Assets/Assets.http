###############################################
### Asset API Testing - With Authentication
###############################################
###
### Prerequisites:
### 1. AppHost running: cd Source/AppHost && dotnet run
### 2. Update @authUrl and @baseUrl with actual ports from logs
###
### Test Flow:
### 1. Register test user
### 2. Login (captures auth cookie automatically)
### 3. Run authenticated tests
### 4. Run unauthorized tests (without login)
###
###############################################

### Variables (UPDATE WITH ACTUAL PORTS!)
@authUrl = https://localhost:7050
@baseUrl = https://localhost:7171

###############################################
### SETUP - AUTHENTICATION
###############################################

### 0a. Register Test User
POST {{authUrl}}/api/auth/register
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "Test123!",
  "confirmPassword": "Test123!",
  "name": "Test User"
}

### 0b. Login (Cookie auto-captured for subsequent requests)
# @name login
POST {{authUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "Test123!"
}

### 0c. Verify Authenticated
GET {{authUrl}}/api/auth/me

### After Login - Get User ID from response above
### Use csharprepl to run the command below:
###  Base64UrlTextEncoder.Encode(new Guid("put-user-id-here").ToByteArray())
@encodedUserId = 8sCZAY0Pn3KUcaTkxZ7t1w

###############################################
### HEALTH CHECKS
###############################################

### Health Check
GET {{baseUrl}}/health

### Alive Check
GET {{baseUrl}}/alive

###############################################
### HAPPY PATH - OBJECT ASSETS
###############################################

### 1. Create ObjectAsset - Wooden Table
# @name table
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Object",
  "name": "Wooden Table",
  "description": "A sturdy oak dining table",
  "objectProps": {
    "cellWidth": 2,
    "cellHeight": 1,
    "isMovable": true,
    "isOpaque": false,
    "isVisible": true
  }
}

### 2. Create ObjectAsset - Pressure Plate Trap (Hidden)
# @name trap
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Object",
  "name": "Pressure Plate Trap",
  "description": "Hidden trap triggering poison darts",
  "objectProps": {
    "cellWidth": 1,
    "cellHeight": 1,
    "isMovable": false,
    "isOpaque": false,
    "isVisible": false
  }
}

### 3. Create ObjectAsset - Large Boulder (Opaque)
# @name boulder
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Object",
  "name": "Large Boulder",
  "description": "Massive rock blocking path",
  "objectProps": {
    "cellWidth": 2,
    "cellHeight": 2,
    "isMovable": false,
    "isOpaque": true,
    "isVisible": true
  }
}

###############################################
### HAPPY PATH - CREATURE ASSETS (CHARACTERS)
###############################################

### 4. Create CreatureAsset - Elven Ranger
# @name ranger
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Creature",
  "name": "Elven Ranger",
  "description": "Agile archer from Silverwood",
  "creatureProps": {
    "cellSize": 1,
    "category": "Character",
    "tokenStyle": {
      "borderColor": "#4CAF50",
      "backgroundColor": "#E8F5E9",
      "shape": "Circle"
    }
  }
}

### 5. Create CreatureAsset - Dwarven Cleric
# @name cleric
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Creature",
  "name": "Dwarven Cleric",
  "description": "Holy warrior of the mountain",
  "creatureProps": {
    "cellSize": 1,
    "category": "Character",
    "tokenStyle": {
      "borderColor": "#2196F3",
      "backgroundColor": "#E3F2FD",
      "shape": "Square"
    }
  }
}

###############################################
### HAPPY PATH - CREATURE ASSETS (MONSTERS)
###############################################

### 6. Create CreatureAsset - Goblin Warrior
# @name goblin
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Creature",
  "name": "Goblin Warrior",
  "description": "Small hostile creature",
  "creatureProps": {
    "cellSize": 1,
    "category": "Monster",
    "tokenStyle": {
      "borderColor": "#F44336",
      "backgroundColor": "#FFEBEE",
      "shape": "Circle"
    }
  }
}

### 7. Create CreatureAsset - Orc Brute
# @name orc
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Creature",
  "name": "Orc Brute",
  "description": "Muscular humanoid with battle axe",
  "creatureProps": {
    "cellSize": 1,
    "category": "Monster",
    "tokenStyle": {
      "borderColor": "#8B4513",
      "backgroundColor": "#FFE4C4",
      "shape": "Circle"
    }
  }
}

### 8. Create CreatureAsset - Adult Red Dragon (4x4)
# @name dragon
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Creature",
  "name": "Adult Red Dragon",
  "description": "Massive ancient fire-breathing wyrm",
  "creatureProps": {
    "cellSize": 4,
    "category": "Monster",
    "tokenStyle": {
      "borderColor": "#D32F2F",
      "backgroundColor": "#FFCDD2",
      "shape": "Square"
    }
  }
}

###############################################
### HAPPY PATH - READ OPERATIONS
###############################################

### 9. List All Assets
GET {{baseUrl}}/api/assets
x-user: {{encodedUserId}}

### 10. Get ObjectAsset by ID
GET {{baseUrl}}/api/assets/{{table.response.body.$.id}}
x-user: {{encodedUserId}}

### 11. Get CreatureAsset by ID
GET {{baseUrl}}/api/assets/{{ranger.response.body.$.id}}
x-user: {{encodedUserId}}

###############################################
### HAPPY PATH - UPDATE OPERATIONS
###############################################

### 12. Update ObjectAsset Properties
PATCH {{baseUrl}}/api/assets/{{table.response.body.$.id}}
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "name": "Grand Oak Table",
  "description": "Massive banquet table",
  "objectProps": {
    "cellWidth": 3,
    "cellHeight": 2,
    "isMovable": false,
    "isOpaque": false,
    "isVisible": true
  }
}

### 13. Update CreatureAsset Token Style
PATCH {{baseUrl}}/api/assets/{{ranger.response.body.$.id}}
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "creatureProps": {
    "cellSize": 1,
    "category": "Character",
    "tokenStyle": {
      "borderColor": "#FF9800",
      "backgroundColor": "#FFF3E0",
      "shape": "Square"
    }
  }
}

### 14. Publish Asset
PATCH {{baseUrl}}/api/assets/{{goblin.response.body.$.id}}
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "isPublic": true,
  "isPublished": true
}

###############################################
### HAPPY PATH - DELETE OPERATIONS
###############################################

### 15. Delete ObjectAsset
DELETE {{baseUrl}}/api/assets/{{trap.response.body.$.id}}
x-user: {{encodedUserId}}

### 16. Delete CreatureAsset
DELETE {{baseUrl}}/api/assets/{{dragon.response.body.$.id}}
x-user: {{encodedUserId}}

###############################################
### ERROR PATH - VALIDATION ERRORS (400 Bad Request)
###############################################

### 17. Duplicate Name (409 Conflict)
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Object",
  "name": "Wooden Table",
  "description": "Duplicate of test 1",
  "objectProps": {
    "cellWidth": 1,
    "cellHeight": 1,
    "isMovable": true,
    "isOpaque": false,
    "isVisible": true
  }
}

### 18. Missing Kind
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "name": "Invalid",
  "description": "Missing kind"
}

### 19. Invalid Kind Value
POST {{baseUrl}}/api/assets
Content-Type: application/json

{
  "kind": "InvalidKind",
  "name": "Test",
  "description": "Invalid kind value"
}

### 20. Object Without ObjectProps
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Object",
  "name": "Incomplete",
  "description": "Missing objectProps"
}

### 21. Creature Without CreatureProps
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Creature",
  "name": "Incomplete",
  "description": "Missing creatureProps"
}

### 22. Negative Cell Dimensions
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Object",
  "name": "Invalid Dimensions",
  "description": "Negative dimensions",
  "objectProps": {
    "cellWidth": -1,
    "cellHeight": 1,
    "isMovable": true,
    "isOpaque": false,
    "isVisible": true
  }
}

### 23. Zero CellSize
POST {{baseUrl}}/api/assets
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "kind": "Creature",
  "name": "Invalid Size",
  "description": "Zero cellSize",
  "creatureProps": {
    "cellSize": 0,
    "category": "Monster"
  }
}

###############################################
### ERROR PATH - NOT FOUND (404)
###############################################

### 24. Get Non-Existent Asset
GET {{baseUrl}}/api/assets/00000000-0000-0000-0000-000000000000
x-user: {{encodedUserId}}

### 25. Update Non-Existent Asset
PATCH {{baseUrl}}/api/assets/00000000-0000-0000-0000-000000000000
x-user: {{encodedUserId}}
Content-Type: application/json

{
  "name": "Should Return 404"
}

### 26. Delete Non-Existent Asset
DELETE {{baseUrl}}/api/assets/00000000-0000-0000-0000-000000000000
x-user: {{encodedUserId}}

###############################################
### ERROR PATH - UNAUTHORIZED (401)
###############################################

### 27. Create Asset Without Auth (Logout first or use new session)
# Note: Run this in a new session or after logout
POST {{baseUrl}}/api/assets
Content-Type: application/json

{
  "kind": "Object",
  "name": "Unauthorized Test",
  "description": "Should return 401",
  "objectProps": {
    "cellWidth": 1,
    "cellHeight": 1,
    "isMovable": true,
    "isOpaque": false,
    "isVisible": true
  }
}
