<root name="Source"> 
  <file name="VttTools.sln"><![CDATA[ 
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35507.96
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AppHost", "AppHost\AppHost.csproj", "{7D1B0033-23BD-4D51-8592-72865E6A9F9E}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "GameService", "GameService\GameService.csproj", "{01642C21-84CC-F3EF-733C-FF8350AD60B7}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Tests", "Tests\Tests.csproj", "{DF0C686D-4155-6A1E-D0AF-3DB225575364}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Domain", "Domain\Domain.csproj", "{E33DDFA9-8C22-426B-8A05-A0986D46AFB5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WebApp", "WebApp\WebApp.csproj", "{20A68E9F-44DB-A099-1209-57579F37E4F6}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "IdentityService", "IdentityService\IdentityService.csproj", "{6CDAB7B3-DE4F-6FF5-06F0-D824F083F1AF}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "HttpServices", "HttpServices\HttpServices.csproj", "{C9153A34-3D92-4843-9BAE-BA21E07F5A8E}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "HttpServices.Abstractions", "HttpServices.Abstractions\HttpServices.Abstractions.csproj", "{377E9100-72A8-4017-B0EF-B57D651E6C50}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{7D1B0033-23BD-4D51-8592-72865E6A9F9E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7D1B0033-23BD-4D51-8592-72865E6A9F9E}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7D1B0033-23BD-4D51-8592-72865E6A9F9E}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7D1B0033-23BD-4D51-8592-72865E6A9F9E}.Release|Any CPU.Build.0 = Release|Any CPU
		{01642C21-84CC-F3EF-733C-FF8350AD60B7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{01642C21-84CC-F3EF-733C-FF8350AD60B7}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{01642C21-84CC-F3EF-733C-FF8350AD60B7}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{01642C21-84CC-F3EF-733C-FF8350AD60B7}.Release|Any CPU.Build.0 = Release|Any CPU
		{DF0C686D-4155-6A1E-D0AF-3DB225575364}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{DF0C686D-4155-6A1E-D0AF-3DB225575364}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{DF0C686D-4155-6A1E-D0AF-3DB225575364}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{DF0C686D-4155-6A1E-D0AF-3DB225575364}.Release|Any CPU.Build.0 = Release|Any CPU
		{E33DDFA9-8C22-426B-8A05-A0986D46AFB5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{E33DDFA9-8C22-426B-8A05-A0986D46AFB5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{E33DDFA9-8C22-426B-8A05-A0986D46AFB5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{E33DDFA9-8C22-426B-8A05-A0986D46AFB5}.Release|Any CPU.Build.0 = Release|Any CPU
		{20A68E9F-44DB-A099-1209-57579F37E4F6}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{20A68E9F-44DB-A099-1209-57579F37E4F6}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{20A68E9F-44DB-A099-1209-57579F37E4F6}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{20A68E9F-44DB-A099-1209-57579F37E4F6}.Release|Any CPU.Build.0 = Release|Any CPU
		{6CDAB7B3-DE4F-6FF5-06F0-D824F083F1AF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6CDAB7B3-DE4F-6FF5-06F0-D824F083F1AF}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6CDAB7B3-DE4F-6FF5-06F0-D824F083F1AF}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6CDAB7B3-DE4F-6FF5-06F0-D824F083F1AF}.Release|Any CPU.Build.0 = Release|Any CPU
		{C9153A34-3D92-4843-9BAE-BA21E07F5A8E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{C9153A34-3D92-4843-9BAE-BA21E07F5A8E}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{C9153A34-3D92-4843-9BAE-BA21E07F5A8E}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{C9153A34-3D92-4843-9BAE-BA21E07F5A8E}.Release|Any CPU.Build.0 = Release|Any CPU
		{377E9100-72A8-4017-B0EF-B57D651E6C50}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{377E9100-72A8-4017-B0EF-B57D651E6C50}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{377E9100-72A8-4017-B0EF-B57D651E6C50}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{377E9100-72A8-4017-B0EF-B57D651E6C50}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {9B88D607-F250-4AC7-B31F-269A299D43A5}
	EndGlobalSection
EndGlobal
  ]]></file> 
  <folder name=""> 
  </folder> 
  <folder name="AppHost"> 
    <file name="AppHost.csproj"><![CDATA[ 
<Project Sdk="Microsoft.NET.Sdk">

  <Sdk Name="Aspire.AppHost.Sdk" Version="9.0.0" />

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <IsAspireHost>true</IsAspireHost>
    <UserSecretsId>73bce350-3cea-4c38-b8c1-3368ba420543</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\GameService\GameService.csproj" />
    <ProjectReference Include="..\IdentityService\IdentityService.csproj" />
    <ProjectReference Include="..\WebApp\WebApp.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Aspire.Hosting.AppHost" Version="9.1.0" />
    <PackageReference Include="Aspire.Hosting.Redis" Version="9.1.0" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="appsettings.Development.json"><![CDATA[ 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
    ]]></file> 
    <file name="appsettings.json"><![CDATA[ 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Aspire.Hosting.Dcp": "Warning"
    }
  }
}
    ]]></file> 
    <file name="Program.cs"><![CDATA[ 
var builder = DistributedApplication.CreateBuilder(args);

var cache = builder.AddRedis("redis")
                   .WithRedisInsight()
                   .WithLifetime(ContainerLifetime.Persistent);

var authService = builder.AddProject<Projects.IdentityService>("auth")
    .WithReference(cache)
    .WaitFor(cache)
    .WithExternalHttpEndpoints()
    .WithHttpHealthCheck("health");

var gameService = builder.AddProject<Projects.GameService>("game")
    .WithReference(cache)
    .WaitFor(cache)
    .WithExternalHttpEndpoints()
    .WithHttpHealthCheck("health");

builder.AddProject<Projects.WebApp>("webapp")
    .WithReference(cache)
    .WaitFor(cache)
    .WithReference(authService)
    .WaitFor(authService)
    .WithReference(gameService)
    .WaitFor(gameService)
    .WithExternalHttpEndpoints();

builder.Build().Run();
    ]]></file> 
    <folder name="Properties"> 
      <file name="launchSettings.json"><![CDATA[ 
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:17276;http://localhost:15244",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "DOTNET_ENVIRONMENT": "Development",
        "DOTNET_DASHBOARD_OTLP_ENDPOINT_URL": "https://localhost:21172",
        "DOTNET_RESOURCE_SERVICE_ENDPOINT_URL": "https://localhost:22219"
      }
    },
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:15244",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "DOTNET_ENVIRONMENT": "Development",
        "DOTNET_DASHBOARD_OTLP_ENDPOINT_URL": "http://localhost:19292",
        "DOTNET_RESOURCE_SERVICE_ENDPOINT_URL": "http://localhost:20269"
      }
    }
  }
}
      ]]></file> 
    </folder> 
  </folder> 
  <folder name="Domain"> 
    <file name="Domain.csproj"><![CDATA[ 
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DotNetToolbox.Core" Version="9.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.2" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\HttpServices.Abstractions\HttpServices.Abstractions.csproj" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="GlobalUsings.cs"><![CDATA[ 
﻿global using System.Text.RegularExpressions;

global using Domain.Model;
global using Domain.Helpers;

global using DotNetToolbox;
global using DotNetToolbox.Results;
global using DotNetToolbox.Validation;

global using HttpServices.Abstractions.Model;

global using Microsoft.AspNetCore.Identity;
    ]]></file> 
    <folder name="Contracts"> 
      <folder name="Account"> 
        <file name="FindUserResponse.cs"><![CDATA[ 
﻿namespace Domain.Contracts.Account;

public sealed record FindUserResponse {
    public required string Id { get; init; }
    public required string Name { get; init; }
    public required string Email { get; init; }
    public string? PhoneNumber { get; init; }
    public bool AccountConfirmed { get; init; }
    public bool TwoFactorEnabled { get; init; }
    public TwoFactorType TwoFactorType { get; init; }
    public DateTimeOffset? LockoutEnd { get; init; }
    public int AccessFailedCount { get; init; }
}
        ]]></file> 
        <file name="RegisterUserRequest.cs"><![CDATA[ 
﻿namespace Domain.Contracts.Account;

public sealed record RegisterUserRequest : IValidatable {
    public required string Name { get; set; }
    public required string Email { get; init; }
    public required string Password { get; set; }
    public required string ConfirmationUrl { get; set; }
    public string? ReturnUrl { get; set; }

    public Result Validate(IMap? context = null) {
        var result = Result.Success();
        if (string.IsNullOrWhiteSpace(Name))
            result += new Error("Name is required.", nameof(Name));
        if (string.IsNullOrWhiteSpace(Email)) {
            result += new Error("Email is required.", nameof(Email));
        }
        else {
            if (!Email.IsValidEmail())
                result += new Error("Email is invalid.", nameof(Email));
        }
        if (string.IsNullOrWhiteSpace(Password)) {
            result += new Error("Password is required.", nameof(Password));
        }
        if (string.IsNullOrWhiteSpace(ConfirmationUrl))
            result += new Error("Confirmation URL is required.", nameof(ConfirmationUrl));
        return result;
    }
}        ]]></file> 
        <file name="RegisterUserResponse.cs"><![CDATA[ 
﻿namespace Domain.Contracts.Account;

public sealed record RegisterUserResponse {
    public required string UserId { get; init; }

    public bool RequiresConfirmation { get; set; }
}        ]]></file> 
      </folder> 
      <folder name="Chat"> 
        <file name="IChatService.cs"><![CDATA[ 
﻿namespace Domain.Contracts.Chat;

public interface IChatService {
    Task<ChatMessage> SendMessageAsync(Guid sessionId, Guid senderId, string content, CancellationToken ct = default);
    Task<IEnumerable<ChatMessage>> GetSessionHistoryAsync(Guid sessionId, int limit = 50, CancellationToken ct = default);
    Task<DiceRoll> RollDiceAsync(string expression, CancellationToken ct = default);
}
        ]]></file> 
      </folder> 
      <folder name="GameSession"> 
        <file name="IGameSessionService.cs"><![CDATA[ 
﻿namespace Domain.Contracts.GameSession;

public interface IGameSessionService {
    Task<Model.GameSession> CreateSessionAsync(string name, Guid creatorUserId, CancellationToken ct = default);
    Task<Model.GameSession?> GetSessionAsync(Guid sessionId, CancellationToken ct = default);
    Task SetActiveMapAsync(Guid sessionId, Guid mapId, CancellationToken ct = default);
    Task StartSessionAsync(Guid sessionId, Guid userId, CancellationToken ct = default);
    Task JoinSessionAsync(Guid sessionId, Guid userId, PlayerRole role = PlayerRole.Player, CancellationToken ct = default);
    Task LeaveSessionAsync(Guid sessionId, Guid userId, CancellationToken ct = default);
}
        ]]></file> 
      </folder> 
      <folder name="GameToken"> 
        <file name="ITokenService.cs"><![CDATA[ 
﻿namespace Domain.Contracts.GameToken;

public interface ITokenService {
    Task<Model.GameToken> CreateTokenAsync(Guid sessionId, Guid mapId, string name, Stream imageStream, Position position, Size size, CancellationToken ct = default);
    Task<Model.GameToken> UpdateTokenPositionAsync(Guid sessionId, Guid mapId, Guid tokenId, Position newPosition, CancellationToken ct = default);
    Task DeleteTokenAsync(Guid sessionId, Guid mapId, Guid tokenId, CancellationToken ct = default);
}
        ]]></file> 
      </folder> 
      <folder name="Media"> 
        <file name="IStorageService.cs"><![CDATA[ 
﻿namespace Domain.Contracts.Media;

public interface IStorageService {
    Task<string> UploadImageAsync(Stream imageStream, string fileName, CancellationToken ct = default);
    Task DeleteImageAsync(string imageUrl, CancellationToken ct = default);
}
        ]]></file> 
      </folder> 
    </folder> 
    <folder name="Helpers"> 
      <file name="StringHelpers.cs"><![CDATA[ 
﻿namespace Domain.Helpers;

internal static partial class StringHelpers {
    private static readonly Regex _emailFormat = GenerateEmailFormatValidator();

    public static bool IsValidEmail(this string email, bool allowEmpty = true)
        => (allowEmpty || !string.IsNullOrWhiteSpace(email))
        && _emailFormat.IsMatch(email);

    [GeneratedRegex(@"^(?:[A-Za-z0-9_]+(?:(?:\.|\-)[A-Za-z0-9_]+)*)(?:\+[A-Za-z0-9_]+(?:(?:\.|\-)[A-Za-z0-9_]+)*)?\@(?:[A-Za-z0-9]+(?:(?:\.|\-)[A-Za-z0-9]+)*\.[A-Za-z]{2,})$", RegexOptions.IgnoreCase | RegexOptions.Compiled, "en-CA")]
    private static partial Regex GenerateEmailFormatValidator();
}      ]]></file> 
    </folder> 
    <folder name="Model"> 
      <file name="ChatMessage.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record ChatMessage {
    public required Guid Id { get; init; }
    public required Guid SessionId { get; init; }
    public required Guid SentBy { get; init; }
    public Guid? SentTo { get; init; } // in case of a "whisper"
    public required DateTimeOffset SentAt { get; init; }
    public string Message { get; init; } = string.Empty;
}
      ]]></file> 
      <file name="DiceRoll.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record DiceRoll {
    public required string Expression { get; init; } // e.g., "2d6+5"
    public required int[] Results { get; init; }
    public required int Total { get; init; }
}
      ]]></file> 
      <file name="GameSession.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record GameSession {
    public required Guid Id { get; init; }
    public required string Name { get; init; }
    public required Guid OwnerId { get; init; }
    public HashSet<Player> Players { get; init; } = [];
    public List<Map> Maps { get; init; } = [];
    public Guid? ActiveMapId { get; init; }
    public Map? ActiveMap => Maps.Find(m => m.Id == ActiveMapId);
}
      ]]></file> 
      <file name="GameToken.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record GameToken {
    public required Guid Id { get; set; }
    public required Guid MapId { get; set; }
    public required string Name { get; set; }
    public string? ImageUrl { get; set; }
    public Position Position { get; set; } // grid position
    public Size Size { get; set; } // grid position
    public bool IsLocked { get; init; }
    public Guid? ControlledBy { get; init; }
}
      ]]></file> 
      <file name="Map.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record Map {
    public required Guid Id { get; init; }
    public required string Name { get; init; }
    public required string PlayerImageUrl { get; init; }
    public string? GameMasterImageUrl { get; init; }
    public required uint Width {
        get;
        init => field = value < 1
            ? throw new ArgumentOutOfRangeException(nameof(Width), value, "The map width in cells must not be zero.")
            : value;
    } = 1; // in grid cells
    public required uint Height {
        get;
        init => field = value < 1
            ? throw new ArgumentOutOfRangeException(nameof(Height), value, "The map height in cells must not be zero.")
            : value;
    } = 1; // in grid cells
    public decimal HorizontalOffset { get; init; } // in pixels
    public decimal VerticalOffset { get; init; } // in pixels
    public decimal CellWidth {
        get;
        init => field = value <= 0
            ? throw new ArgumentOutOfRangeException(nameof(CellWidth), value, "The map cell width must be greater than zero.")
            : value;
    } = 50; // in pixels
    public decimal CellHeight {
        get;
        init => field = value <= 0
            ? throw new ArgumentOutOfRangeException(nameof(CellHeight), value, "The map cell height must be greater than zero.")
            : value;
    } = 50; // in pixels
    public List<GameToken> Tokens { get; init; } = [];
}
      ]]></file> 
      <file name="Player.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record Player {
    public Guid UserId { get; init; }
    public required PlayerRole Role { get; init; }
}
      ]]></file> 
      <file name="PlayerRole.cs"><![CDATA[ 
﻿namespace Domain.Model;

public enum PlayerRole {
    GameMaster,
    Player,
}
      ]]></file> 
      <file name="Position.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record struct Position(int X, int Y);
      ]]></file> 
      <file name="Size.cs"><![CDATA[ 
﻿namespace Domain.Model;

public record struct Size(int Width, int Height);
      ]]></file> 
      <file name="UserProfile.cs"><![CDATA[ 
﻿namespace Domain.Model;

public class UserProfile
    : NamedUserProfile {
    [ProtectedPersonalData]
    public string? PreferredName { get; set; }
}
      ]]></file> 
    </folder> 
    <folder name="Storage"> 
      <file name="IGameSessionStorage.cs"><![CDATA[ 
﻿namespace Domain.Storage;

public interface IGameSessionStorage {
    Task<GameSession> GetByIdAsync(Guid id, CancellationToken ct = default);
    Task AddAsync(GameSession session, CancellationToken ct = default);
    Task UpdateAsync(GameSession session, CancellationToken ct = default);
}      ]]></file> 
    </folder> 
    <folder name="Views"> 
      <file name="DashboardView.cs"><![CDATA[ 
﻿namespace Domain.Views;
public record DashboardView;
      ]]></file> 
    </folder> 
  </folder> 
  <folder name="GameService"> 
    <file name="appsettings.Development.json"><![CDATA[ 
{
  "Jwt": {
    "Issuer": "https://localhost:7465"
  },
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=(localdb)\\ProjectModels;Database=VttTools-Api-Dev;Integrated Security=True;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.AspNetCore": "Information"
    }
  }
}
    ]]></file> 
    <file name="appsettings.json"><![CDATA[ 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
    ]]></file> 
    <file name="GameService.csproj"><![CDATA[ 
﻿<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>535d121d-8cdb-407a-9769-7481dcf7b4fb</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DotNetToolbox.Core" Version="9.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.2" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.21.2" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Http.Resilience" Version="9.2.0" />
    <PackageReference Include="Microsoft.Extensions.ServiceDiscovery" Version="9.1.0" />
    <PackageReference Include="NSwag.AspNetCore" Version="14.2.0" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.11.1" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.11.1" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.11.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.11.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime" Version="1.11.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Domain\Domain.csproj" />
    <ProjectReference Include="..\HttpServices\HttpServices.csproj" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="GlobalUsings.cs"><![CDATA[ 
﻿global using Domain.Model;
global using Domain.Storage;

global using GameService.Data;
global using GameService.Services;

global using HttpServices.Data;

global using Microsoft.AspNetCore.Authorization;
global using Microsoft.EntityFrameworkCore;
global using Microsoft.Extensions.Diagnostics.HealthChecks;

global using OpenTelemetry;
global using OpenTelemetry.Metrics;
global using OpenTelemetry.Trace;

global using static DotNetToolbox.Ensure;
    ]]></file> 
    <file name="HostApplicationBuilderExtensions.cs"><![CDATA[ 
// ReSharper disable once CheckNamespace
namespace Microsoft.Extensions.Hosting;

public static class HostApplicationBuilderExtensions {
    public static TBuilder AddServiceDefaults<TBuilder>(this TBuilder builder)
        where TBuilder : IHostApplicationBuilder {
        builder.ConfigureOpenTelemetry();

        builder.AddDefaultHealthChecks();

        builder.Services.AddServiceDiscovery();

        builder.Services.ConfigureHttpClientDefaults(http => {
            // Turn on resilience by default
            http.AddStandardResilienceHandler();

            // Turn on service discovery by default
            http.AddServiceDiscovery();
        });

        // Uncomment the following to restrict the allowed schemes for service discovery.
        // builder.Services.Configure<ServiceDiscoveryOptions>(options =>
        // {
        //     options.AllowedSchemes = ["https"];
        // });

        return builder;
    }

    private static TBuilder ConfigureOpenTelemetry<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder {
        builder.Logging.AddOpenTelemetry(logging => {
            logging.IncludeFormattedMessage = true;
            logging.IncludeScopes = true;
        });

        builder.Services.AddOpenTelemetry()
            .WithMetrics(metrics => metrics.AddAspNetCoreInstrumentation()
                    .AddHttpClientInstrumentation()
                    .AddRuntimeInstrumentation())
            .WithTracing(tracing => tracing.AddSource(builder.Environment.ApplicationName)
                    .AddAspNetCoreInstrumentation()
                    .AddHttpClientInstrumentation());

        builder.AddOpenTelemetryExporters();

        return builder;
    }

    private static TBuilder AddOpenTelemetryExporters<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder {
        var useOtlpExporter = !string.IsNullOrWhiteSpace(builder.Configuration["OTEL_EXPORTER_OTLP_ENDPOINT"]);

        if (useOtlpExporter)
            builder.Services.AddOpenTelemetry().UseOtlpExporter();

        return builder;
    }

    private static TBuilder AddDefaultHealthChecks<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder {
        builder.Services.AddHealthChecks()
            .AddCheck("self", () => HealthCheckResult.Healthy(), ["live"]);

        return builder;
    }
}
    ]]></file> 
    <file name="Program.cs"><![CDATA[ 
var builder = WebApi.CreateBuilder<GameServiceDbContext>(args, (options, configuration) => {
    var connectionString = IsNotNull(configuration.GetConnectionString("DefaultConnection"));
    options.UseSqlServer(connectionString);
});

var app = builder.Build();

app.MapHealthCheckEndpoints();
app.MapApiClientManagementEndpoints();

app.MapGameSessionManagementEndpoints();

app.Run();
    ]]></file> 
    <file name="WebApplicationExtensions.cs"><![CDATA[ 
﻿// ReSharper disable once CheckNamespace

using Microsoft.AspNetCore.Mvc;

namespace Microsoft.AspNetCore.Builder;

internal static class WebApplicationExtensions {
    public static void MapGameSessionManagementEndpoints(this WebApplication app) {
        app.MapPost("/sessions", [Authorize] async (string name, Guid userId, [FromServices] GameSessionService sessionService) => {
            var session = await sessionService.CreateSessionAsync(name, userId);
            return Results.Created($"/sessions/{session.Id}", session);
        });

        app.MapGet("/sessions/{id:guid}", [Authorize] async (Guid id, [FromServices] GameSessionService sessionService) => {
            var session = await sessionService.GetSessionAsync(id);
            return session != null
                       ? Results.Ok(session)
                       : Results.NotFound();
        });
    }
}
    ]]></file> 
    <folder name="Data"> 
      <file name="GameServiceDbContext.cs"><![CDATA[ 
namespace GameService.Data;

public class GameServiceDbContext(DbContextOptions<GameServiceDbContext> options)
    : ApiDbContext(options) {
}
      ]]></file> 
    </folder> 
    <folder name="Properties"> 
      <file name="launchSettings.json"><![CDATA[ 
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:5432",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "https://localhost:7465;http://localhost:5432",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
      ]]></file> 
    </folder> 
    <folder name="Services"> 
      <file name="GameSessionService.cs"><![CDATA[ 
﻿namespace GameService.Services;

public class GameSessionService(IGameSessionStorage data) {
    public async Task<GameSession> CreateSessionAsync(string name, Guid creatorUserId, CancellationToken ct = default) {
        var session = new GameSession {
            Id = Guid.NewGuid(),
            Name = name,
            OwnerId = creatorUserId
        };

        await data.AddAsync(session, ct);
        return session;
    }

    public async Task<GameSession?> GetSessionAsync(Guid sessionId, CancellationToken ct = default)
        => await data.GetByIdAsync(sessionId, ct);

    public async Task JoinSessionAsync(Guid sessionId, Guid userId, PlayerRole role = PlayerRole.Player, CancellationToken ct = default) {
        var session = await data.GetByIdAsync(sessionId, ct)
            ?? throw new("Session not found.");
        session.Players.Add(new() { UserId = userId, Role = role });
        await data.UpdateAsync(session, ct);
    }

    public async Task LeaveSessionAsync(Guid sessionId, Guid userId, CancellationToken ct = default) {
        var session = await data.GetByIdAsync(sessionId, ct)
            ?? throw new("Session not found.");
        session.Players.RemoveWhere(p => p.UserId == userId);
        await data.UpdateAsync(session, ct);
    }

    public async Task SetActiveMapAsync(Guid sessionId, Guid mapId, CancellationToken ct = default) {
        var session = await data.GetByIdAsync(sessionId, ct)
            ?? throw new("Session not found.");
        if (!session.Maps.Any(m => m.Id == mapId))
            throw new("Map not found in this session.");

        session = session with { ActiveMapId = mapId };
        await data.UpdateAsync(session, ct);
    }

    public Task StartSessionAsync(Guid sessionId, Guid userId, CancellationToken ct = default) => throw new NotImplementedException();
}
      ]]></file> 
    </folder> 
  </folder> 
  <folder name="HttpServices"> 
    <file name="GlobalUsings.cs"><![CDATA[ 
global using System.Collections.Specialized;
global using System.Diagnostics.CodeAnalysis;
global using System.IdentityModel.Tokens.Jwt;
global using System.Net;
global using System.Net.Http.Headers;
global using System.Security.Claims;
global using System.Security.Cryptography;
global using System.Text;

global using DotNetToolbox;
global using DotNetToolbox.Results;

global using HttpServices.Abstractions.Contracts.Account;
global using HttpServices.Abstractions.Contracts.Client;
global using HttpServices.Abstractions.Contracts.SignIn;
global using HttpServices.Abstractions.Helpers;
global using HttpServices.Abstractions.Model;
global using HttpServices.Data;
global using HttpServices.Model;
global using HttpServices.Services.Account;
global using HttpServices.Services.Client;
global using HttpServices.Services.Messaging;

global using Microsoft.AspNetCore.Abstractions;
global using Microsoft.AspNetCore.Authentication;
global using Microsoft.AspNetCore.Authentication.JwtBearer;
global using Microsoft.AspNetCore.Identity;
global using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
global using Microsoft.AspNetCore.Mvc;
global using Microsoft.AspNetCore.WebUtilities;
global using Microsoft.EntityFrameworkCore;
global using Microsoft.EntityFrameworkCore.ChangeTracking;
global using Microsoft.EntityFrameworkCore.Infrastructure;
global using Microsoft.EntityFrameworkCore.Metadata;
global using Microsoft.EntityFrameworkCore.Metadata.Builders;
global using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
global using Microsoft.EntityFrameworkCore.ValueGeneration;
global using Microsoft.Extensions.Caching.Distributed;
global using Microsoft.Extensions.Diagnostics.HealthChecks;
global using Microsoft.Extensions.Diagnostics.Metrics;
global using Microsoft.Extensions.Options;
global using Microsoft.IdentityModel.Tokens;

global using OpenTelemetry;
global using OpenTelemetry.Metrics;
global using OpenTelemetry.Trace;
    ]]></file> 
    <file name="HostApplicationBuilderExtensions.cs"><![CDATA[ 
// ReSharper disable once CheckNamespace
namespace Microsoft.Extensions.Hosting;

public static class HostApplicationBuilderExtensions {
    public static void AddServiceDefaults<TBuilder>(this TBuilder builder)
        where TBuilder : IHostApplicationBuilder {
        builder.ConfigureOpenTelemetry();

        builder.AddDefaultHealthChecks();

        builder.Services.AddServiceDiscovery();

        builder.Services.ConfigureHttpClientDefaults(http => {
            http.AddStandardResilienceHandler();
            http.AddServiceDiscovery();
        });
    }

    private static void ConfigureOpenTelemetry<TBuilder>(this TBuilder builder)
        where TBuilder : IHostApplicationBuilder {
        builder.Logging.AddOpenTelemetry(logging => {
            logging.IncludeFormattedMessage = true;
            logging.IncludeScopes = true;
        });

        builder.Services.AddOpenTelemetry()
            .WithMetrics(metrics => metrics.AddAspNetCoreInstrumentation()
                    .AddHttpClientInstrumentation()
                    .AddRuntimeInstrumentation())
            .WithTracing(tracing => tracing.AddSource(builder.Environment.ApplicationName)
                    .AddAspNetCoreInstrumentation()
                    .AddHttpClientInstrumentation());

        builder.AddOpenTelemetryExporters();
    }

    private static void AddOpenTelemetryExporters<TBuilder>(this TBuilder builder)
        where TBuilder : IHostApplicationBuilder {
        // ReSharper disable StringLiteralTypo
        var useExporter = !string.IsNullOrWhiteSpace(builder.Configuration["OTEL_EXPORTER_OTLP_ENDPOINT"]);
        // ReSharper enable StringLiteralTypo

        if (useExporter)
            builder.Services.AddOpenTelemetry().UseOtlpExporter();
    }

    private static void AddDefaultHealthChecks<TBuilder>(this TBuilder builder)
        where TBuilder : IHostApplicationBuilder
        => builder.Services
                  .AddHealthChecks()
                  .AddCheck("self", () => HealthCheckResult.Healthy(), ["live"]);
}
    ]]></file> 
    <file name="HttpServices.csproj"><![CDATA[ 
﻿<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <OutputType>Library</OutputType>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Aspire.StackExchange.Redis.DistributedCaching" Version="9.1.0" />
    <PackageReference Include="DotNetToolbox.Core" Version="9.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.2" />
    <PackageReference Include="Microsoft.Extensions.Caching.StackExchangeRedis" Version="9.0.2" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.21.2" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Http.Resilience" Version="9.2.0" />
    <PackageReference Include="Microsoft.Extensions.ServiceDiscovery" Version="9.1.0" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.11.1" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.11.1" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.11.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.11.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime" Version="1.11.0" />
  </ItemGroup>


  <ItemGroup>
    <ProjectReference Include="..\HttpServices.Abstractions\HttpServices.Abstractions.csproj" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="IdentityProviderWebApi.cs"><![CDATA[ 
using AuthenticationService = HttpServices.Services.Authentication.AuthenticationService;
using IAuthenticationService = HttpServices.Services.Authentication.IAuthenticationService;

// ReSharper disable once CheckNamespace
namespace Microsoft.Extensions.Hosting;

public static class IdentityProviderWebApi {
    public static WebApiBuilder CreateBuilder(string[] args, Action<DbContextOptionsBuilder, IConfiguration>? configure = null)
        => CreateBuilder<IdentityProviderApiDbContext, User, NamedUserProfile>(args, configure);

    public static WebApiBuilder CreateBuilder<TDatabase, TUser, TProfile>(string[] args, Action<DbContextOptionsBuilder, IConfiguration>? configure = null)
        where TDatabase : DbContext
        where TUser : class, IIdentityUser<TProfile>, new()
        where TProfile : class, IUserProfile, new()
        => CreateBuilder<TDatabase, TUser, TProfile, Role>(args, configure);

    public static WebApiBuilder CreateBuilder<TDatabase, TUser, TProfile, TRole>(string[] args, Action<DbContextOptionsBuilder, IConfiguration>? configure = null)
        where TDatabase : DbContext
        where TUser : class, IIdentityUser<TProfile>, new()
        where TProfile : class, IUserProfile, new()
        where TRole : class {
        var builder = WebApi.CreateBuilder<TDatabase>(args, configure);

        builder.Services.Configure<AuthenticationServiceOptions>(builder.Configuration.GetSection("Identity"));
        builder.Services.AddScoped<IAuthenticationService, AuthenticationService>();
        builder.Services.AddScoped<IAccountService, AccountService>();
        builder.Services.AddScoped<IMessagingService<TUser>, MessagingService<TUser, TProfile>>();
        builder.Services.AddScoped<IEmailSender<TUser>, NullEmailSender<TUser>>();

        builder.Services.AddSingleton<IPersonalDataProtector, NullPersonalDataProtector>();
        builder.Services.AddDataProtection();
        builder.Services.AddIdentity<TUser, TRole>(options => {
            options.SignIn.RequireConfirmedAccount = true;
            options.Stores.SchemaVersion = IdentitySchemaVersions.Version2;
            options.Stores.MaxLengthForKeys = 48;
            options.Stores.ProtectPersonalData = false;
            options.SignIn.RequireConfirmedAccount = true;
            options.SignIn.RequireConfirmedEmail = true;
            options.User.RequireUniqueEmail = true;
            options.Password.RequiredLength = 8;
            options.Password.RequiredUniqueChars = 4;
        }).AddEntityFrameworkStores<TDatabase>()
        .AddSignInManager()
        .AddDefaultTokenProviders();

        return builder;
    }
}
    ]]></file> 
    <file name="WebApi.cs"><![CDATA[ 
// ReSharper disable once CheckNamespace
namespace Microsoft.Extensions.Hosting;

public static class WebApi {
    public static WebApiBuilder CreateBuilder<TDatabase>(string[] args, Action<DbContextOptionsBuilder, IConfiguration>? configure = null)
        where TDatabase : DbContext {
        var builder = WebApplication.CreateBuilder(args);

        builder.AddServiceDefaults();
        builder.AddRedisDistributedCache("redis");
        builder.Services.AddProblemDetails();
        builder.Services.AddOpenApi();

        builder.Services.AddScoped<IClientService, ClientService<TDatabase>>();

        var jwtSettings = builder.Configuration.GetSection("Jwt").Get<JwtSettings>()
                       ?? throw new InvalidOperationException("Jwt settings are missing from the configuration.");
        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Key));
        builder.Services.AddAuthentication(options => {
            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        }).AddJwtBearer(options => options.TokenValidationParameters = new() {
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidateIssuer = true,
            ValidIssuer = jwtSettings.Issuer,
            ValidateAudience = true,
            ValidAudience = jwtSettings.Audience,
            IssuerSigningKey = securityKey,
        });

        builder.Services.AddDbContext<TDatabase>(options => configure?.Invoke(options, builder.Configuration));
        return new(builder);
    }
}    ]]></file> 
    <file name="WebApiBuilder.cs"><![CDATA[ 
// ReSharper disable once CheckNamespace
namespace Microsoft.AspNetCore.Abstractions;

public class WebApiBuilder(WebApplicationBuilder builder)
    : IHostApplicationBuilder {
    public IServiceCollection Services => builder.Services;

    IConfigurationManager IHostApplicationBuilder.Configuration => Configuration;
    public ConfigurationManager Configuration => builder.Configuration;
    IHostEnvironment IHostApplicationBuilder.Environment => Environment;
    public IHostEnvironment Environment => builder.Environment;

    public ILoggingBuilder Logging => builder.Logging;

    public IMetricsBuilder Metrics => builder.Metrics;

    void IHostApplicationBuilder.ConfigureContainer<TContainerBuilder>(IServiceProviderFactory<TContainerBuilder> factory, Action<TContainerBuilder>? configure)
        => ((IHostApplicationBuilder)builder).ConfigureContainer(factory, configure);
    IDictionary<object, object> IHostApplicationBuilder.Properties => ((IHostApplicationBuilder)builder).Properties;

    public WebApplication Build() {
        var app = builder.Build();
        if (!app.Environment.IsDevelopment())
            app.UseExceptionHandler();
        app.UseAuthentication();
        if (app.Environment.IsDevelopment())
            app.MapOpenApi();
        app.UseHttpsRedirection();

        return app;
    }
}    ]]></file> 
    <file name="WebApiBuilderExtensions.cs"><![CDATA[ 
namespace Microsoft.Extensions.Hosting;

public static class WebApiBuilderExtensions {
    public static WebApiBuilder AddAuthenticationManagement(this WebApiBuilder builder) => builder;
}
    ]]></file> 
    <file name="WebApiOptions.cs"><![CDATA[ 
namespace Microsoft.Extensions.Hosting;

public class WebApiOptions {
    public WebApiType Type { get; init; }
    public string[]? Args { get; init; }
    public string? EnvironmentName { get; init; }
    public string? ApplicationName { get; init; }

    public bool UsesClientSecret { get; init; }
    public bool UsesApiKey { get; init; }
    public bool UsesJwt { get; init; }
    public bool UsesAuthentication => UsesClientSecret || UsesApiKey || UsesJwt;
    public bool CanGrantAccess { get; init; }

    public TokenValidationParameters? JwtOptions { get; init; }
}
    ]]></file> 
    <file name="WebApiType.cs"><![CDATA[ 
namespace Microsoft.Extensions.Hosting;

public enum WebApiType {
    Empty,
    Slim,
    Default,
}
    ]]></file> 
    <folder name="Data"> 
      <file name="ApiDbContext.cs"><![CDATA[ 
namespace HttpServices.Data;

public class ApiDbContext(DbContextOptions options)
    : ApiDbContext<string, ApiClient, ApiToken>(options)
    , IApiDbContext;

public class ApiDbContext<TKey>(DbContextOptions options)
    : ApiDbContext<TKey, ApiClient<TKey>, ApiToken<TKey>>(options)
    , IApiDbContext<TKey>
    where TKey : IEquatable<TKey>;

public class ApiDbContext<TClient, TToken>(DbContextOptions options)
    : ApiDbContext<string, TClient, TToken>(options)
    , IApiDbContext<TClient, TToken>
    where TClient : ApiClient
    where TToken : ApiToken;

public class ApiDbContext<TKey, TClient, TToken>(DbContextOptions options)
    : DbContext(options)
    , IApiDbContext<TKey, TClient, TToken>
    where TKey : IEquatable<TKey>
    where TClient : ApiClient<TKey>
    where TToken : ApiToken<TKey> {
    public DbSet<TClient> Clients { get; set; } = null!;
    public DbSet<TToken> Tokens { get; set; } = null!;

    protected override void OnModelCreating(ModelBuilder modelBuilder) {
        base.OnModelCreating(modelBuilder);
        ApiDbContextBuilder.ConfigureModel<TKey, TClient, TToken>(this, modelBuilder);
    }
}      ]]></file> 
      <file name="ApiDbContextBuilder.cs"><![CDATA[ 
namespace HttpServices.Data;

internal static class ApiDbContextBuilder {
    public static void ConfigureModel<TKey, TClient, TToken>(DbContext context, ModelBuilder modelBuilder)
        where TKey : IEquatable<TKey>
        where TClient : ApiClient<TKey>
        where TToken : ApiToken<TKey> {
        var converter = new PersonalDataConverter(context.GetService<IPersonalDataProtector>());

        modelBuilder.Entity<TClient>(b => {
            b.ToTable("Clients");
            b.HasKey(i => i.Id);

            b.Property(i => i.Id).ValueGeneratedOnAdd().SetDefaultValueGeneration();
            b.Property(e => e.Name).HasMaxLength(256).IsRequired();

            b.HasMany<TToken>().WithOne().HasForeignKey(e => e.ApiClientId).IsRequired(false).OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<TToken>(b => {
            b.ToTable("Tokens");
            b.HasKey(i => i.Id);

            b.Property(i => i.Id).ValueGeneratedOnAdd().SetDefaultValueGeneration();

            b.ConvertPersonalDataProperties(converter);
        });
    }
}      ]]></file> 
      <file name="DateTimeOffsetValueGenerator.cs"><![CDATA[ 
namespace HttpServices.Data;

public class DateTimeOffsetValueGenerator : ValueGenerator<DateTimeOffset> {
    public override DateTimeOffset Next(EntityEntry entry) => DateTimeOffset.UtcNow;
    public override bool GeneratesTemporaryValues
        => false;
}      ]]></file> 
      <file name="DateTimeValueGenerator.cs"><![CDATA[ 
namespace HttpServices.Data;

public class DateTimeValueGenerator : ValueGenerator<DateTime> {
    public override DateTime Next(EntityEntry entry) => DateTime.UtcNow;
    public override bool GeneratesTemporaryValues
        => false;
}
      ]]></file> 
      <file name="EntityTypeBuilderExtensions.cs"><![CDATA[ 
namespace HttpServices.Data;

public static class EntityTypeBuilderExtensions {
    public static void ConvertPersonalDataProperties<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, PersonalDataConverter? converter)
        where TEntity : class {
        if (converter is null) return;
        var personalDataProps = typeof(TEntity).GetProperties()
                                               .Where(prop => Attribute.IsDefined(prop, typeof(ProtectedPersonalDataAttribute)));
        foreach (var p in personalDataProps) {
            if (p.PropertyType != typeof(string))
                throw new InvalidOperationException($"Entity '{typeof(TEntity).Name}': Can only protect strings.");
            entityTypeBuilder.Property<string>(p.Name).HasConversion(converter);
        }
    }
}
      ]]></file> 
      <file name="IApiDbContext.cs"><![CDATA[ 
namespace HttpServices.Data;

public interface IApiDbContext
    : IApiDbContext<string, ApiClient, ApiToken>;

public interface IApiDbContext<TKey>
    : IApiDbContext<TKey, ApiClient<TKey>, ApiToken<TKey>>
    where TKey : IEquatable<TKey>;

public interface IApiDbContext<TClient, TToken>
    : IApiDbContext<string, TClient, TToken>
    where TClient : ApiClient
    where TToken : ApiToken;

public interface IApiDbContext<TKey, TClient, TToken>
    where TKey : IEquatable<TKey>
    where TClient : ApiClient<TKey>
    where TToken : ApiToken<TKey> {
    DbSet<TClient> Clients { get; set; }
    DbSet<TToken> Tokens { get; set; }
}      ]]></file> 
      <file name="IdentityProviderApiDbContext.cs"><![CDATA[ 
namespace HttpServices.Data;

public class IdentityProviderApiDbContext(DbContextOptions options)
    : IdentityProviderApiDbContext<User, NamedUserProfile>(options);

public class IdentityProviderApiDbContext<TUser, TProfile>(DbContextOptions options)
    : IdentityProviderApiDbContext<ApiClient, ApiToken, TUser, TProfile, Role>(options)
    where TUser : User<TProfile>, new()
    where TProfile : class, IUserProfile, new();

public class IdentityProviderApiDbContext<TClient, TToken, TUser, TProfile, TRole>(DbContextOptions options)
    : IdentityProviderApiDbContext<TClient, TToken, TUser, TProfile, UserClaim, UserLogin, UserToken, TRole, UserRole, RoleClaim>(options)
    where TClient : ApiClient
    where TToken : ApiToken
    where TUser : User<TProfile>, new()
    where TProfile : class, IUserProfile, new()
    where TRole : Role;

public class IdentityProviderApiDbContext<TClient, TToken, TUser, TProfile, TUserClaim, TUserLogin, TUserToken, TRole, TUserRole, TRoleClaim>(DbContextOptions options)
    : IdentityProviderApiDbContext<string, TClient, TToken, TUser, TProfile, TUserClaim, TUserLogin, TUserToken, TRole, TUserRole, TRoleClaim>(options)
    , IApiDbContext<TClient, TToken>
    where TClient : ApiClient
    where TToken : ApiToken
    where TUser : User<TProfile>, new()
    where TProfile : class, IUserProfile, new()
    where TUserClaim : UserClaim
    where TUserLogin : UserLogin
    where TUserToken : UserToken
    where TRole : Role
    where TUserRole : UserRole
    where TRoleClaim : RoleClaim;

public class IdentityProviderApiDbContext<TUser, TKey, TProfile>(DbContextOptions options)
    : IdentityProviderApiDbContext<TKey, ApiClient<TKey>, ApiToken<TKey>, TUser, TProfile, Role<TKey>>(options)
    , IApiDbContext<TKey>
    where TUser : User<TKey, TProfile>, new()
    where TKey : IEquatable<TKey>
    where TProfile : class, IUserProfile, new();

public class IdentityProviderApiDbContext<TKey, TClient, TToken, TUser, TProfile, TRole>(DbContextOptions options)
    : IdentityProviderApiDbContext<TKey, TClient, TToken, TUser, TProfile, UserClaim<TKey>, UserLogin<TKey>, UserToken<TKey>, TRole, UserRole<TKey>, RoleClaim<TKey>>(options)
    where TKey : IEquatable<TKey>
    where TClient : ApiClient<TKey>
    where TToken : ApiToken<TKey>
    where TUser : User<TKey, TProfile>, new()
    where TProfile : class, IUserProfile, new()
    where TRole : Role<TKey>;

public class IdentityProviderApiDbContext<TKey, TClient, TToken, TUser, TProfile, TUserClaim, TUserLogin, TUserToken, TRole, TUserRole, TRoleClaim>(DbContextOptions options)
    : IdentityDbContext<TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TRoleClaim, TUserToken>(options), IIdentityApiDbContext<TKey, TClient, TToken>
    , IApiDbContext<TKey, TClient, TToken>
    where TKey : IEquatable<TKey>
    where TClient : ApiClient<TKey>
    where TToken : ApiToken<TKey>
    where TUser : User<TKey, TProfile>, new()
    where TProfile : class, IUserProfile, new()
    where TUserClaim : UserClaim<TKey>
    where TUserLogin : UserLogin<TKey>
    where TUserToken : UserToken<TKey>
    where TRole : Role<TKey>
    where TUserRole : UserRole<TKey>
    where TRoleClaim : RoleClaim<TKey> {
    public DbSet<TClient> Clients { get; set; } = null!;
    public DbSet<TToken> Tokens { get; set; } = null!;

    protected override void OnModelCreating(ModelBuilder builder) {
        base.OnModelCreating(builder);
        IdentityProviderApiDbContextBuilder.ConfigureModel<TKey, TClient, TToken, TUser, TProfile, TUserClaim, TUserLogin, TUserToken, TRole, TUserRole, TRoleClaim>(this, builder);
    }
}      ]]></file> 
      <file name="IdentityProviderApiDbContextBuilder.cs"><![CDATA[ 
namespace HttpServices.Data;

internal static class IdentityProviderApiDbContextBuilder {
    public static void ConfigureModel<TKey, TClient, TToken, TUser, TProfile, TUserClaim, TUserLogin, TUserToken, TRole, TUserRole, TRoleClaim>(DbContext context, ModelBuilder modelBuilder)
        where TKey : IEquatable<TKey>
        where TClient : ApiClient<TKey>
        where TToken : ApiToken<TKey>
        where TUser : User<TKey, TProfile>
        where TProfile : class, IUserProfile, new()
        where TUserClaim : UserClaim<TKey>
        where TUserLogin : UserLogin<TKey>
        where TUserToken : UserToken<TKey>
        where TRole : Role<TKey>
        where TUserRole : UserRole<TKey>
        where TRoleClaim : RoleClaim<TKey> {
        ApiDbContextBuilder.ConfigureModel<TKey, TClient, TToken>(context, modelBuilder);

        var storeOptions = context.GetService<IDbContextOptions>()
                                  .Extensions.OfType<CoreOptionsExtension>()
                                  .FirstOrDefault()?.ApplicationServiceProvider
                                 ?.GetService<IOptions<IdentityOptions>>()
                                 ?.Value.Stores;
        var maxKeyLength = storeOptions?.MaxLengthForKeys ?? 0;
        if (maxKeyLength == 0)
            maxKeyLength = 128;
        var encryptPersonalData = storeOptions?.ProtectPersonalData ?? false;
        var converter = encryptPersonalData
                            ? new PersonalDataConverter(context.GetService<IPersonalDataProtector>())
                            : null;

        modelBuilder.Entity<TClient>(b => {
            b.ToTable("Clients");
            b.HasKey(e => e.Id);

            b.Property(e => e.Id).ValueGeneratedOnAdd().SetDefaultValueGeneration();
            b.Property(e => e.Name).HasMaxLength(256).IsRequired();

            b.HasMany<TToken>().WithOne().HasForeignKey(e => e.ApiClientId).IsRequired(false).OnDelete(DeleteBehavior.Cascade);
            b.HasMany<TRole>().WithOne().HasForeignKey(e => e.ApiClientId).IsRequired(false).OnDelete(DeleteBehavior.SetNull);
            b.HasMany<TUser>().WithOne().HasForeignKey(e => e.ApiClientId).IsRequired(false).OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<TToken>(b => {
            b.ToTable("Tokens");
            b.HasKey(i => i.Id);

            b.Property(i => i.Id).ValueGeneratedOnAdd().SetDefaultValueGeneration();

            b.ConvertPersonalDataProperties(converter);
        });

        modelBuilder.Entity<TUser>(b => {
            b.ToTable("Users");
            b.OwnsOne(u => u.Profile);

            b.Property(i => i.Id).ValueGeneratedOnAdd().SetDefaultValueGeneration();
            b.Property(e => e.UserName).HasMaxLength(256).IsRequired();
            b.Property(e => e.NormalizedUserName).HasMaxLength(256).IsRequired();
            b.Property(e => e.Email).HasMaxLength(256).IsRequired();
            b.Property(e => e.NormalizedEmail).HasMaxLength(256).IsRequired();
            b.Property(e => e.PhoneNumber).HasMaxLength(32);
            b.Property(e => e.SecurityStamp).HasMaxLength(256);
            b.Property(e => e.ConcurrencyStamp).HasMaxLength(48).IsConcurrencyToken();
            b.Property(e => e.TwoFactorType).HasConversion<string>().IsRequired().HasDefaultValue(TwoFactorType.None);
            b.Property(e => e.IdentifierType).HasConversion<string>().IsRequired().HasDefaultValue(IdentifierType.Email);

            b.HasMany<TUserClaim>().WithOne().HasForeignKey(e => e.UserId).IsRequired();
            b.HasMany<TUserLogin>().WithOne().HasForeignKey(e => e.UserId).IsRequired();
            b.HasMany<TUserToken>().WithOne().HasForeignKey(e => e.UserId).IsRequired();
            b.HasMany<TUserRole>().WithOne().HasForeignKey(e => e.UserId).IsRequired();

            b.HasIndex(e => e.NormalizedEmail).HasDatabaseName("EmailIndex").IsUnique();
            b.HasIndex(e => e.NormalizedUserName).HasDatabaseName("UserNameIndex").IsUnique();

            b.ConvertPersonalDataProperties(converter);
        });

        modelBuilder.Entity<TUserClaim>(b => {
            b.ToTable("UserClaims");
            b.HasKey(e => e.Id);
            b.Property(e => e.ClaimType).HasMaxLength(64);
            b.Property(e => e.ClaimValue).HasMaxLength(256);
        });

        modelBuilder.Entity<TUserLogin>(b => {
            b.ToTable("UserLogins");
            b.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            b.Property(e => e.LoginProvider).HasMaxLength(64);
            b.Property(e => e.ProviderKey).HasMaxLength(maxKeyLength);
            b.Property(e => e.ProviderDisplayName).HasMaxLength(64);
        });

        modelBuilder.Entity<TUserToken>(b => {
            b.ToTable("UserTokens");
            b.HasKey(t => new { t.UserId, t.LoginProvider, t.Name });
            b.Property(e => e.LoginProvider).HasMaxLength(64);
            b.Property(e => e.Name).HasMaxLength(64);

            b.ConvertPersonalDataProperties(converter);
        });

        modelBuilder.Entity<TRole>(b => {
            b.ToTable("Roles");
            b.HasKey(e => e.Id);

            b.Property(i => i.Id).ValueGeneratedOnAdd().SetDefaultValueGeneration();
            b.Property(e => e.Name).HasMaxLength(64).IsRequired();
            b.Property(e => e.NormalizedName).HasMaxLength(64).IsRequired();
            b.Property(e => e.ConcurrencyStamp).IsConcurrencyToken().HasMaxLength(36);

            b.HasMany<TRoleClaim>().WithOne().HasForeignKey(e => e.RoleId).IsRequired();
            b.HasMany<TUserRole>().WithOne().HasForeignKey(e => e.RoleId).IsRequired();

            b.HasIndex(r => r.NormalizedName).HasDatabaseName("RoleNameIndex").IsUnique();
        });

        modelBuilder.Entity<TRoleClaim>(b => {
            b.ToTable("RoleClaims");
            b.HasKey(rc => rc.Id);
            b.Property(e => e.ClaimType).HasMaxLength(64);
            b.Property(e => e.ClaimValue).HasMaxLength(256);
        });

        modelBuilder.Entity<TUserRole>(b => {
            b.ToTable("UserRoles");
            b.HasKey(r => new { r.UserId, r.RoleId });
        });
    }
}
      ]]></file> 
      <file name="IIdentityApiDbContext.cs"><![CDATA[ 
namespace HttpServices.Data;

public interface IIdentityApiDbContext<TKey, TClient, TToken>
    where TKey : IEquatable<TKey>
    where TClient : ApiClient<TKey>
    where TToken : ApiToken<TKey> {
    DbSet<TClient> Clients { get; set; }
    DbSet<TToken> Tokens { get; set; }
}
      ]]></file> 
      <file name="NullPersonalDataProtector.cs"><![CDATA[ 
namespace HttpServices.Data;

public sealed class NullPersonalDataProtector
    : IPersonalDataProtector {
    [return: NotNullIfNotNull(nameof(data))]
    public string? Protect(string? data) => data;

    [return: NotNullIfNotNull(nameof(data))]
    public string? Unprotect(string? data) => data;
}
      ]]></file> 
      <file name="PersonalDataConverter.cs"><![CDATA[ 
namespace HttpServices.Data;

public sealed class PersonalDataConverter(IPersonalDataProtector protector)
    : ValueConverter<string, string>(s => protector.Protect(s), s => protector.Unprotect(s));      ]]></file> 
      <file name="PropertyBuilderExtensions.cs"><![CDATA[ 
namespace HttpServices.Data;

public static class PropertyBuilderExtensions {
    public static void SetDefaultValueGeneration(this PropertyBuilder modelBuilder) {
        var isAutoGenerated = (modelBuilder.Metadata.ValueGenerated & ValueGenerated.OnAdd) != 0;
        if (!isAutoGenerated)
            return;
        var propertyType = modelBuilder.Metadata.PropertyInfo!.PropertyType;
        switch (propertyType.FullName) {
            case { } s when s == typeof(string).FullName:
                modelBuilder.HasMaxLength(24);
                modelBuilder.HasValueGenerator<Version7GuidBase64StringValueGenerator>();
                break;
            case { } s when s == typeof(Guid).FullName:
                modelBuilder.HasValueGenerator<Version7GuidValueGenerator>();
                break;
            case { } s when s == typeof(DateTimeOffset).FullName:
                modelBuilder.HasValueGenerator<DateTimeOffsetValueGenerator>();
                break;
            case { } s when s == typeof(DateTime).FullName:
                modelBuilder.HasValueGenerator<DateTimeValueGenerator>();
                break;
        }
    }
}
      ]]></file> 
      <file name="Version7GuidBase64StringValueGenerator.cs"><![CDATA[ 
namespace HttpServices.Data;

public class Version7GuidBase64StringValueGenerator : ValueGenerator<string> {
    public override string Next(EntityEntry entry) => Base64UrlEncoder.Encode(Guid.CreateVersion7().ToByteArray());
    public override bool GeneratesTemporaryValues
        => false;
}      ]]></file> 
      <file name="Version7GuidValueGenerator.cs"><![CDATA[ 
namespace HttpServices.Data;

public class Version7GuidValueGenerator : ValueGenerator<Guid> {
    public override Guid Next(EntityEntry entry) => Guid.CreateVersion7();
    public override bool GeneratesTemporaryValues
        => false;
}      ]]></file> 
    </folder> 
    <folder name="Endpoints"> 
      <file name="ApiClientEndpoints.cs"><![CDATA[ 
using static HttpServices.Abstractions.ApiClientEndpoints;

using IResult = Microsoft.AspNetCore.Http.IResult;

// ReSharper disable once CheckNamespace
namespace Microsoft.AspNetCore.Routing;

public static class ApiClientEndpoints {
    public static IEndpointRouteBuilder MapApiClientManagementEndpoints(this IEndpointRouteBuilder app) {
        app.MapPost(TokensEndpoint, GenerateAsync);
        app.MapPost(ClientsEndpoint, RegisterAsync);
        return app;
    }

    private static async Task<IResult> GenerateAsync([FromServices] IClientService service, [FromBody] GenerateTokenRequest request) {
        var result = await service.GenerateTokenAsync(request);
        return result.HasErrors
                   ? Results.BadRequest(result.Errors)
                   : result.Value is null
                       ? Results.Unauthorized()
                       : Results.Ok(result.Value);
    }

    private static async Task<IResult> RegisterAsync([FromServices] IClientService service, [FromBody] RegisterClientRequest request) {
        var result = await service.RegisterAsync(request);
        return Results.Ok(result);
    }
}
      ]]></file> 
      <file name="AuthenticationEndpoints.cs"><![CDATA[ 
﻿using static HttpServices.Abstractions.AuthenticationEndpoints;
using static HttpServices.Services.Authentication.SignInStatus;

using IAuthenticationService = HttpServices.Services.Authentication.IAuthenticationService;
using IResult = Microsoft.AspNetCore.Http.IResult;

// ReSharper disable once CheckNamespace
namespace Microsoft.AspNetCore.Routing;

public static class AuthenticationEndpoints {
    public static IEndpointRouteBuilder MapAuthenticationManagementEndpoints(this IEndpointRouteBuilder app) {
        app.MapPost(SignInEndpoint, SignInWithPassword);
        app.MapPost(SignOutEndpoint, SignOut);
        app.MapGet(SchemesEndpoint, GetSchemes);
        return app;
    }

    private static async Task<IResult> SignInWithPassword([FromServices] IAuthenticationService service, [FromBody] PasswordSignInRequest request) {
        var result = await service.PasswordSignIn(request);
        return result.Status switch {
            EmailNotConfirmed => Results.Ok(new SignInResponse { Token = result.Value, RequiresConfirmation = true }),
            RequiresTwoFactor => Results.Ok(new SignInResponse { Token = result.Value, RequiresTwoFactor = true }),
            Success => Results.Ok(new SignInResponse { Token = result.Value, }),
            InvalidInput => Results.BadRequest(result.Errors),
            _ => Results.Unauthorized(),
        };
    }

    private static async Task<IResult> SignOut([FromServices] IAuthenticationService service, [FromBody] SignOutRequest request) {
        await service.SignOut(request);
        return Results.Ok();
    }

    private static async Task<IResult> GetSchemes([FromServices] IAuthenticationService service) {
        var schemes = await service.GetSchemes();
        return Results.Ok(schemes);
    }
}
      ]]></file> 
      <file name="HealthCheckEndpoints.cs"><![CDATA[ 
﻿using static HttpServices.Abstractions.HealthCheckEndpoints;

// ReSharper disable once CheckNamespace
namespace Microsoft.AspNetCore.Routing;

public static class HealthCheckEndpoints {
    public static IEndpointRouteBuilder MapHealthCheckEndpoints(this IEndpointRouteBuilder app) {
        app.MapHealthChecks(HealthEndpoint);
        app.MapHealthChecks(IsAliveEndpoint, new() { Predicate = r => r.Tags.Contains("live") });
        return app;
    }
}
      ]]></file> 
      <file name="UserAccountEndpoints.cs"><![CDATA[ 
﻿using static HttpServices.Abstractions.UserAccountEndpoints;

using IResult = Microsoft.AspNetCore.Http.IResult;

// ReSharper disable once CheckNamespace
namespace Microsoft.AspNetCore.Routing;

public static class UserAccountEndpoints {
    public static IEndpointRouteBuilder MapUserAccountManagementEndpoints(this IEndpointRouteBuilder app) {
        app.MapGet(FindUserByIdEndpoint, FindByIdAsync);
        app.MapPost(UsersEndpoint, RegisterAsync);
        return app;
    }

    private static async Task<IResult> FindByIdAsync([FromServices] IAccountService service, string id) {
        var response = await service.FindAsync(id, null);
        return response is not null ? Results.Ok(response)
                   : Results.NotFound();
    }

    private static async Task<IResult> RegisterAsync([FromServices] IAccountService service, [FromBody] RegisterUserRequest request) {
        var response = await service.CreateAsync(request);
        return response.IsSuccessful ? Results.Ok(response.Value)
                   : Results.BadRequest(response.Errors);
    }
}
      ]]></file> 
    </folder> 
    <folder name="Model"> 
      <file name="AuthenticationServiceOptions.cs"><![CDATA[ 
﻿namespace HttpServices.Model;

public class AuthenticationServiceOptions {
    public IdentifierType IdentifierType { get; set; } = IdentifierType.Email;
    public ClaimsOptions ClaimsIdentity { get; set; } = new();
    public MasterOptions? Master { get; set; }
    public PasswordOptions Password { get; set; } = new();
    public LockoutOptions Lockout { get; set; } = new();
    public SignInOptions SignIn { get; set; } = new();
    public TokenOptions Tokens { get; set; } = new();
    public StoreOptions Stores { get; set; } = new();
}
      ]]></file> 
      <file name="ClaimsOptions.cs"><![CDATA[ 
﻿namespace HttpServices.Model;

public class ClaimsOptions {
    public string IdClaimType { get; set; } = AuthenticationClaimTypes.Id;
    public string IdentifierClaimType { get; set; } = AuthenticationClaimTypes.Identifier;
    public string EmailClaimType { get; set; } = AuthenticationClaimTypes.Email;
    public string UserNameClaimType { get; set; } = AuthenticationClaimTypes.UserName;
    public string PhoneNumberClaimType { get; set; } = AuthenticationClaimTypes.PhoneNumber;
    public string RolesClaimType { get; set; } = AuthenticationClaimTypes.Roles;
    public string RoleClaimType { get; set; } = AuthenticationClaimTypes.Role;
    public string ProfileClaimType { get; set; } = AuthenticationClaimTypes.Profile;
    public string SecurityStampClaimType { get; set; } = AuthenticationClaimTypes.SecurityStamp;
}
      ]]></file> 
      <file name="MasterOptions.cs"><![CDATA[ 
﻿namespace HttpServices.Model;

public record MasterOptions {
    [SetsRequiredMembers]
    public MasterOptions() {
        Identifier ??= Email; // Default to email
    }
    public string Id { get; init; } = Guid.Empty.ToString();
    public required string Identifier { get; init; }
    public string? Email { get; init; } = "master@host.com";
    public string? Name { get; init; } = "Master";
    public string? HashedSecret { get; init; }
}      ]]></file> 
      <file name="MasterUserProfile.cs"><![CDATA[ 
﻿namespace HttpServices.Model;

public class MasterUserProfile
    : NamedUserProfile {
    public override required string Name { get; set; } = "Master";
}
      ]]></file> 
      <file name="MasterUserProfileOptions.cs"><![CDATA[ 
﻿namespace HttpServices.Model;

public record MasterUserProfileOptions
    : IUserProfile {
    public string Name { get; set; } = "Master";
}
      ]]></file> 
    </folder> 
    <folder name="Properties"> 
      <file name="launchSettings.json"><![CDATA[ 
{
  "profiles": {
    "HttpServices": {
      "commandName": "Project",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "applicationUrl": "https://localhost:52994;http://localhost:52995"
    }
  }
}      ]]></file> 
    </folder> 
    <folder name="Services"> 
      <folder name="Account"> 
        <file name="AccountService.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Account;

internal sealed class AccountService(UserManager<User> userManager,
                                     IOptions<AuthenticationServiceOptions> identityOptions,
                                     IMessagingService<User> messagingService,
                                     ILogger<AccountService> logger)
    : AccountService<User, NamedUserProfile>(userManager, identityOptions, messagingService, logger)
    , IAccountService;

internal class AccountService<TUser, TProfile>(UserManager<TUser> userManager,
                                     IOptions<AuthenticationServiceOptions> identityOptions,
                                     IMessagingService<TUser> messagingService,
                                     ILogger<AccountService<TUser, TProfile>> logger)
    : AccountService<TUser, string, TProfile>(userManager, identityOptions, messagingService, logger)
    where TUser : class, IIdentityUser<string, TProfile>, new()
    where TProfile : class, IUserProfile, new();

internal class AccountService<TUser, TKey, TProfile>(UserManager<TUser> userManager,
                                                     IOptions<AuthenticationServiceOptions> identityOptions,
                                                     IMessagingService<TUser> messagingService,
                                                     ILogger<AccountService<TUser, TKey, TProfile>> logger)
    : IAccountService<TKey>
    where TUser : class, IIdentityUser<TKey, TProfile>, new()
    where TKey : IEquatable<TKey>
    where TProfile : class, IUserProfile, new() {
    private readonly AuthenticationServiceOptions _options = identityOptions.Value;

    public async Task<FindUserResponse?> FindAsync(string? id, string? email) {
        var user = id is not null ? await userManager.FindByIdAsync(id)
                 : email is not null ? await userManager.FindByEmailAsync(email)
                 : null;
        return string.IsNullOrWhiteSpace(user?.Email) ? null
             : new() {
                 Id = user.Id.ToString()!,
                 Identifier = user.IdentifierType switch {
                    IdentifierType.Email => user.Email!,
                    IdentifierType.UserName => user.UserName!,
                    _ => user.Id.ToString()!,
                 },
                 Email = user.Email,
                 UserName = user.UserName,
                 Name = user.Profile?.Name ?? user.UserName ?? user.Email!,
             };
    }

    public async Task<Result<RegisterUserResponse>> CreateAsync(RegisterUserRequest request) {
        var result = request.Validate();
        if (result.HasErrors)
            return result;

        if (request.Email.Equals(_options.Master?.Identifier, StringComparison.OrdinalIgnoreCase))
            return new[] { new Error("Email", "A user with this email already exists.") };

        if (await userManager.FindByEmailAsync(request.Email) != null)
            return new[] { new Error("Email", "A user with this email already exists.") };

        var user = Activator.CreateInstance<TUser>();
        user.Email = request.Email;
        user.Profile = Activator.CreateInstance<TProfile>();
        user.Profile.Name = request.Name ?? string.Empty;
        await userManager.SetUserNameAsync(user, request.Email);
        await userManager.SetEmailAsync(user, request.Email);
        var identityResult = await userManager.CreateAsync(user, request.Password);

        if (!identityResult.Succeeded)
            return identityResult.Errors.ToArray(e => new Error(e.Description, GetSource(e.Code)));

        logger.LogInformation("New user account created.");

        var response = new RegisterUserResponse {
            Id = await userManager.GetUserIdAsync(user),
            RequiresConfirmation = userManager.Options.SignIn.RequireConfirmedAccount,
        };
        await SendConfirmationEmail(request, user);

        return response;
    }

    private static string GetSource(string code)
        => code switch {
            _ when code.StartsWith("Duplicate") => "Email",
            _ when code.StartsWith("Password") => "Password",
            _ => "",
        };

    private async Task SendConfirmationEmail(RegisterUserRequest request, TUser user) {
        var code = await userManager.GenerateEmailConfirmationTokenAsync(user);
        await messagingService.SendConfirmationEmailAsync(user, code, request.ConfirmationUrl, request.ReturnUrl);
    }
}        ]]></file> 
        <file name="IAccountService.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Account;

internal interface IAccountService
    : IAccountService<string>;

internal interface IAccountService<TKey>
    where TKey : IEquatable<TKey> {
    Task<Result<RegisterUserResponse>> CreateAsync(RegisterUserRequest request);
    Task<FindUserResponse?> FindAsync(string? id, string? email);
}        ]]></file> 
      </folder> 
      <folder name="Authentication"> 
        <file name="AuthenticationService.cs"><![CDATA[ 
﻿using System.Text.Json;

namespace HttpServices.Services.Authentication;

internal sealed class AuthenticationService(IConfiguration configuration,
                                            IHostEnvironment environment,
                                            IOptions<AuthenticationServiceOptions> identityOptions,
                                            UserManager<User> userManager,
                                            SignInManager<User> signInManager,
                                            IMessagingService<User> messagingService,
                                            ILogger<AuthenticationService> logger)
    : AuthenticationService<User, NamedUserProfile>(configuration,
                                                      environment,
                                                      identityOptions,
                                                      userManager,
                                                      signInManager,
                                                      messagingService,
                                                      logger);

internal class AuthenticationService<TUser, TProfile>(IConfiguration configuration,
                                            IHostEnvironment environment,
                                            IOptions<AuthenticationServiceOptions> identityOptions,
                                            UserManager<TUser> userManager,
                                            SignInManager<TUser> signInManager,
                                            IMessagingService<TUser> messagingService,
                                            ILogger<AuthenticationService<TUser, TProfile>> logger)
    : IAuthenticationService
    where TUser : class, IIdentityUser<TProfile>, new()
    where TProfile : class, IUserProfile, new() {
    private readonly AuthenticationServiceOptions _options = identityOptions.Value;
    private readonly JwtSecurityTokenHandler _jwtHandler = new();

    public async Task<TypedResult<SignInStatus, string>> PasswordSignIn(PasswordSignInRequest request) {
        logger.LogInformation("Login attempt for '{Email}'.", request.Identifier);
        if (TryValidateMasterUser(request, _options.Master, out var master)) {
            var token = GenerateUserToken(master.Id, master.Identifier, [Roles.Admin], master.Email, master.PhoneNumber, master.Profile);
            await signInManager.SignInAsync(master, true);
            logger.LogInformation("Master user logged in.");
            return TypedResult.As(SignInStatus.Success, token);
        }

        var user = await userManager.FindByEmailAsync(request.Identifier);
        if (user is null) {
            logger.LogInformation("Account '{Email}' not found.", request.Identifier);
            var error = new Error($"Account '{request.Identifier}' not found.", nameof(request.Identifier));
            return TypedResult.As(SignInStatus.AccountNotFound, [error]).WithNo<string>();
        }

        var result = await signInManager.PasswordSignInAsync(user, request.Password, request.RememberMe, lockoutOnFailure: user.LockoutEnabled);

        if (!user.AccountConfirmed && _options.SignIn.RequireConfirmedAccount) {
            logger.LogInformation("Account '{UserId}' requires confirmation.", user.Id);
            var token = await GenerateEmailConfirmationToken(user);
            var error = new Error("Account requires confirmation.", nameof(request.Identifier));
            return TypedResult.As(SignInStatus.EmailNotConfirmed, token, error);
        }

        if (result.RequiresTwoFactor) {
            logger.LogInformation("Account '{UserId}' requires two factor.", user.Id);
            var token = await GenerateAndSendTwoFactorToken(user);
            var error = new Error("Two factor authentication required.", nameof(request.Identifier));
            return TypedResult.As(SignInStatus.RequiresTwoFactor, token, error);
        }

        if (result.Succeeded) {
            logger.LogInformation("Account '{UserId}' logged in.", user.Id);
            var roles = await userManager.GetRolesAsync(user);
            var token = GenerateUserToken(user.Id, user.Identifier, roles, user.Email, user.PhoneNumber, user.Profile);
            return TypedResult.As(SignInStatus.Success, token);
        }

        if (result.IsLockedOut) {
            logger.LogInformation("Account '{UserId}' is locked out.", user.Id);
            var error = new Error("Account is temporarily locked.", nameof(request.Identifier));
            return TypedResult.As(SignInStatus.LockedAccount, [error]).WithNo<string>();
        }

        if (result.IsNotAllowed) {
            logger.LogInformation("Account '{UserId}' is blocked.", user.Id);
            var error = new Error("Account is blocked.", nameof(request.Identifier));
            return TypedResult.As(SignInStatus.BlockedAccount, [error]).WithNo<string>();
        }

        logger.LogInformation("Invalid login for '{UserId}'", user.Id);
        var failure = new Error("Invalid login.", nameof(request.Identifier));
        return TypedResult.As(SignInStatus.IncorrectLogin, [failure]).WithNo<string>();
    }

    public Task SignOut(SignOutRequest _)
        => signInManager.SignOutAsync();

    public async Task<AuthenticationScheme[]> GetSchemes()
        => [.. await signInManager.GetExternalAuthenticationSchemesAsync()];

    private Task<string> GenerateEmailConfirmationToken(TUser user)
        => userManager.GenerateEmailConfirmationTokenAsync(user);

    private async Task<string> GenerateAndSendTwoFactorToken(TUser user) {
        var provider = user.TwoFactorType switch {
            TwoFactorType.Phone => TokenOptions.DefaultPhoneProvider,
            TwoFactorType.Authenticator => TokenOptions.DefaultAuthenticatorProvider,
            _ => TokenOptions.DefaultEmailProvider,
        };
        var token = await userManager.GenerateTwoFactorTokenAsync(user, provider);
        await messagingService.SendTwoFactorMessageAsync(user, token);
        return token;
    }

    private bool TryValidateMasterUser(PasswordSignInRequest request, MasterOptions? masterUser, [NotNullWhen(true)] out TUser? user) {
        user = null;
        if (masterUser?.Identifier.Equals(request.Identifier, StringComparison.OrdinalIgnoreCase) != true
         || masterUser.HashedSecret != (environment.IsDevelopment()
                                            ? request.Password
                                            : Convert.ToBase64String(SHA512.HashData(Encoding.UTF8.GetBytes(request.Password))))) {
            return false;
        }

        user = InstanceFactory.Create<TUser>();
        user.Id = masterUser.Id;
        user.Identifier = masterUser.Identifier;
        user.Email = masterUser.Email;
        user.NormalizedEmail = user.Email?.ToUpperInvariant();
        user.UserName = masterUser.Identifier;
        user.NormalizedUserName = user.UserName?.ToUpperInvariant();
        user.SecurityStamp = Guid.NewGuid().ToString();
        user.EmailConfirmed = true;
        user.LockoutEnabled = true;
        user.TwoFactorEnabled = false;

        user.Profile = new() { Name = masterUser.Name ?? masterUser.Identifier };
        return true;
    }

    private string GenerateUserToken(string id, string identifier, IEnumerable<string> roles, string? email, string? phoneNumber, IUserProfile? profile) {
        var claims = new List<Claim> {
            new(_options.ClaimsIdentity.IdClaimType, id),
            new(_options.ClaimsIdentity.IdentifierClaimType, identifier),
        };
        if (!string.IsNullOrWhiteSpace(email))
            claims.Add(new(_options.ClaimsIdentity.EmailClaimType, email));
        if (!string.IsNullOrWhiteSpace(phoneNumber))
            claims.Add(new(_options.ClaimsIdentity.PhoneNumberClaimType, phoneNumber));
        claims.AddRange(roles.Select(role => new Claim(_options.ClaimsIdentity.RoleClaimType, role)));
        if (profile is not null)
            claims.Add(new(_options.ClaimsIdentity.ProfileClaimType, JsonSerializer.Serialize(profile)));
        var identity = new ClaimsIdentity(claims,
                                          IdentityConstants.ExternalScheme,
                                          _options.ClaimsIdentity.IdentifierClaimType,
                                          _options.ClaimsIdentity.RoleClaimType);
        var jwtSettings = configuration.GetSection("Jwt").Get<JwtSettings>()!;
        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Key));
        var now = DateTime.UtcNow;
        return _jwtHandler.CreateEncodedJwt(issuer: jwtSettings.Issuer,
                                            audience: jwtSettings.Audience,
                                            subject: identity,
                                            notBefore: now,
                                            expires: now.AddMinutes(30),
                                            issuedAt: now,
                                            signingCredentials: new(securityKey, SecurityAlgorithms.HmacSha256));
    }
}
        ]]></file> 
        <file name="IAuthenticationService.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Authentication;

internal interface IAuthenticationService {
    Task<TypedResult<SignInStatus, string>> PasswordSignIn(PasswordSignInRequest request);
    Task SignOut(SignOutRequest request);
    Task<AuthenticationScheme[]> GetSchemes();
}        ]]></file> 
        <file name="SignInStatus.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Authentication;

public enum SignInStatus {
    InvalidInput,
    AccountNotFound,
    BlockedAccount,
    LockedAccount,
    IncorrectLogin,
    EmailNotConfirmed,
    RequiresTwoFactor,
    Success,
}
        ]]></file> 
      </folder> 
      <folder name="Cache"> 
        <file name="CacheService.cs"><![CDATA[ 
﻿// ReSharper disable once CheckNamespace
namespace ApiService.Services.Cache;

internal sealed class CacheService(IDistributedCache cache)
    : ICacheService {
    public Task AddTokenAsync(string clientId, string token, DateTimeOffset expiration, CancellationToken ct = default) {
        var options = new DistributedCacheEntryOptions { AbsoluteExpiration = expiration };
        return cache.SetStringAsync($"jwt:{clientId}", token, options, ct);
    }

    public Task<string?> FindTokenAsync(string clientId, CancellationToken ct = default)
        => cache.GetStringAsync($"jwt:{clientId}", ct);
}
        ]]></file> 
        <file name="ICacheService.cs"><![CDATA[ 
﻿// ReSharper disable once CheckNamespace
namespace ApiService.Services.Cache;

internal interface ICacheService {
    Task AddTokenAsync(string clientId, string token, DateTimeOffset expiration, CancellationToken ct = default);
    Task<string?> FindTokenAsync(string clientId, CancellationToken ct = default);
}
        ]]></file> 
      </folder> 
      <folder name="Client"> 
        <file name="ClientService.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Client;

internal sealed class ClientService<TDatabase>(TDatabase data,
                                               IConfiguration configuration,
                                               ILogger<ClientService<TDatabase>> logger)
    : IClientService
    where TDatabase : DbContext {
    private const int _secretSize = 128;

    public async Task<Result<RegisterClientResponse>> RegisterAsync(RegisterClientRequest request) {
        logger.LogInformation("New api client registration requested.");
        var result = request.Validate();
        if (result.HasErrors)
            return result.Errors.ToArray();

        var secret = StringHelpers.GenerateSecret(_secretSize);

        var client = new ApiClient {
            Name = request.Name,
            HashedSecret = Convert.ToBase64String(SHA256.HashData(Encoding.UTF8.GetBytes(secret))),
        };
        await data.Set<ApiClient>().AddAsync(client);
        await data.SaveChangesAsync();

        logger.LogInformation("New api client registered.");

        return new RegisterClientResponse {
            ClientId = client.Id,
            ClientSecret = secret,
        };
    }

    public async Task<Result<TokenResponse?>?> GenerateTokenAsync(GenerateTokenRequest request) {
        logger.LogInformation("Api token requested.");
        var result = request.Validate();
        if (result.HasErrors)
            return result.Errors.ToArray();

        var client = await GetAuthenticatedClientOrDefaultAsync(request.ClientId, request.ClientSecret);
        var token = CreateJwtToken(client, request.Name);
        if (token is null) {
            logger.LogWarning("Invalid client credentials.");
            return null;
        }
        await data.Set<ApiToken>().AddAsync(token);
        await data.SaveChangesAsync();

        logger.LogInformation("Api token generated.");
        return new TokenResponse {
            Name = request.Name,
            Token = token.Value,
            Expiration = token.Expiration,
        };
    }

    private ApiToken? CreateJwtToken(ApiClient? client, string? name) {
        if (client is null)
            return null;
        var jwtSettings = configuration.GetSection("Jwt").Get<JwtSettings>()!;
        var tokenHandler = new JwtSecurityTokenHandler();
        var keyBytes = Encoding.UTF8.GetBytes(jwtSettings.Key);
        var now = DateTime.UtcNow;
        var tokenDescriptor = new SecurityTokenDescriptor {
            Subject = new(),
            Issuer = jwtSettings.Issuer,
            Audience = jwtSettings.Audience,
            IssuedAt = now,
            Expires = now.AddMinutes(jwtSettings.ExpirationMinutes),
            TokenType = "Client",
            SigningCredentials = new(new SymmetricSecurityKey(keyBytes), SecurityAlgorithms.HmacSha256Signature),
        };
        tokenDescriptor.Claims.Add(ClaimTypes.NameIdentifier, client.Id);
        tokenDescriptor.Claims.Add(ClaimTypes.Name, client.Name);
        var token = tokenHandler.CreateToken(tokenDescriptor);
        return new() {
            ApiClientId = client.Id,
            Name = name,
            Value = tokenHandler.WriteToken(token),
            Expiration = tokenDescriptor.Expires,
        };
    }

    private async Task<ApiClient?> GetAuthenticatedClientOrDefaultAsync(string id, string secret) {
        var client = await data.Set<ApiClient>().FindAsync(id);
        if (client is null)
            return null;
        var hashedSecret = Convert.ToBase64String(SHA256.HashData(Encoding.UTF8.GetBytes(secret)));
        return hashedSecret != client.HashedSecret ? null : client;
    }

    Task<Result<string?>> IClientService.GenerateTokenAsync(GenerateTokenRequest request) => throw new NotImplementedException();
}
        ]]></file> 
        <file name="IClientService.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Client;

internal interface IClientService {
    Task<Result<RegisterClientResponse>> RegisterAsync(RegisterClientRequest request);
    Task<Result<string?>> GenerateTokenAsync(GenerateTokenRequest request);
}
        ]]></file> 
      </folder> 
      <folder name="Messaging"> 
        <file name="IMessagingService.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Messaging;

internal interface IMessagingService<in TUser>
    where TUser : class {
    Task SendConfirmationEmailAsync(TUser user, string code, string callbackAbsoluteUri, string? returnUrl = null);
    Task SendTwoFactorMessageAsync(TUser user, string token);
}
        ]]></file> 
        <file name="MessagingService.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Messaging;

internal sealed class MessagingService<TUser, TProfile>(IEmailSender<TUser> emailSender)
    : MessagingService<TUser, string, TProfile>(emailSender)
    where TUser : class, IIdentityUser<TProfile>
    where TProfile : class, IUserProfile;

internal class MessagingService<TUser, TKey, TProfile>(IEmailSender<TUser> emailSender)
    : IMessagingService<TUser>
    where TUser : class, IIdentityUser<TKey, TProfile>
    where TKey : IEquatable<TKey>
    where TProfile : class, IUserProfile {
    public Task SendConfirmationEmailAsync(TUser user, string code, string callbackAbsoluteUri, string? returnUrl = null) {
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var builder = new UriBuilder(callbackAbsoluteUri);
        var parameters = new NameValueCollection {
            ["userId"] = user.Id.ToString(),
            ["code"] = code,
            ["returnUrl"] = returnUrl,
        };
        builder.Query = parameters.ToString();
        return emailSender.SendConfirmationLinkAsync(user, user.Email!, builder.Uri.ToString());
    }

    public Task SendTwoFactorMessageAsync(TUser user, string token) => Task.CompletedTask;
}
        ]]></file> 
        <file name="NullEmailSender.cs"><![CDATA[ 
﻿namespace HttpServices.Services.Messaging;

internal sealed class NullEmailSender<TUser>
    : IEmailSender<TUser>
    where TUser : class {
    public Task SendConfirmationLinkAsync(TUser user, string email, string confirmationLink) => Task.CompletedTask;

    public Task SendPasswordResetLinkAsync(TUser user, string email, string resetLink) => Task.CompletedTask;

    public Task SendPasswordResetCodeAsync(TUser user, string email, string resetCode) => Task.CompletedTask;
}
        ]]></file> 
      </folder> 
    </folder> 
  </folder> 
  <folder name="HttpServices"> 
    <file name="ApiClientEndpoints.cs"><![CDATA[ 
namespace HttpServices.Abstractions;

public static class ApiClientEndpoints {
    public const string TokensEndpoint = "/tokens";
    public const string ClientsEndpoint = "/clients";
}
    ]]></file> 
    <file name="AuthenticationEndpoints.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions;

public static class AuthenticationEndpoints {
    public const string SignInEndpoint = "/sign-in";
    public const string SignOutEndpoint = "/sign-out";
    public const string SchemesEndpoint = "/schemes";
}
    ]]></file> 
    <file name="GlobalUsings.cs"><![CDATA[ 
global using System.ComponentModel.DataAnnotations;
global using System.Security.Claims;
global using System.Text;
global using System.Text.RegularExpressions;

global using DotNetToolbox;
global using DotNetToolbox.Results;
global using DotNetToolbox.Validation;

global using HttpServices.Abstractions.Helpers;

global using Microsoft.AspNetCore.Authentication;
global using Microsoft.AspNetCore.Identity;
    ]]></file> 
    <file name="HealthCheckEndpoints.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions;

public static class HealthCheckEndpoints {
    public const string HealthEndpoint = "/health";
    public const string IsAliveEndpoint = "/alive";
}
    ]]></file> 
    <file name="HttpServices.Abstractions.csproj"><![CDATA[ 
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DotNetToolbox.Core" Version="9.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.Abstractions" Version="2.3.0" />
    <PackageReference Include="Microsoft.Extensions.Identity.Stores" Version="9.0.2" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="UserAccountEndpoints.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions;

public static class UserAccountEndpoints {
    public const string UsersEndpoint = "/users";
    public const string FindUserByIdEndpoint = "/users";
    public static string FindUserByIdUri(string id) => $"/users/{id}";
}
    ]]></file> 
    <folder name="Contracts"> 
      <folder name="Account"> 
        <file name="FindUserResponse.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.Account;

public sealed record FindUserResponse {
    public required string Id { get; init; }
    public required string Identifier { get; init; }
    public required string Email { get; init; }
    public string? UserName { get; init; }
    public string? Name { get; init; }
}
        ]]></file> 
        <file name="RegisterUserRequest.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.Account;

public record RegisterUserRequest : IValidatable {
    public string? Name { get; init; }
    public required string Identifier { get; init; }
    public required string Email { get; init; }
    public string? UserName { get; init; }
    public string? PhoneNumber { get; init; }
    public required string Password { get; set; }
    public required string ConfirmationUrl { get; set; }
    public string? ReturnUrl { get; set; }

    public virtual Result Validate(IMap? context = null) {
        var result = Result.Success();
        if (string.IsNullOrWhiteSpace(Email))
            result += new Error("Email is required.", nameof(Email));
        else if (!Email.IsValidEmail())
            result += new Error("Email is invalid.", nameof(Email));
        if (string.IsNullOrWhiteSpace(Password))
            result += new Error("Password is required.", nameof(Password));
        if (string.IsNullOrWhiteSpace(ConfirmationUrl))
            result += new Error("Confirmation URL is required.", nameof(ConfirmationUrl));
        return result;
    }
}        ]]></file> 
        <file name="RegisterUserResponse.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.Account;

public sealed record RegisterUserResponse {
    public required string Id { get; init; }

    public bool RequiresConfirmation { get; set; }
}        ]]></file> 
      </folder> 
      <folder name="Client"> 
        <file name="GenerateTokenRequest.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.Client;

public sealed record GenerateTokenRequest : IValidatable {
    public string? Name { get; set; }
    public required string ClientId { get; set; }
    public required string ClientSecret { get; set; }

    public Result Validate(IMap? context = null) {
        var result = Result.Success();
        if (string.IsNullOrWhiteSpace(ClientId))
            result += new Error("ClientId is required.", nameof(ClientId));
        if (string.IsNullOrWhiteSpace(ClientSecret))
            result += new Error("ClientSecret is required.", nameof(ClientSecret));
        return result;
    }
}
        ]]></file> 
        <file name="RegisterClientRequest.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.Client;

public record RegisterClientRequest : IValidatable {
    public required string Name { get; set; }

    public virtual Result Validate(IMap? context = null) {
        var result = Result.Success();
        if (string.IsNullOrWhiteSpace(Name))
            result += new Error("Name is required.", nameof(Name));
        return result;
    }
}        ]]></file> 
        <file name="RegisterClientResponse.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.Client;

public sealed record RegisterClientResponse {
    public required string ClientId { get; init; }
    public required string ClientSecret { get; init; }
}        ]]></file> 
        <file name="TokenResponse.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.Client;

public sealed record TokenResponse {
    public string? Name { get; init; }
    public required string Token { get; init; }
    public DateTimeOffset? Expiration { get; init; }
}        ]]></file> 
      </folder> 
      <folder name="SignIn"> 
        <file name="PasswordSignInRequest.cs"><![CDATA[ 
﻿using HttpServices.Abstractions.Model;

namespace HttpServices.Abstractions.Contracts.SignIn;

public sealed record PasswordSignInRequest : IValidatable {
    public required string Identifier { get; init; }
    public IdentifierType IdentifierType { get; init; } = IdentifierType.Email;
    public required string Password { get; init; }
    public string[] Claims { get; init; } = [];
    public bool RememberMe { get; init; }
    public string? ReturnUrl { get; init; }

    public Result Validate(IMap? context = null) {
        var result = Result.Success();
        if (string.IsNullOrWhiteSpace(Identifier))
            result += new Error("The identifier is required.", nameof(Identifier));
        else if (IdentifierType == IdentifierType.Email && !Identifier.IsValidEmail())
            result += new Error("The identifier must be a valid email.", nameof(Identifier));
        else if (IdentifierType == IdentifierType.UserName && !Identifier.IsValidUserName())
            result += new Error("The identifier must be a valid username.", nameof(Identifier));
        if (string.IsNullOrWhiteSpace(Password))
            result += new Error("Password is required.", nameof(Password));
        return result;
    }
}        ]]></file> 
        <file name="SignInResponse.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.SignIn;

public sealed record SignInResponse {
    public required string Token { get; init; }
    public bool RequiresTwoFactor { get; init; }
    public bool RequiresConfirmation { get; init; }
}        ]]></file> 
        <file name="SignOutRequest.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Contracts.SignIn;

public sealed record SignOutRequest;
        ]]></file> 
      </folder> 
    </folder> 
    <folder name="Helpers"> 
      <file name="StringHelpers.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Helpers;

public static partial class StringHelpers {
    private static readonly Random _randomizer = new((int)DateTimeOffset.UtcNow.Ticks);
    private const string _secretAllowedChars = ".abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+";
    private static readonly Regex _emailFormat = EmailValidator();
    private static readonly Regex _usernameFormat = UsernameValidator();
    private static readonly Regex _phoneNumber = PhoneNumberValidator();

    public static bool IsValidEmail(this string email, bool allowEmpty = false)
        => (allowEmpty || !string.IsNullOrWhiteSpace(email))
        && _emailFormat.IsMatch(email);

    public static bool IsValidUserName(this string username, bool allowEmpty = false)
        => (allowEmpty || !string.IsNullOrWhiteSpace(username))
        && _usernameFormat.IsMatch(username);

    public static bool IsValidPhoneNumber(this string phoneNumber, bool allowEmpty = false)
        => (allowEmpty || !string.IsNullOrWhiteSpace(phoneNumber))
        && _phoneNumber.IsMatch(phoneNumber);

    [GeneratedRegex(@"^(?:[a-z0-9_]+(?:(?:\.|\-)[a-z0-9_]+)*)(?:\+[a-z0-9_]+(?:(?:\.|\-)[a-z0-9_]+)*)?\@(?:[a-z0-9]+(?:(?:\.|\-)[a-z0-9]+)*\.[a-z]{2,})$", RegexOptions.IgnoreCase | RegexOptions.Compiled, "en-CA")]
    private static partial Regex EmailValidator();

    [GeneratedRegex("^(?!.*[_.-]{2})(?=.{3,}$)[a-z0-9_][a-z0-9_.-]+[a-z0-9_]$", RegexOptions.IgnoreCase | RegexOptions.Compiled, "en-CA")]
    private static partial Regex UsernameValidator();

    [GeneratedRegex(@"^(?:\+\d{1,4})?(?:\s*\(\s*\d+\s*\)|\d+)(?:\s*\-?\d+)*$", RegexOptions.IgnoreCase | RegexOptions.Compiled, "en-CA")]
    private static partial Regex PhoneNumberValidator();

    public static string GenerateSecret(int size) {
        var builder = new StringBuilder();
        for (var i = 0; i < size; i++)
            builder.Append(_secretAllowedChars[_randomizer.Next(_secretAllowedChars.Length)]);
        return builder.ToString();
    }
}      ]]></file> 
    </folder> 
    <folder name="Model"> 
      <file name="ApiClient.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class ApiClient()
    : ApiClient<string>();

public class ApiClient<TKey>() {
    public virtual TKey Id { get; set; } = default!;
    public virtual string Name { get; set; } = null!;
    public virtual string HashedSecret { get; set; } = null!;
}      ]]></file> 
      <file name="ApiToken.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class ApiToken()
    : ApiToken<string>();

public class ApiToken<TKey>()
    where TKey : IEquatable<TKey> {
    public virtual TKey Id { get; set; } = default!;
    public virtual TKey? ApiClientId { get; set; }
    public virtual string? Name { get; set; }
    public virtual DateTimeOffset? Expiration { get; set; }

    [ProtectedPersonalData]
    public virtual string Value { get; set; } = null!;
}
      ]]></file> 
      <file name="AuthenticationClaimTypes.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public static class AuthenticationClaimTypes {
    private static readonly ClaimsIdentityOptions _defaultIdentityClaims = new();

    public const string Id = "AuthenticationService.Identity.Id";
    public const string Identifier = "AuthenticationService.Identity.Identifier";
    public const string Email = "AuthenticationService.Identity.Email";
    public const string UserName = "AuthenticationService.Identity.UserName";
    public const string PhoneNumber = "AuthenticationService.Identity.PhoneNumber";
    public const string Roles = "AuthenticationService.Identity.Roles";
    public const string Role = "AuthenticationService.Identity.Role";
    public const string Profile = "AuthenticationService.Identity.Profile";
    public static readonly string SecurityStamp = _defaultIdentityClaims.SecurityStampClaimType;
}
      ]]></file> 
      <file name="IBasicUser.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public interface IBasicUser<TKey, TProfile>
    where TKey : IEquatable<TKey>
    where TProfile : class, IUserProfile {
    TKey Id { get; set; }
    string Identifier { get; set; }
    IdentifierType IdentifierType { get; set; }
    string? UserName { get; set; }
    string? Email { get; set; }
    string? PhoneNumber { get; set; }
    string? PasswordHash { get; set; }
    TProfile? Profile { get; set; }
}
      ]]></file> 
      <file name="IdentifierType.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public enum IdentifierType {
    Email = 0,
    UserName = 1,
    Id = 2,
}
      ]]></file> 
      <file name="IIdentityUser.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public interface IIdentityUser<TProfile>
    : IIdentityUser<string, TProfile>
    where TProfile : class, IUserProfile;

public interface IIdentityUser<TKey, TProfile>
    : IBasicUser<TKey, TProfile>
    where TKey : IEquatable<TKey>
    where TProfile : class, IUserProfile {
    string? NormalizedEmail { get; set; }
    string? NormalizedUserName { get; set; }

    bool EmailConfirmed { get; set; }
    bool PhoneNumberConfirmed { get; set; }
    bool AccountConfirmed { get; }

    bool LockoutEnabled { get; set; }
    int AccessFailedCount { get; set; }
    DateTimeOffset? LockoutEnd { get; set; }

    bool TwoFactorEnabled { get; set; }
    TwoFactorType TwoFactorType { get; set; }

    string? SecurityStamp { get; set; }
    string? ConcurrencyStamp { get; set; }
}
      ]]></file> 
      <file name="IUserProfile.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public interface IUserProfile {
    [ProtectedPersonalData]
    string Name { get; set; }
}
      ]]></file> 
      <file name="JwtSettings.cs"><![CDATA[ 
namespace HttpServices.Abstractions.Model;

public class JwtSettings {
    public string Key { get; set; } = null!;
    public string Issuer { get; set; } = null!;
    public string Audience { get; set; } = null!;
    public int ExpirationMinutes { get; init; } = 30; // Default to 1 hour if not specified
}
      ]]></file> 
      <file name="NamedUserProfile.cs"><![CDATA[ 
namespace HttpServices.Abstractions.Model;

public class NamedUserProfile : IUserProfile {
    [ProtectedPersonalData]
    public virtual string Name { get; set; } = string.Empty;
}
      ]]></file> 
      <file name="Role.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class Role
    : Role<string>;

public class Role<TKey>
    : IdentityRole<TKey>
    where TKey : IEquatable<TKey> {
    public virtual TKey? ApiClientId { get; set; }
}
      ]]></file> 
      <file name="RoleClaim.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class RoleClaim()
    : RoleClaim<string>();

public class RoleClaim<TKey>()
    : IdentityRoleClaim<TKey>()
    where TKey : IEquatable<TKey>;
      ]]></file> 
      <file name="Roles.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public static class Roles {
    public const string Admin = "Admin";
    public const string User = "User";
}
      ]]></file> 
      <file name="TwoFactorType.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public enum TwoFactorType {
    None = 0,
    Email = 1,
    Phone = 2,
    Authenticator = 3,
}
      ]]></file> 
      <file name="User.cs"><![CDATA[ 
namespace HttpServices.Abstractions.Model;

public class User
    : User<NamedUserProfile>;

public class User<TProfile>
    : User<string, TProfile>
    , IIdentityUser<TProfile>
    where TProfile : class, IUserProfile, new();

public class User<TKey, TProfile>
    : IdentityUser<TKey>
    , IIdentityUser<TKey, TProfile>
    where TKey : IEquatable<TKey>
    where TProfile : class, IUserProfile, new() {
    public virtual TKey? ApiClientId { get; set; }

    public virtual string Identifier { get; set; } = string.Empty;
    public virtual IdentifierType IdentifierType { get; set; } = IdentifierType.Email;

    public virtual TProfile? Profile { get; set; }

    [PersonalData]
    public virtual bool AccountConfirmed => EmailConfirmed || PhoneNumberConfirmed;

    [PersonalData]
    public virtual TwoFactorType TwoFactorType { get; set; }
}
      ]]></file> 
      <file name="UserClaim.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class UserClaim()
    : UserClaim<string>();

public class UserClaim<TKey>()
    : IdentityUserClaim<TKey>()
    where TKey : IEquatable<TKey>;
      ]]></file> 
      <file name="UserLogin.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class UserLogin()
    : UserLogin<string>();

public class UserLogin<TKey>()
    : IdentityUserLogin<TKey>()
    where TKey : IEquatable<TKey>;
      ]]></file> 
      <file name="UserRole.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class UserRole()
    : UserRole<string>();

public class UserRole<TKey>()
    : IdentityUserRole<TKey>()
    where TKey : IEquatable<TKey>;
      ]]></file> 
      <file name="UserToken.cs"><![CDATA[ 
﻿namespace HttpServices.Abstractions.Model;

public class UserToken()
    : UserToken<string>();

public class UserToken<TKey>()
    : IdentityUserToken<TKey>()
    where TKey : IEquatable<TKey> {
}
      ]]></file> 
    </folder> 
  </folder> 
  <folder name="IdentityService"> 
    <file name="appsettings.Development.json"><![CDATA[ 
{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "Microsoft.AspNetCore": "Information"
    }
  },
  "Jwt": {
    "Issuer": "https://localhost:7166",
    "Audience": "VttTools"
  },
  "ConnectionStrings": {
    "DefaultConnection": "Data Source=(localdb)\\ProjectModels;Database=VttTools-Auth-Dev;Integrated Security=True;",
    "Redis": "localhost:6379"
  }
}
    ]]></file> 
    <file name="appsettings.json"><![CDATA[ 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "Redis": {
    "InstanceName": "VttToolsAuthServiceCache"
  }
}
    ]]></file> 
    <file name="GlobalUsings.cs"><![CDATA[ 
﻿global using Domain.Model;

global using HttpServices.Abstractions.Model;
global using HttpServices.Data;

global using IdentityService.Data;

global using Microsoft.AspNetCore.Identity;
global using Microsoft.EntityFrameworkCore;

global using static DotNetToolbox.Ensure;
    ]]></file> 
    <file name="IdentityService.csproj"><![CDATA[ 
﻿<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>09be209c-d90d-4328-8563-d2ca79ebcb17</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Aspire.StackExchange.Redis.DistributedCaching" Version="9.1.0" />
    <PackageReference Include="DotNetToolbox.Core" Version="9.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.2" />
    <PackageReference Include="Microsoft.Extensions.Caching.StackExchangeRedis" Version="9.0.2" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.21.2" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Http.Resilience" Version="9.2.0" />
    <PackageReference Include="Microsoft.Extensions.ServiceDiscovery" Version="9.1.0" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.11.1" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.11.1" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.11.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.11.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime" Version="1.11.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Domain\Domain.csproj" />
    <ProjectReference Include="..\HttpServices\HttpServices.csproj" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="Program.cs"><![CDATA[ 
var builder = IdentityProviderWebApi.CreateBuilder<IdentityServiceDbContext, User, NamedUserProfile>(args, (options, configuration) => {
    var connectionString = IsNotNull(configuration.GetConnectionString("DefaultConnection"));
    options.UseSqlServer(connectionString);
});

var app = builder.Build();

app.MapHealthCheckEndpoints();
app.MapApiClientManagementEndpoints();

app.MapAuthenticationManagementEndpoints();
app.MapUserAccountManagementEndpoints();

app.Run();
    ]]></file> 
    <folder name="Data"> 
      <file name="IdentityServiceDbContext.cs"><![CDATA[ 
namespace IdentityService.Data;

public class IdentityServiceDbContext(DbContextOptions<IdentityServiceDbContext> options)
    : IdentityProviderApiDbContext(options);      ]]></file> 
    </folder> 
    <folder name="Properties"> 
      <file name="launchSettings.json"><![CDATA[ 
{
  "profiles": {
    "http": {
      "commandName": "Project",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "dotnetRunMessages": true,
      "applicationUrl": "http://localhost:5104"
    },
    "https": {
      "commandName": "Project",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      },
      "dotnetRunMessages": true,
      "applicationUrl": "https://localhost:7166;http://localhost:5104"
    },
    "Container (Dockerfile)": {
      "commandName": "Docker",
      "launchUrl": "{Scheme}://{ServiceHost}:{ServicePort}",
      "environmentVariables": {
        "ASPNETCORE_HTTPS_PORTS": "8081",
        "ASPNETCORE_HTTP_PORTS": "8080"
      },
      "publishAllPorts": true,
      "useSSL": true
    }
  },
  "$schema": "https://json.schemastore.org/launchsettings.json"
}      ]]></file> 
    </folder> 
    <folder name="Services"> 
      <file name="IdentityNoOpEmailSender.cs"><![CDATA[ 
namespace IdentityService.Account;

internal sealed class IdentityNoOpEmailSender : IEmailSender<User> {
    private readonly IEmailSender _emailSender = new NoOpEmailSender();

    public Task SendConfirmationLinkAsync(User user, string email, string confirmationLink)
        => _emailSender.SendEmailAsync(email, "Confirm your email", $"Please confirm your account by <a href='{confirmationLink}'>clicking here</a>.");

    public Task SendPasswordResetLinkAsync(User user, string email, string resetLink)
        => _emailSender.SendEmailAsync(email, "Reset your password", $"Please reset your password by <a href='{resetLink}'>clicking here</a>.");

    public Task SendPasswordResetCodeAsync(User user, string email, string resetCode)
        => _emailSender.SendEmailAsync(email, "Reset your password", $"Please reset your password using the following code: {resetCode}");
}
      ]]></file> 
      <file name="IEmailSender.cs"><![CDATA[ 
namespace IdentityService.Account;

internal interface IEmailSender {
    Task SendEmailAsync(string email, string subject, string body);
}
      ]]></file> 
      <file name="NoOpEmailSender.cs"><![CDATA[ 
namespace IdentityService.Account;

internal sealed class NoOpEmailSender : IEmailSender {
    public Task SendEmailAsync(string email, string subject, string body) => Task.CompletedTask;
}
      ]]></file> 
    </folder> 
  </folder> 
  <folder name="Tests"> 
    <file name="Tests.csproj"><![CDATA[ 
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
    <IsTestProject>true</IsTestProject>
  </PropertyGroup>


  <ItemGroup>
    <PackageReference Include="Aspire.Hosting.Testing" Version="9.1.0" />
    <PackageReference Include="coverlet.collector" Version="6.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.13.0" />
    <PackageReference Include="xunit" Version="2.9.3" />
    <PackageReference Include="xunit.runner.visualstudio" Version="3.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\AppHost\AppHost.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Using Include="System.Net" />
    <Using Include="Microsoft.Extensions.DependencyInjection" />
    <Using Include="Aspire.Hosting.ApplicationModel" />
    <Using Include="Aspire.Hosting.Testing" />
    <Using Include="Xunit" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="WebTests.cs"><![CDATA[ 
namespace Tests;

public class WebTests {
    [Fact]
    public async Task GetWebResourceRootReturnsOkStatusCode() {
        // Arrange
        var appHost = await DistributedApplicationTestingBuilder.CreateAsync<Projects.AppHost>();
        appHost.Services.ConfigureHttpClientDefaults(b => b.AddStandardResilienceHandler());
        // To output logs to the xUnit.net ITestOutputHelper, consider adding a package from https://www.nuget.org/packages?q=xunit+logging

        await using var app = await appHost.BuildAsync();
        var resourceNotificationService = app.Services.GetRequiredService<ResourceNotificationService>();
        await app.StartAsync();

        // Act
        var httpClient = app.CreateHttpClient("webfrontend");
        await resourceNotificationService.WaitForResourceAsync("webfrontend", KnownResourceStates.Running).WaitAsync(TimeSpan.FromSeconds(30));
        var response = await httpClient.GetAsync("/");

        // Assert
        Assert.Equal(HttpStatusCode.OK, response.StatusCode);
    }
}
    ]]></file> 
  </folder> 
  <folder name="WebApp"> 
    <file name="appsettings.Development.json"><![CDATA[ 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
    ]]></file> 
    <file name="appsettings.json"><![CDATA[ 
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
    ]]></file> 
    <file name="GlobalUsings.cs"><![CDATA[ 
global using System.ComponentModel.DataAnnotations;
global using System.Diagnostics.CodeAnalysis;
global using System.Globalization;
global using System.IdentityModel.Tokens.Jwt;
global using System.Net.Http;
global using System.Net.Http.Json;
global using System.Security.Claims;
global using System.Text;
global using System.Text.Encodings.Web;
global using System.Text.Json;

global using Domain.Contracts.Account;

global using HttpServices.Abstractions;
global using HttpServices.Abstractions.Contracts.SignIn;
global using HttpServices.Abstractions.Model;

global using Microsoft.AspNetCore.Antiforgery;
global using Microsoft.AspNetCore.Authentication;
global using Microsoft.AspNetCore.Authentication.Cookies;
global using Microsoft.AspNetCore.Components;
global using Microsoft.AspNetCore.Components.Authorization;
global using Microsoft.AspNetCore.Components.Forms;
global using Microsoft.AspNetCore.Components.Routing;
global using Microsoft.AspNetCore.Components.Server;
global using Microsoft.AspNetCore.Components.Web;
global using Microsoft.AspNetCore.Components.Web.Virtualization;
global using Microsoft.AspNetCore.Http.Extensions;
global using Microsoft.AspNetCore.Identity;
global using Microsoft.AspNetCore.Mvc;
global using Microsoft.AspNetCore.WebUtilities;
global using Microsoft.Extensions.Options;
global using Microsoft.Extensions.Primitives;
global using Microsoft.JSInterop;

global using WebApp;
global using WebApp.Components;
global using WebApp.Components.Account;
global using WebApp.Components.Account.Model;
global using WebApp.Components.Account.Pages;
global using WebApp.Components.Account.Pages.Manage;
global using WebApp.Components.Account.Shared;
global using WebApp.Layouts;
global using WebApp.Pages;
    ]]></file> 
    <file name="Program.cs"><![CDATA[ 
var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddDistributedMemoryCache();
builder.Services.AddRazorComponents()
    .AddInteractiveServerComponents()
    .AddInteractiveWebAssemblyComponents()
    .AddAuthenticationStateSerialization();

builder.Services.AddHttpClient("auth", static client => client.BaseAddress = new("https://localhost:7166"));
builder.Services.AddHttpClient("game", static client => client.BaseAddress = new("https://localhost:7465"));
builder.Services.AddCascadingAuthenticationState();
builder.Services.AddScoped<IdentityUserAccessor>();
builder.Services.AddScoped<IdentityRedirectManager>();
builder.Services.AddScoped<AuthenticationStateProvider, RevalidatingAuthenticationStateProvider>();
builder.Services.AddAuthentication(options => {
    options.DefaultScheme = IdentityConstants.ExternalScheme;
    options.DefaultSignInScheme = IdentityConstants.ExternalScheme;
}).AddIdentityCookies();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment()) {
    app.UseWebAssemblyDebugging();
    app.UseMigrationsEndPoint();
}
else {
    app.UseExceptionHandler("/Error", createScopeForErrors: true);
    app.UseHsts();
}

app.UseHttpsRedirection();

app.UseAntiforgery();

app.MapStaticAssets();
app.MapRazorComponents<App>()
    .AddInteractiveServerRenderMode()
    .AddInteractiveWebAssemblyRenderMode();
app.MapApiEndpoints();

app.Run();
    ]]></file> 
    <file name="WebApp.csproj"><![CDATA[ 
﻿<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>d50069b6-abfa-4bed-b3ac-bf9f2d30bcff</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="Properties\serviceDependencies.json" />
    <Content Include="Properties\serviceDependencies.local.json" />
  </ItemGroup>

  <ItemGroup>
    <None Include="Properties\serviceDependencies.local.json.user" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Server" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.Authentication" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="9.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="9.0.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="9.0.2">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Domain\Domain.csproj" />
  </ItemGroup>

</Project>
    ]]></file> 
    <file name="_Imports.razor"><![CDATA[ 
﻿@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using WebApp
@using WebApp.Components
@using WebApp.Layouts
@using WebApp.Pages
    ]]></file> 
    <folder name="Components"> 
      <file name="App.razor"><![CDATA[ 
﻿<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <base href="/" />
  <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
  <link rel="stylesheet" href="@Assets["app.css"]" />
  <link rel="stylesheet" href="@Assets["WebApp.styles.css"]" />
  <ImportMap />
  <link rel="icon" type="image/png" href="favicon.png" />
  <HeadOutlet />
</head>

<body>
  <Routes />
  <script src="_framework/blazor.web.js"></script>
</body>

</html>
      ]]></file> 
      <file name="EndpointRouteBuilderExtensions.cs"><![CDATA[ 
// ReSharper disable once CheckNamespace
namespace WebApp.Components;

internal static class EndpointRouteBuilderExtensions {
    // These endpoints are required by the Identity Razor components defined in the /Components/Account/Pages directory of this project.
    public static IEndpointConventionBuilder MapApiEndpoints(this IEndpointRouteBuilder endpoints) {
        ArgumentNullException.ThrowIfNull(endpoints);

        var accountGroup = endpoints.MapGroup("/Account");

        accountGroup.MapPost("/PerformExternalLogin", (
            HttpContext context,
            [FromServices] SignInManager<User> signInManager,
            [FromForm] string provider,
            [FromForm] string returnUrl) => {
                IEnumerable<KeyValuePair<string, StringValues>> query = [
                    new("ReturnUrl", returnUrl),
                new("Action", ExternalLogin.LoginCallbackAction)];

                var redirectUrl = UriHelper.BuildRelative(
                    context.Request.PathBase,
                    "/Account/ExternalLogin",
                    QueryString.Create(query));

                var properties = signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl);
                return TypedResults.Challenge(properties, [provider]);
            });

        accountGroup.MapPost("/Logout", async (
            HttpContext context,
            [FromServices] IAntiforgery antiForgery,
            [FromForm] string returnUrl) => {
                await antiForgery.ValidateRequestAsync(context);
                await context.SignOutAsync();
                return TypedResults.LocalRedirect($"~/{returnUrl}");
            });

        var manageGroup = accountGroup.MapGroup("/Manage").RequireAuthorization();

        manageGroup.MapPost("/LinkExternalLogin", async (
            HttpContext context,
            [FromServices] SignInManager<User> signInManager,
            [FromForm] string provider) => {
                // Clear the existing external cookie to ensure a clean login process
                await context.SignOutAsync(IdentityConstants.ExternalScheme);

                var redirectUrl = UriHelper.BuildRelative(
                    context.Request.PathBase,
                    "/Account/Manage/ExternalLogins",
                    QueryString.Create("Action", ExternalLogins.LinkLoginCallbackAction));

                var properties = signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl, signInManager.UserManager.GetUserId(context.User));
                return TypedResults.Challenge(properties, [provider]);
            });

        var loggerFactory = endpoints.ServiceProvider.GetRequiredService<ILoggerFactory>();
        var downloadLogger = loggerFactory.CreateLogger("DownloadPersonalData");

        manageGroup.MapPost("/DownloadPersonalData", async (
            HttpContext context,
            [FromServices] UserManager<User> userManager,
            [FromServices] AuthenticationStateProvider _) => {
                var user = await userManager.GetUserAsync(context.User);
                if (user is null)
                    return Results.NotFound($"Unable to load user with ID '{userManager.GetUserId(context.User)}'.");

                var userId = await userManager.GetUserIdAsync(user);
                downloadLogger.LogInformation("User with ID '{UserId}' asked for their personal data.", userId);

                // Only include personal data for download
                var personalDataProps = typeof(User).GetProperties().Where(prop => Attribute.IsDefined(prop, typeof(PersonalDataAttribute)));
                var personalData = personalDataProps.ToDictionary(p => p.Name, p => p.GetValue(user)?.ToString() ?? "null");

                var logins = await userManager.GetLoginsAsync(user);
                foreach (var l in logins)
                    personalData.Add($"{l.LoginProvider} external login provider key", l.ProviderKey);

                personalData.Add("Authenticator Key", (await userManager.GetAuthenticatorKeyAsync(user))!);
                var fileBytes = JsonSerializer.SerializeToUtf8Bytes(personalData);

                context.Response.Headers.TryAdd("Content-Disposition", "attachment; filename=PersonalData.json");
                return TypedResults.File(fileBytes, contentType: "application/json", fileDownloadName: "PersonalData.json");
            });

        return accountGroup;
    }
}      ]]></file> 
      <file name="NavMenu.razor"><![CDATA[ 
﻿@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="">VTT Tools</a>
  </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
  <nav class="nav flex-column">
    <div class="nav-item px-3">
      <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
      </NavLink>
    </div>

    <AuthorizeView>
      <Authorized>
        <div class="nav-item px-3">
          <NavLink class="nav-link" href="Account/Manage">
            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @UserName
          </NavLink>
        </div>
        <div class="nav-item px-3">
          <form action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@_currentUrl" />
            <button type="submit" class="nav-link">
              <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
            </button>
          </form>
        </div>
      </Authorized>
      <NotAuthorized>
        <div class="nav-item px-3">
          <NavLink class="nav-link" href="Account/Register">
            <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
          </NavLink>
        </div>
        <div class="nav-item px-3">
          <NavLink class="nav-link" href="Account/Login">
            <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
          </NavLink>
        </div>
      </NotAuthorized>
    </AuthorizeView>
  </nav>
</div>
      ]]></file> 
      <file name="NavMenu.razor.cs"><![CDATA[ 
﻿using Domain.Model;

namespace WebApp.Components;

public partial class NavMenu {
    private string? _currentUrl;

    [CascadingParameter]
    protected HttpContext HttpContext { get; set; } = null!;

    protected string UserName { get; set; } = null!;

    protected override void OnInitialized() {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        UserName = string.Empty;
        if (HttpContext.User.Identity is not ClaimsIdentity identity)
            return;
        var json = identity.Claims.FirstOrDefault(c => c.Type == AuthenticationClaimTypes.Profile)?.Value;
        var profile = json is null ? null : JsonSerializer.Deserialize<UserProfile>(json);
        UserName = profile?.PreferredName ?? profile?.Name ?? identity.Name ?? string.Empty;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
        GC.SuppressFinalize(this);
    }
}
      ]]></file> 
      <file name="Routes.razor"><![CDATA[ 
﻿<Router AppAssembly="typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="routeData" DefaultLayout="typeof(MainLayout)" />
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
</Router>
      ]]></file> 
      <file name="_Imports.razor"><![CDATA[ 
﻿@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using WebApp
@using WebApp.Components
@using WebApp.Layouts
@using WebApp.Pages
      ]]></file> 
      <folder name="Account"> 
        <file name="IdentityRedirectManager.cs"><![CDATA[ 
namespace WebApp.Components.Account;

public sealed class IdentityRedirectManager(NavigationManager navigationManager) {
    public const string StatusCookieName = "Identity.StatusMessage";

    private static readonly CookieBuilder _statusCookieBuilder = new() {
        SameSite = SameSiteMode.Strict,
        HttpOnly = true,
        IsEssential = true,
        MaxAge = TimeSpan.FromSeconds(5),
    };

    [DoesNotReturn]
    public void RedirectTo(string? uri) {
        uri ??= "";

        // Prevent open redirects.
        if (!Uri.IsWellFormedUriString(uri, UriKind.Relative))
            uri = navigationManager.ToBaseRelativePath(uri);

        // During static rendering, NavigateTo throws a NavigationException which is handled by the framework as a redirect.
        // So as long as this is called from a statically rendered Identity component, the InvalidOperationException is never thrown.
        navigationManager.NavigateTo(uri);
        throw new InvalidOperationException($"{nameof(IdentityRedirectManager)} can only be used during static rendering.");
    }

    [DoesNotReturn]
    public void RedirectTo(string uri, Dictionary<string, object?> queryParameters) {
        var uriWithoutQuery = navigationManager.ToAbsoluteUri(uri).GetLeftPart(UriPartial.Path);
        var newUri = navigationManager.GetUriWithQueryParameters(uriWithoutQuery, queryParameters);
        RedirectTo(newUri);
    }

    [DoesNotReturn]
    public void RedirectToWithStatus(string uri, string message, HttpContext context) {
        context.Response.Cookies.Append(StatusCookieName, message, _statusCookieBuilder.Build(context));
        RedirectTo(uri);
    }

    private string CurrentPath => navigationManager.ToAbsoluteUri(navigationManager.Uri).GetLeftPart(UriPartial.Path);

    [DoesNotReturn]
    public void RedirectToCurrentPage() => RedirectTo(CurrentPath);

    [DoesNotReturn]
    public void RedirectToCurrentPageWithStatus(string message, HttpContext context)
        => RedirectToWithStatus(CurrentPath, message, context);
}
        ]]></file> 
        <file name="IdentityUserAccessor.cs"><![CDATA[ 
namespace WebApp.Components.Account;

internal sealed class IdentityUserAccessor(IHttpClientFactory clientFactory, IdentityRedirectManager redirectManager) {
    public async Task<User?> GetRequiredUserAsync(HttpContext context, CancellationToken ct) {
        var id = context.User.Identity?.Name;
        if (id is null) {
            redirectManager.RedirectToWithStatus("Account/InvalidUser", "Error: Unable to load user.", context);
            return null;
        }

        var user = await GetUserByIdAsync(id, ct);
        if (user is null) {
            redirectManager.RedirectToWithStatus("Account/InvalidUser", $"Error: Unable to load user '{id}'.", context);
            return null;
        }

        return user;
    }

    private static readonly CompositeFormat _userUri = CompositeFormat.Parse("/users/{0}");

    private async Task<User?> GetUserByIdAsync(string? id, CancellationToken ct) {
        var client = clientFactory.CreateClient("IdentityService");
        var response = await client.GetFromJsonAsync<FindUserResponse>(string.Format(null, _userUri, id), ct);
        return response is null
            ? null
            : new User {
                Id = response.Id,
                IdentifierType = IdentifierType.Email,
                Identifier = response.Email,
                Email = response.Email,
                Profile = new() { Name = response.Name },
                PhoneNumber = response.PhoneNumber,
            };
    }
}
        ]]></file> 
        <file name="RevalidatingAuthenticationStateProvider.cs"><![CDATA[ 
namespace WebApp.Components.Account;

// This is a server-side AuthenticationStateProvider that revalidates the security stamp for the connected user
// every 30 minutes an interactive circuit is connected.
internal sealed class RevalidatingAuthenticationStateProvider(
        ILoggerFactory loggerFactory,
        IServiceScopeFactory scopeFactory,
        IOptions<IdentityOptions> options)
    : RevalidatingServerAuthenticationStateProvider(loggerFactory) {
    protected override TimeSpan RevalidationInterval => TimeSpan.FromMinutes(30);

    protected override async Task<bool> ValidateAuthenticationStateAsync(
        AuthenticationState authenticationState, CancellationToken cancellationToken) {
        // Get the user manager from a new scope to ensure it fetches fresh data
        await using var scope = scopeFactory.CreateAsyncScope();
        var userManager = scope.ServiceProvider.GetRequiredService<UserManager<User>>();
        return await ValidateSecurityStampAsync(userManager, authenticationState.User);
    }

    private async Task<bool> ValidateSecurityStampAsync(UserManager<User> userManager, ClaimsPrincipal principal) {
        var user = await userManager.GetUserAsync(principal);
        if (user is null)
            return false;

        if (!userManager.SupportsUserSecurityStamp)
            return true;

        var principalStamp = principal.FindFirstValue(options.Value.ClaimsIdentity.SecurityStampClaimType);
        var userStamp = await userManager.GetSecurityStampAsync(user);
        return principalStamp == userStamp;
    }
}
        ]]></file> 
        <folder name="Model"> 
          <file name="User.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Model;

public record WebAppUser {
    [Required]
    [StringLength(48)]
    public required string Id { get; init; }

    [Required]
    [StringLength(256)]
    public required string Email { get; init; }

    [Required]
    [StringLength(256)]
    public required string Name { get; init; }

    [StringLength(256)]
    public string? PreferredName { get; init; }

    [StringLength(25)]
    public string? PhoneNumber { get; init; }
}
          ]]></file> 
        </folder> 
        <folder name="Pages"> 
          <file name="AccessDenied.razor"><![CDATA[ 
﻿@page "/Account/AccessDenied"

<PageTitle>Access denied</PageTitle>

<header>
    <h1 class="text-danger">Access denied</h1>
    <p class="text-danger">You do not have access to this resource.</p>
</header>
          ]]></file> 
          <file name="ConfirmEmail.razor"><![CDATA[ 
﻿@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<h1>Confirm email</h1>
<StatusMessage Message="@_statusMessage" />
          ]]></file> 
          <file name="ConfirmEmail.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class ConfirmEmail {
    private string? _statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync() {
        if (UserId is null || Code is null)
            RedirectManager.RedirectTo("");

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null) {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            _statusMessage = $"Error loading user with ID {UserId}";
        }
        else {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            _statusMessage = result.Succeeded ? "Thank you for confirming your email." : "Error confirming your email.";
        }
    }
}
          ]]></file> 
          <file name="ConfirmEmailChange.razor"><![CDATA[ 
﻿@page "/Account/ConfirmEmailChange"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email change</PageTitle>

<h1>Confirm email change</h1>

<StatusMessage Message="@_message" />
          ]]></file> 
          <file name="ConfirmEmailChange.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class ConfirmEmailChange {
    private string? _message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync() {
        if (UserId is null || Email is null || Code is null)
            RedirectManager.RedirectToWithStatus("Account/Login", "Error: Invalid email change confirmation link.", HttpContext);

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null) {
            _message = "Unable to find user with Id '{userId}'";
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        var result = await UserManager.ChangeEmailAsync(user, Email, code);
        if (!result.Succeeded) {
            _message = "Error changing email.";
            return;
        }

        // In our UI email and user name are one and the same, so when we update the email
        // we need to update the user name.
        var setUserNameResult = await UserManager.SetUserNameAsync(user, Email);
        if (!setUserNameResult.Succeeded) {
            _message = "Error changing user name.";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        _message = "Thank you for confirming your email change.";
    }
}
          ]]></file> 
          <file name="ExternalLogin.razor"><![CDATA[ 
﻿@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

<PageTitle>Register</PageTitle>

<StatusMessage Message="@_message" />
<h1>Register</h1>
<h2>Associate your @ProviderDisplayName account.</h2>
<hr />

<div  class="alert alert-info">
    You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
    Please enter an email address for this site below and click the Register button to finish
    logging in.
</div>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="email" placeholder="Please enter your email." />
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>
          ]]></file> 
          <file name="ExternalLogin.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class ExternalLogin {
    public const string LoginCallbackAction = "LoginCallback";
    private string? _message;
    private ExternalLoginInfo? _externalLoginInfo;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => _externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync() {
        if (RemoteError is not null)
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);

        _externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method)) {
            if (Action == LoginCallbackAction) {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync() {
        if (_externalLoginInfo is null)
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);

        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(_externalLoginInfo.LoginProvider,
                                                                  _externalLoginInfo.ProviderKey,
                                                                  isPersistent: false,
                                                                  bypassTwoFactor: true);

        if (result.Succeeded) {
            Logger.LogInformation("{Name} logged in with {LoginProvider} provider.",
                                  _externalLoginInfo.Principal.Identity?.Name,
                                  _externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut) {
            Logger.LogInformation("{Name} locked out.",
                                  _externalLoginInfo.Principal.Identity?.Name);
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (_externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
            Input.Email = _externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
    }

    private async Task OnValidSubmitAsync() {
        if (_externalLoginInfo is null)
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information during confirmation.", HttpContext);

        var emailStore = GetEmailStore();
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded) {
            result = await UserManager.AddLoginAsync(user, _externalLoginInfo);
            if (result.Succeeded) {
                Logger.LogInformation("User created an account using {Name} provider.", _externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(NavigationManager.ToAbsoluteUri("Account/ConfirmEmail")
                                                                                               .AbsoluteUri,
                                                                              new Dictionary<string, object?> {
                                                                                  ["userId"] = userId,
                                                                                  ["code"] = code
                                                                              });
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                    RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });

                await SignInManager.SignInAsync(user, isPersistent: false, _externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        _message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    private User CreateUser() {
        try {
            return Activator.CreateInstance<User>();
        }
        catch {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. "
                                              + $"Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<User> GetEmailStore()
        => !UserManager.SupportsUserEmail
               ? throw new NotSupportedException("The default UI requires a user store with email support.")
               : (IUserEmailStore<User>)UserStore;

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
          ]]></file> 
          <file name="ForgotPassword.razor"><![CDATA[ 
﻿@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<h1>Forgot your password?</h1>
<h2>Enter your email.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset password</button>
        </EditForm>
     </div>
</div>
          ]]></file> 
          <file name="ForgotPassword.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class ForgotPassword {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync() {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !await UserManager.IsEmailConfirmedAsync(user))
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var uri = NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri;
        var parameters = new Dictionary<string, object?> { ["code"] = code };
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(uri, parameters);

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
          ]]></file> 
          <file name="ForgotPasswordConfirmation.razor"><![CDATA[ 
﻿@page "/Account/ForgotPasswordConfirmation"

<PageTitle>Forgot password confirmation</PageTitle>

<h1>Forgot password confirmation</h1>
<p role="alert">
    Please check your email to reset your password.
</p>
          ]]></file> 
          <file name="InvalidPasswordReset.razor"><![CDATA[ 
﻿@page "/Account/InvalidPasswordReset"

<PageTitle>Invalid password reset</PageTitle>

<h1>Invalid password reset</h1>
<p role="alert">
    The password reset link is invalid.
</p>
          ]]></file> 
          <file name="InvalidUser.razor"><![CDATA[ 
﻿@page "/Account/InvalidUser"

<PageTitle>Invalid user</PageTitle>

<h3>Invalid user</h3>

<StatusMessage />
          ]]></file> 
          <file name="Lockout.razor"><![CDATA[ 
﻿@page "/Account/Lockout"

<PageTitle>Locked out</PageTitle>

<header>
    <h1 class="text-danger">Locked out</h1>
    <p class="text-danger" role="alert">This account has been locked out, please try again later.</p>
</header>

          ]]></file> 
          <file name="Login.razor"><![CDATA[ 
﻿@page "/Account/Login"

@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
  <div class="col-lg-6">
    <section>
      <StatusMessage Message="@_errorMessage" />
      <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator/>
        <h2>Use a local account to log in.</h2>
        <hr/>
        <ValidationSummary class="text-danger" role="alert"/>
        <div class="form-floating mb-3">
          <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
          <label for="Input.Email" class="form-label">Email</label>
          <ValidationMessage For="() => Input.Email" class="text-danger"/>
        </div>
        <div class="form-floating mb-3">
          <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
          <label for="Input.Password" class="form-label">Password</label>
          <ValidationMessage For="() => Input.Password" class="text-danger"/>
        </div>
        <div class="checkbox mb-3">
          <label class="form-label">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
            Remember me
          </label>
        </div>
        <div>
          <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </div>
        <div>
          <p>
            <a href="Account/ForgotPassword">Forgot your password?</a>
          </p>
          <p>
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
          </p>
          <p>
            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
          </p>
        </div>
      </EditForm>
    </section>
  </div>
  <div class="col-lg-4 col-lg-offset-2">
    <section>
      <h3>Use another service to log in.</h3>
      <hr />
      <ExternalLoginPicker />
    </section>
  </div>
</div>
          ]]></file> 
          <file name="Login.razor.cs"><![CDATA[ 
﻿using static HttpServices.Abstractions.AuthenticationEndpoints;

namespace WebApp.Components.Account.Pages;

public partial class Login {
    private static readonly JwtSecurityTokenHandler _jwtHandler = new();

    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [Inject]
    protected IHttpClientFactory ClientFactory { get; init; } = null!;

    [Inject]
    protected IdentityRedirectManager RedirectManager { get; init; } = null!;

    [Inject]
    protected ILogger<Login> Logger { get; init; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private HttpClient _httpClient = null!;

    protected override Task OnInitializedAsync() {
        _httpClient = ClientFactory.CreateClient("auth");
        return !HttpMethods.IsGet(HttpContext.Request.Method)
                   ? Task.CompletedTask
                   : HttpContext.SignOutAsync();
    }

    public async Task LoginUser() {
        var request = new PasswordSignInRequest {
            Identifier = Input.Email,
            Password = Input.Password,
            RememberMe = Input.RememberMe,
            ReturnUrl = ReturnUrl,
        };
        var response = await _httpClient.PostAsJsonAsync(SignInEndpoint, request);
        if (!response.IsSuccessStatusCode) {
            _errorMessage = "Error: Invalid login attempt.";
            return;
        }
        var result = await response.Content.ReadFromJsonOrDefaultAsync<SignInResponse>();
        if (result is null) {
            Logger.LogWarning("SignInResponse is missing or is invalid.");
            _errorMessage = "Error: Invalid login attempt.";
            return;
        }
        if (result.RequiresConfirmation) {
            RedirectManager.RedirectTo("Account/ConfirmEmail");
            return;
        }
        if (result.RequiresTwoFactor) {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() {
                ["returnUrl"] = ReturnUrl,
                ["rememberMe"] = Input.RememberMe,
            });
            return;
        }

        var authToken = _jwtHandler.ReadJwtToken(result.Token);
        var claimsIdentity = new ClaimsIdentity(authToken.Claims, IdentityConstants.ExternalScheme);
        var authProperties = new AuthenticationProperties { IsPersistent = Input.RememberMe };
        await HttpContext.SignInAsync(new(claimsIdentity), authProperties);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

public static class HttpContentExtensions {
    private static readonly JsonSerializerOptions _options = new() {
        PropertyNameCaseInsensitive = true
    };

    public static async Task<T?> ReadFromJsonOrDefaultAsync<T>(this HttpContent content)
        where T : class {
        var jsonString = await content.ReadAsStringAsync();
        if (string.IsNullOrWhiteSpace(jsonString)) {
            return null;
        }

        try {
            return JsonSerializer.Deserialize<T>(jsonString, _options);
        }
        catch (JsonException) {
            return null;
        }
    }
}
          ]]></file> 
          <file name="LoginWith2fa.razor"><![CDATA[ 
﻿@page "/Account/LoginWith2fa"

@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<h1>Two-factor authentication</h1>
<hr />
<StatusMessage Message="@_message" />
<p>Your login is protected with an authenticator app. Enter your authenticator code below.</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <input type="hidden" name="RememberMe" value="@RememberMe" />
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.TwoFactorCode" id="Input.TwoFactorCode" class="form-control" autocomplete="off" />
                <label for="Input.TwoFactorCode" class="form-label">Authenticator code</label>
                <ValidationMessage For="() => Input.TwoFactorCode" class="text-danger" />
            </div>
            <div class="checkbox mb-3">
                <label for="remember-machine" class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMachine" />
                    Remember this machine
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
            </div>
        </EditForm>
    </div>
</div>
<p>
    Don't have access to your authenticator device? You can
    <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl">log in with a recovery code</a>.
</p>
          ]]></file> 
          <file name="LoginWith2fa.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

// ReSharper disable once InconsistentNaming
public partial class LoginWith2fa {
    private string? _message;
    private User _user = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
        => _user = await SignInManager.GetTwoFactorAuthenticationUserAsync()
            ?? throw new InvalidOperationException("Unable to load two-factor authentication user.");

    private async Task OnValidSubmitAsync() {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty)
                                     .Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(_user);

        if (result.Succeeded) {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut) {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            _message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}
          ]]></file> 
          <file name="LoginWithRecoveryCode.razor"><![CDATA[ 
﻿@page "/Account/LoginWithRecoveryCode"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Recovery code verification</PageTitle>

<h1>Recovery code verification</h1>
<hr />
<StatusMessage Message="@_message" />
<p>
    You have requested to log in with a recovery code. This login will not be remembered until you provide
    an authenticator app code at log in or disable 2FA and log in again.
</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RecoveryCode" id="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="RecoveryCode" />
                <label for="Input.RecoveryCode" class="form-label">Recovery Code</label>
                <ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </EditForm>
    </div>
</div>
          ]]></file> 
          <file name="LoginWithRecoveryCode.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class LoginWithRecoveryCode {
    private string? _message;
    private User _user = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
        // Ensure the user has gone through the username & password screen first
        => _user = await SignInManager.GetTwoFactorAuthenticationUserAsync()
            ?? throw new InvalidOperationException("Unable to load two-factor authentication user.");

    private async Task OnValidSubmitAsync() {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(_user);

        if (result.Succeeded) {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut) {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            _message = "Error: Invalid recovery code entered.";
        }
    }

    private sealed class InputModel {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Recovery Code")]
        public string RecoveryCode { get; set; } = "";
    }
}
          ]]></file> 
          <file name="Register.razor"><![CDATA[ 
﻿@page "/Account/Register"

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-lg-6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-lg-4 col-lg-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>
          ]]></file> 
          <file name="Register.razor.cs"><![CDATA[ 
﻿using static HttpServices.Abstractions.UserAccountEndpoints;

namespace WebApp.Components.Account.Pages;

public partial class Register {
    private IEnumerable<IdentityError>? _identityErrors = [];

    [Inject]
    protected IHttpClientFactory ClientFactory { get; init; } = null!;

    [Inject]
    protected NavigationManager NavigationManager { get; init; } = null!;

    [Inject]
    protected IdentityRedirectManager RedirectManager { get; init; } = null!;

    [SupplyParameterFromForm]
    protected InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext _) {
        var client = ClientFactory.CreateClient("IdentityService");
        var request = new RegisterUserRequest {
            Email = Input.Email,
            Name = Input.Name,
            Password = Input.Password,
            ConfirmationUrl = NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").ToString(),
            ReturnUrl = ReturnUrl,
        };
        var response = await client.PostAsJsonAsync(FindUserByIdEndpoint, request);
        if (!response.IsSuccessStatusCode) {
            _identityErrors = [new() { Code = "REGISTER_001", Description = "Error!" }];
            return;
        }
        RedirectManager.RedirectTo(ReturnUrl);
    }

    protected sealed class InputModel {
        [Required]
        [MaxLength(256)]
        [Display(Name = "Name")]
        public string Name { get; set; } = "";

        [Required]
        [EmailAddress]
        [MaxLength(256)]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
          ]]></file> 
          <file name="RegisterConfirmation.razor"><![CDATA[ 
﻿@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@_statusMessage" />

@if (_emailConfirmationLink is not null)
{
  <p>
    This app does not currently have a real email sender registered, see <a href="https://aka.ms/aspaccountconf">these docs</a> for how to configure a real email sender.
    Normally this would be emailed: <a href="@_emailConfirmationLink">Click here to confirm your account</a>
  </p>
}
else
{
  <p role="alert">Please check your email to confirm your account.</p>
}
          ]]></file> 
          <file name="RegisterConfirmation.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class RegisterConfirmation {
    private string? _emailConfirmationLink;
    private string? _statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync() {
        if (Email is null)
            RedirectManager.RedirectTo("");

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null) {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            _statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IEmailSender<User>) {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            _emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(NavigationManager.ToAbsoluteUri("Account/ConfirmEmail")
                                                                                                 .AbsoluteUri,
                                                                                new Dictionary<string, object?> {
                                                                                    ["userId"] = userId,
                                                                                    ["code"] = code,
                                                                                    ["returnUrl"] = ReturnUrl
                                                                                });
        }
    }
}
          ]]></file> 
          <file name="ResendEmailConfirmation.razor"><![CDATA[ 
﻿@page "/Account/ResendEmailConfirmation"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Resend email confirmation</PageTitle>

<h1>Resend email confirmation</h1>
<h2>Enter your email.</h2>
<hr />
<StatusMessage Message="@_message" />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Resend</button>
        </EditForm>
    </div>
</div>
          ]]></file> 
          <file name="ResendEmailConfirmation.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class ResendEmailConfirmation {
    private string? _message;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync() {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null) {
            _message = "Verification email sent. Please check your email.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(NavigationManager.ToAbsoluteUri("Account/ConfirmEmail")
                                                                                       .AbsoluteUri,
                                                                      new Dictionary<string, object?> {
                                                                          ["userId"] = userId,
                                                                          ["code"] = code
                                                                      });
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
          ]]></file> 
          <file name="ResetPassword.razor"><![CDATA[ 
﻿@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject IdentityRedirectManager RedirectManager
@inject UserManager<User> UserManager

<PageTitle>Reset password</PageTitle>

<h1>Reset password</h1>
<h2>Reset your password.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
                <label for="Input.Password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
        </EditForm>
    </div>
</div>
          ]]></file> 
          <file name="ResetPassword.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages;

public partial class ResetPassword {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized() {
        if (Code is null)
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync() {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null) {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");

        _identityErrors = result.Errors;
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
          ]]></file> 
          <file name="ResetPasswordConfirmation.razor"><![CDATA[ 
﻿@page "/Account/ResetPasswordConfirmation"
<PageTitle>Reset password confirmation</PageTitle>

<h1>Reset password confirmation</h1>
<p role="alert">
    Your password has been reset. Please <a href="Account/Login">click here to log in</a>.
</p>
          ]]></file> 
          <file name="_Imports.razor"><![CDATA[ 
﻿@using WebApp.Components.Account.Shared
@attribute [ExcludeFromInteractiveRouting]
          ]]></file> 
          <folder name="Manage"> 
            <file name="ChangePassword.razor"><![CDATA[ 
﻿@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@_message" />
<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" id="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Enter the old password" />
                <label for="Input.OldPassword" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.NewPassword" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter the new password" />
                <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div>
            ]]></file> 
            <file name="ChangePassword.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class ChangePassword {
    private string? _message;
    private User _user = null!;
    private bool _hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;
        _hasPassword = await UserManager.HasPasswordAsync(_user);
        if (!_hasPassword)
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
    }

    private async Task OnValidSubmitAsync() {
        var changePasswordResult = await UserManager.ChangePasswordAsync(_user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded) {
            _message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
            ]]></file> 
            <file name="DeletePersonalData.razor"><![CDATA[ 
﻿@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>

<StatusMessage Message="@_message" />

<h3>Delete Personal Data</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        @if (_requirePassword)
        {
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
                <label for="Input.Password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
        }
        <button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close my account</button>
    </EditForm>
</div>
            ]]></file> 
            <file name="DeletePersonalData.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class DeletePersonalData {
    private string? _message;
    private User _user = null!;
    private bool _requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; } = new();

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;
        _requirePassword = await UserManager.HasPasswordAsync(_user);
    }

    private async Task OnValidSubmitAsync() {
        if (_requirePassword && !await UserManager.CheckPasswordAsync(_user, Input.Password)) {
            _message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(_user);
        if (!result.Succeeded)
            throw new InvalidOperationException("Unexpected error occurred deleting user.");

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(_user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
            ]]></file> 
            <file name="Disable2fa.razor"><![CDATA[ 
﻿@page "/Account/Manage/Disable2fa"

@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Disable2fa> Logger

<PageTitle>Disable two-factor authentication (2FA)</PageTitle>

<StatusMessage />
<h3>Disable two-factor authentication (2FA)</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>This action only disables 2FA.</strong>
    </p>
    <p>
        Disabling 2FA does not change the keys used in authenticator apps. If you wish to change the key
        used in an authenticator app you should <a href="Account/Manage/ResetAuthenticator">reset your authenticator keys.</a>
    </p>
</div>

<div>
    <form @formname="disable-2fa" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <button class="btn btn-danger" type="submit">Disable 2FA</button>
    </form>
</div>
            ]]></file> 
            <file name="Disable2fa.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

// ReSharper disable once InconsistentNaming
public partial class Disable2fa {
    private User _user = null!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && !await UserManager.GetTwoFactorEnabledAsync(_user))
            throw new InvalidOperationException("Cannot disable 2FA for user as it's not currently enabled.");
    }

    private async Task OnSubmitAsync() {
        var disable2FaResult = await UserManager.SetTwoFactorEnabledAsync(_user, false);
        if (!disable2FaResult.Succeeded)
            throw new InvalidOperationException("Unexpected error occurred disabling 2FA.");

        var userId = await UserManager.GetUserIdAsync(_user);
        Logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", userId);
        RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication",
                                             "2fa has been disabled. You can reenable 2fa when you setup an authenticator app",
                                             HttpContext);
    }
}
            ]]></file> 
            <file name="Email.razor"><![CDATA[ 
﻿@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IEmailSender<User> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<h3>Manage email</h3>

<StatusMessage Message="@_message"/>
<div class="row">
    <div class="col-xl-6">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken />
        </form>
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            @if (_isEmailConfirmed)
            {
                <div class="form-floating mb-3 input-group">
                    <input type="text" value="@_email" id="email" class="form-control" placeholder="Enter your email" disabled />
                    <div class="input-group-append">
                        <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                    </div>
                    <label for="email" class="form-label">Email</label>
                </div>
            }
            else
            {
                <div class="form-floating mb-3">
                    <input type="text" value="@_email" id="email" class="form-control" placeholder="Enter your email" disabled />
                    <label for="email" class="form-label">Email</label>
                    <button type="submit" class="btn btn-link" form="send-verification-form">Send verification email</button>
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NewEmail" id="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter a new email" />
                <label for="Input.NewEmail" class="form-label">New email</label>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Change email</button>
        </EditForm>
    </div>
</div>
            ]]></file> 
            <file name="Email.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class Email {
    private string? _message;
    private User _user = null!;
    private string? _email;
    private bool _isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;
        _email = await UserManager.GetEmailAsync(_user!);
        _isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(_user!);

        Input.NewEmail ??= _email;
    }

    private async Task OnValidSubmitAsync() {
        if (Input.NewEmail is null || Input.NewEmail == _email) {
            _message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(_user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(_user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange")
                                                                                       .AbsoluteUri,
                                                                      new Dictionary<string, object?> {
                                                                          ["userId"] = userId,
                                                                          ["email"] = Input.NewEmail,
                                                                          ["code"] = code
                                                                      });

        await EmailSender.SendConfirmationLinkAsync(_user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync() {
        if (_email is null)
            return;

        var userId = await UserManager.GetUserIdAsync(_user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(_user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(NavigationManager.ToAbsoluteUri("Account/ConfirmEmail")
                                                                                       .AbsoluteUri,
                                                                      new Dictionary<string, object?> {
                                                                          ["userId"] = userId,
                                                                          ["code"] = code
                                                                      });

        await EmailSender.SendConfirmationLinkAsync(_user, _email, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
            ]]></file> 
            <file name="EnableAuthenticator.razor"><![CDATA[ 
﻿@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>Configure authenticator app</PageTitle>

@if (_recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="_recoveryCodes.ToArray()" StatusMessage="@_message" />
}
else
{
    <StatusMessage Message="@_message" />
    <h3>Configure authenticator app</h3>
    <div>
        <p>To use an authenticator app go through the following steps:</p>
        <ol class="list">
            <li>
                <p>
                    Download a two-factor authenticator app like Microsoft Authenticator for
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> and
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> or
                    Google Authenticator for
                    <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> and
                    <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
                </p>
            </li>
            <li>
                <p>Scan the QR Code or enter this key <kbd>@_sharedKey</kbd> into your two factor authenticator app. Spaces and casing do not matter.</p>
                <div class="alert alert-info">Learn how to <a href="https://go.microsoft.com/fwlink/?Linkid=852423">enable QR code generation</a>.</div>
                <div></div>
                <div data-url="@_authenticatorUri"></div>
            </li>
            <li>
                <p>
                    Once you have scanned the QR code or input the key above, your two factor authentication app will provide you
                    with a unique code. Enter the code in the confirmation box below.
                </p>
                <div class="row">
                    <div class="col-xl-6">
                        <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Code" id="Input.Code" class="form-control" autocomplete="off" placeholder="Enter the code" />
                                <label for="Input.Code" class="control-label form-label">Verification Code</label>
                                <ValidationMessage For="() => Input.Code" class="text-danger" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Verify</button>
                            <ValidationSummary class="text-danger" role="alert" />
                        </EditForm>
                    </div>
                </div>
            </li>
        </ol>
    </div>
}
            ]]></file> 
            <file name="EnableAuthenticator.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class EnableAuthenticator {
    private static readonly CompositeFormat _authenticatorUriFormat = CompositeFormat.Parse("otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6");
    private string? _message;
    private User _user = null!;
    private string? _sharedKey;
    private string? _authenticatorUri;
    private IEnumerable<string>? _recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;

        await LoadSharedKeyAndQrCodeUriAsync(_user!);
    }

    private async Task OnValidSubmitAsync() {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty)
                                    .Replace("-", string.Empty);

        var is2FaTokenValid = await UserManager.VerifyTwoFactorTokenAsync(_user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2FaTokenValid) {
            _message = "Error: Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(_user, true);
        var userId = await UserManager.GetUserIdAsync(_user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        _message = "Your authenticator app has been verified.";

        if (await UserManager.CountRecoveryCodesAsync(_user) == 0)
            _recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(_user, 10);
        else
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", _message, HttpContext);
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(User user) {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey)) {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        _sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        _authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private static string FormatKey(string unformattedKey) {
        var result = new StringBuilder();
        var currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length) {
            result.Append(unformattedKey.AsSpan(currentPosition, 4))
                  .Append(' ');
            currentPosition += 4;
        }

        if (currentPosition < unformattedKey.Length)
            result.Append(unformattedKey.AsSpan(currentPosition));

        return result.ToString()
                     .ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
        => string.Format(CultureInfo.InvariantCulture,
                         _authenticatorUriFormat,
                         UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
                         UrlEncoder.Encode(email),
                         unformattedKey);

    private sealed class InputModel {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }
}
            ]]></file> 
            <file name="ExternalLogins.razor"><![CDATA[ 
﻿@page "/Account/Manage/ExternalLogins"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<User> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage your external logins</PageTitle>

<StatusMessage />
@if (_currentLogins?.Count > 0) {
  <h3>Registered Logins</h3>
  <table class="table">
    <tbody>
      @foreach (var login in _currentLogins) {
        <tr>
          <td>@login.ProviderDisplayName</td>
          <td>
            @if (_showRemoveButton) {
              <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnRemoveProviderAsync" method="post">
                <AntiforgeryToken />
                <div>
                  <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider" />
                  <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey" />
                  <button type="submit" class="btn btn-primary" title="Remove this @login.ProviderDisplayName login from your account">Remove</button>
                </div>
              </form>
            }
            else {
              @: &nbsp;
            }
          </td>
        </tr>
      }
    </tbody>
  </table>
}
@if (_otherLogins?.Count > 0) {
  <h4>Add another service to log in.</h4>
  <hr />
  <form class="form-horizontal" @onsubmit="OnLinkProvider" method="post">
    <AntiforgeryToken />
    <div>
      <p>
        @foreach (var provider in _otherLogins) {
          <button type="submit" class="btn btn-primary" name="Provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
            @provider.DisplayName
          </button>
        }
      </p>
    </div>
  </form>
}
            ]]></file> 
            <file name="ExternalLogins.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class ExternalLogins {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";
    private User _user = null!;
    private IList<UserLoginInfo>? _currentLogins;
    private IList<AuthenticationScheme>? _otherLogins;
    private bool _showRemoveButton;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private string? LoginProvider { get; set; }

    [SupplyParameterFromForm]
    private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;
        _currentLogins = await UserManager.GetLoginsAsync(_user);
        _otherLogins = [.. (await SignInManager.GetExternalAuthenticationSchemesAsync()).Where(auth => _currentLogins.All(ul => auth.Name != ul.LoginProvider))];

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<User> userPasswordStore)
            passwordHash = await userPasswordStore.GetPasswordHashAsync(_user, HttpContext.RequestAborted);

        _showRemoveButton = passwordHash is not null || _currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
            await OnGetLinkLoginCallbackAsync();
    }

    private async Task OnRemoveProviderAsync() {
        var result = await UserManager.RemoveLoginAsync(_user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private void OnLinkProvider()
        => RedirectManager.RedirectTo($"Account/Manage/LinkExternalLogin/{LoginProvider}");

    private async Task OnGetLinkLoginCallbackAsync() {
        var userId = await UserManager.GetUserIdAsync(_user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);

        var result = await UserManager.AddLoginAsync(_user, info);
        if (!result.Succeeded) {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.",
                                                            HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }
}
            ]]></file> 
            <file name="GenerateRecoveryCodes.razor"><![CDATA[ 
﻿@page "/Account/Manage/GenerateRecoveryCodes"

@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

<PageTitle>Generate two-factor authentication (2FA) recovery codes</PageTitle>

@if (_recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="_recoveryCodes.ToArray()" StatusMessage="@_message" />
}
else
{
    <h3>Generate two-factor authentication (2FA) recovery codes</h3>
    <div class="alert alert-warning" role="alert">
        <p>
            <span class="glyphicon glyphicon-warning-sign"></span>
            <strong>Put these codes in a safe place.</strong>
        </p>
        <p>
            If you lose your device and don't have the recovery codes you will lose access to your account.
        </p>
        <p>
            Generating new recovery codes does not change the keys used in authenticator apps. If you wish to change the key
            used in an authenticator app you should <a href="Account/Manage/ResetAuthenticator">reset your authenticator keys.</a>
        </p>
    </div>
    <div>
        <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <button class="btn btn-danger" type="submit">Generate Recovery Codes</button>
        </form>
    </div>
}
            ]]></file> 
            <file name="GenerateRecoveryCodes.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class GenerateRecoveryCodes {
    private string? _message;
    private User _user = null!;
    private IEnumerable<string>? _recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;

        var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(_user);
        if (!isTwoFactorEnabled)
            throw new InvalidOperationException("Cannot generate recovery codes for user because they do not have 2FA enabled.");
    }

    private async Task OnSubmitAsync() {
        var userId = await UserManager.GetUserIdAsync(_user);
        _recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(_user, 10);
        _message = "You have generated new recovery codes.";

        Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
    }
}
            ]]></file> 
            <file name="Index.razor"><![CDATA[ 
﻿@page "/Account/Manage"

@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
  <div class="col-xl-6">
    <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
      <AntiforgeryToken />
      <DataAnnotationsValidator />
      <ValidationSummary class="text-danger" role="alert" />
      <div class="form-floating mb-3">
        <input type="text" value="@_username" id="username" class="form-control" placeholder="Choose your username." disabled />
        <label for="username" class="form-label">Username</label>
      </div>
      <div class="form-floating mb-3">
        <InputText @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" class="form-control" placeholder="Enter your phone number" />
        <label for="Input.PhoneNumber" class="form-label">PhoneNumber number</label>
        <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
      </div>
      <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
    </EditForm>
  </div>
</div>
            ]]></file> 
            <file name="Index.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class Index {
    private User _user = null!;
    private string? _username;
    private string? _phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.PhoneNumber ??= _phoneNumber;
    }

    private async Task OnValidSubmitAsync() {
        if (Input.PhoneNumber != _phoneNumber) {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel {
        [Phone]
        [Display(Name = "PhoneNumber number")]
        public string? PhoneNumber { get; set; }
    }
}
            ]]></file> 
            <file name="PersonalData.razor"><![CDATA[ 
﻿@page "/Account/Manage/PersonalData"

@inject IdentityUserAccessor UserAccessor

<PageTitle>Personal Data</PageTitle>

<StatusMessage />
<h3>Personal Data</h3>

<div class="row">
    <div class="col-md-6">
        <p>Your account contains personal data that you have given us. This page allows you to download or delete that data.</p>
        <p>
            <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
        </p>
        <form action="Account/Manage/DownloadPersonalData" method="post">
            <AntiforgeryToken />
            <button class="btn btn-primary" type="submit">Download</button>
        </form>
        <p>
            <a href="Account/Manage/DeletePersonalData" class="btn btn-danger">Delete</a>
        </p>
    </div>
</div>
            ]]></file> 
            <file name="PersonalData.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class PersonalData {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    protected override async Task OnInitializedAsync() => _ = await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None);
}
            ]]></file> 
            <file name="ResetAuthenticator.razor"><![CDATA[ 
﻿@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Reset authenticator key</PageTitle>

<StatusMessage />
<h3>Reset authenticator key</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>If you reset your authenticator key your authenticator app will not work until you reconfigure it.</strong>
    </p>
    <p>
        This process disables 2FA until you verify your authenticator app.
        If you do not complete your authenticator app configuration you may lose access to your account.
    </p>
</div>
<div>
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <button class="btn btn-danger" type="submit">Reset authenticator key</button>
    </form>
</div>
            ]]></file> 
            <file name="ResetAuthenticator.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class ResetAuthenticator {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    private async Task OnSubmitAsync() {
        var user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus("Account/Manage/EnableAuthenticator",
                                             "Your authenticator app key has been reset, you will need to configure your authenticator app using the new key.",
                                             HttpContext);
    }
}
            ]]></file> 
            <file name="SetPassword.razor"><![CDATA[ 
﻿@page "/Account/Manage/SetPassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Set password</PageTitle>

<h3>Set your password</h3>
<StatusMessage Message="@_message" />
<p class="text-info">
    You do not have a local username/password for this site. Add a local
    account so you can log in without an external login.
</p>
<div class="row">
    <div class="col-xl-6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" id="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Enter the new password" />
                <label for="Input.NewPassword" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Enter the new password" />
                <label for="Input.ConfirmPassword" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Set password</button>
        </EditForm>
     </div>
</div>
            ]]></file> 
            <file name="SetPassword.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Pages.Manage;

public partial class SetPassword {
    private string? _message;
    private User _user = null!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync() {
        _user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;

        var hasPassword = await UserManager.HasPasswordAsync(_user);
        if (hasPassword)
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
    }

    private async Task OnValidSubmitAsync() {
        var addPasswordResult = await UserManager.AddPasswordAsync(_user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded) {
            _message = $"Error: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been set.", HttpContext);
    }

    private sealed class InputModel {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}            ]]></file> 
            <file name="TwoFactorAuthentication.razor"><![CDATA[ 
﻿@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<StatusMessage />
<h3>Two-factor authentication (2FA)</h3>
@if (_canTrack)
{
    if (_is2FaEnabled)
    {
        if (_recoveryCodesLeft == 0)
        {
            <div class="alert alert-danger">
                <strong>You have no recovery codes left.</strong>
                <p>You must <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
            </div>
        }
        else if (_recoveryCodesLeft == 1)
        {
            <div class="alert alert-danger">
                <strong>You have 1 recovery code left.</strong>
                <p>You can <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }
        else if (_recoveryCodesLeft <= 3)
        {
            <div class="alert alert-warning">
                <strong>You have @_recoveryCodesLeft recovery codes left.</strong>
                <p>You should <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </div>
        }

        if (_isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />
                <button type="submit" class="btn btn-primary">Forget this browser</button>
            </form>
        }

        <a href="Account/Manage/Disable2fa" class="btn btn-primary">Disable 2FA</a>
        <a href="Account/Manage/GenerateRecoveryCodes" class="btn btn-primary">Reset recovery codes</a>
    }

    <h4>Authenticator app</h4>
    @if (!_hasAuthenticator)
    {
        <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary">Add authenticator app</a>
    }
    else
    {
        <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary">Set up authenticator app</a>
        <a href="Account/Manage/ResetAuthenticator" class="btn btn-primary">Reset authenticator app</a>
    }
}
else
{
    <div class="alert alert-danger">
        <strong>Privacy and cookie policy have not been accepted.</strong>
        <p>You must accept the policy before you can enable two factor authentication.</p>
    </div>
}
            ]]></file> 
            <file name="TwoFactorAuthentication.razor.cs"><![CDATA[ 
﻿using Microsoft.AspNetCore.Http.Features;

namespace WebApp.Components.Account.Pages.Manage;

public partial class TwoFactorAuthentication {
    private bool _canTrack;
    private bool _hasAuthenticator;
    private int _recoveryCodesLeft;
    private bool _is2FaEnabled;
    private bool _isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    protected override async Task OnInitializedAsync() {
        var user = (await UserAccessor.GetRequiredUserAsync(HttpContext, CancellationToken.None))!;
        _canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        _hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        _is2FaEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        _isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        _recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync() {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager
           .RedirectToCurrentPageWithStatus("The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
                                            HttpContext);
    }
}
            ]]></file> 
            <file name="_Imports.razor"><![CDATA[ 
﻿@layout ManageLayout
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
            ]]></file> 
          </folder> 
        </folder> 
        <folder name="Shared"> 
          <file name="ExternalLoginPicker.razor"><![CDATA[ 
﻿@if (_externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
            about setting up this ASP.NET application to support logging in via external services</a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p>
                @foreach (var provider in _externalLogins)
                {
                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                }
            </p>
        </div>
    </form>
}
          ]]></file> 
          <file name="ExternalLoginPicker.razor.cs"><![CDATA[ 
﻿using static HttpServices.Abstractions.AuthenticationEndpoints;

namespace WebApp.Components.Account.Shared;

public partial class ExternalLoginPicker {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    [Inject]
    protected IHttpClientFactory ClientFactory { get; init; } = null!;

    [Inject]
    protected IdentityRedirectManager RedirectManager { get; set; } = null!;

    private AuthenticationScheme[] _externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private HttpClient _httpClient = null!;

    protected override async Task OnInitializedAsync() {
        _httpClient = ClientFactory.CreateClient("auth");
        var response = await _httpClient.GetAsync(SchemesEndpoint);
        response.EnsureSuccessStatusCode();
        var schemes = await response.Content.ReadFromJsonAsync<AuthenticationScheme[]>();
        //var schemes = await _httpClient.GetFromJsonAsync<AuthenticationScheme[]>(SchemesEndpoint);
        _externalLogins = [.. schemes!];
    }
}
          ]]></file> 
          <file name="ManageLayout.razor"><![CDATA[ 
﻿@inherits LayoutComponentBase
@layout MainLayout

<h1>Manage your account</h1>

<div>
    <h2>Change your account settings</h2>
    <hr />
    <div class="row">
        <div class="col-lg-3">
            <ManageNavMenu />
        </div>
        <div class="col-lg-9">
            @Body
        </div>
    </div>
</div>
          ]]></file> 
          <file name="ManageNavMenu.razor"><![CDATA[ 
﻿@using Microsoft.AspNetCore.Identity
@using WebApp.Components.Account.Model

@inject SignInManager<User> SignInManager

<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage" Match="NavLinkMatch.All">Profile</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/Email">Email</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/ChangePassword">Password</NavLink>
    </li>
    @if (_hasExternalLogins)
    {
        <li class="nav-item">
            <NavLink class="nav-link" href="Account/Manage/ExternalLogins">External logins</NavLink>
        </li>
    }
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/TwoFactorAuthentication">Two-factor authentication</NavLink>
    </li>
    <li class="nav-item">
        <NavLink class="nav-link" href="Account/Manage/PersonalData">Personal data</NavLink>
    </li>
</ul>
          ]]></file> 
          <file name="ManageNavMenu.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Shared;

public partial class ManageNavMenu {
    private bool _hasExternalLogins;

    protected override async Task OnInitializedAsync() => _hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
          ]]></file> 
          <file name="ShowRecoveryCodes.razor"><![CDATA[ 
﻿<StatusMessage Message="@StatusMessage" />
<h3>Recovery codes</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <strong>Put these codes in a safe place.</strong>
    </p>
    <p>
        If you lose your device and don't have the recovery codes you will lose access to your account.
    </p>
</div>
<div class="row">
    <div class="col-md-12">
        @foreach (var recoveryCode in RecoveryCodes)
        {
            <div>
                <code class="recovery-code">@recoveryCode</code>
            </div>
        }
    </div>
</div>
          ]]></file> 
          <file name="ShowRecoveryCodes.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Shared;

public partial class ShowRecoveryCodes {
    [Parameter]
    public string[] RecoveryCodes { get; set; } = [];

    [Parameter]
    public string? StatusMessage { get; set; }
}
          ]]></file> 
          <file name="StatusMessage.razor"><![CDATA[ 
﻿@if (!string.IsNullOrEmpty(DisplayMessage))
{
    var statusMessageClass = DisplayMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass" role="alert">
        @DisplayMessage
    </div>
}
          ]]></file> 
          <file name="StatusMessage.razor.cs"><![CDATA[ 
﻿namespace WebApp.Components.Account.Shared;

public partial class StatusMessage {
    private string? _messageFromCookie;

    [Parameter]
    public string? Message { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    private string? DisplayMessage => Message ?? _messageFromCookie;

    protected override void OnInitialized() {
        _messageFromCookie = HttpContext.Request.Cookies[IdentityRedirectManager.StatusCookieName];

        if (_messageFromCookie is not null)
            HttpContext.Response.Cookies.Delete(IdentityRedirectManager.StatusCookieName);
    }
}
          ]]></file> 
        </folder> 
      </folder> 
    </folder> 
    <folder name="Layouts"> 
      <file name="MainLayout.razor"><![CDATA[ 
﻿@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
      ]]></file> 
      <file name="_Imports.razor"><![CDATA[ 
﻿@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using WebApp
@using WebApp.Components
@using WebApp.Layouts
@using WebApp.Pages
      ]]></file> 
    </folder> 
    <folder name="Pages"> 
      <file name="Chat.razor"><![CDATA[ 
﻿@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Nav

<h1>Chat</h1>

<ul>
  @foreach (var message in _messages)
  {
    <li>@message</li>
  }
</ul>

<input @bind="_newMessage" @bind:event="oninput" />
<button @onclick="SendMessage">Send</button>
      ]]></file> 
      <file name="Chat.razor.cs"><![CDATA[ 
﻿using Microsoft.AspNetCore.SignalR.Client;

namespace WebApp.Pages;

public partial class Chat {
    private HubConnection? _hubConnection;
    private readonly List<string> _messages = [];
    private string? _newMessage;

    protected override async Task OnInitializedAsync() {
        _hubConnection = new HubConnectionBuilder()
                       .WithUrl(Nav.ToAbsoluteUri("/hubs/chat"))
                       .Build();

        _hubConnection.On<string>("ReceiveMessage",
                                 (message) => {
                                     _messages.Add(message);
                                     InvokeAsync(StateHasChanged);
                                 });

        await _hubConnection.StartAsync();
    }

    private async Task SendMessage() {
        if (!string.IsNullOrEmpty(_newMessage)) {
            await _hubConnection!.SendAsync("SendMessage", _newMessage);
            _newMessage = string.Empty;
        }
    }

    public async ValueTask DisposeAsync() {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }
}
      ]]></file> 
      <file name="Error.razor"><![CDATA[ 
﻿@page "/error"

<PageTitle>Error</PageTitle>

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>
      ]]></file> 
      <file name="Error.razor.cs"><![CDATA[ 
﻿using System.Diagnostics;

namespace WebApp.Pages;

public partial class Error {
    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? RequestId { get; set; }
    private bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

    protected override void OnInitialized() => RequestId = Activity.Current?.Id ?? HttpContext?.TraceIdentifier;
}
      ]]></file> 
      <file name="Index.razor"><![CDATA[ 
﻿@page "/"
@rendermode InteractiveServer

<h1>Dashboard</h1>
      ]]></file> 
      <file name="Sessions.razor"><![CDATA[ 
﻿@page "/sessions"
@inject HttpClient Http

<h1>Game Sessions</h1>

<button @onclick="CreateSession">Create New Session</button>

@if (_sessions == null)
{
  <p>Loading sessions...</p>
}
else
{
  <ul>
    @foreach (var session in _sessions)
    {
      <li>@session.Name</li>
    }
  </ul>
}

public record GameSession(Guid Id, string Name);
      ]]></file> 
      <file name="Sessions.razor.cs"><![CDATA[ 
﻿using Domain.Model;

namespace WebApp.Pages;

public partial class Sessions {
    private List<GameSession> _sessions = [];

    protected override async Task OnInitializedAsync() => _sessions = (await Http.GetFromJsonAsync<List<GameSession>>("/sessions"))!;

    private async Task CreateSession() {
        var name = "New Session " + DateTime.Now.ToShortTimeString();
        var response = await Http.PostAsJsonAsync("/sessions",
                                                  new {
                                                      Name = name,
                                                      UserId = Guid.NewGuid()
                                                  });
        var session = (await response.Content.ReadFromJsonAsync<GameSession>())!;
        _sessions.Add(session);
    }
}
      ]]></file> 
      <file name="_Imports.razor"><![CDATA[ 
﻿@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using WebApp
@using WebApp.Components
@using WebApp.Layouts
@using WebApp.Pages
      ]]></file> 
    </folder> 
    <folder name="Properties"> 
      <file name="launchSettings.json"><![CDATA[ 
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
    "profiles": {
      "http": {
        "commandName": "Project",
        "dotnetRunMessages": true,
        "launchBrowser": true,
        "inspectUri": "{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}",
        "applicationUrl": "http://localhost:5002",
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      },
      "https": {
        "commandName": "Project",
        "dotnetRunMessages": true,
        "launchBrowser": true,
        "inspectUri": "{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}",
        "applicationUrl": "https://localhost:7038;http://localhost:5002",
        "environmentVariables": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        }
      }
    }
  }
      ]]></file> 
      <file name="serviceDependencies.json"><![CDATA[ 
{
  "dependencies": {
    "mssql1": {
      "type": "mssql",
      "connectionId": "ConnectionStrings:DefaultConnection"
    }
  }
}      ]]></file> 
      <file name="serviceDependencies.local.json"><![CDATA[ 
{
  "dependencies": {
    "mssql1": {
      "type": "mssql.local",
      "connectionId": "ConnectionStrings:DefaultConnection"
    }
  }
}      ]]></file> 
    </folder> 
  </folder> 
</root> 
