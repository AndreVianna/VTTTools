#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Utility functions for C# source file processing.
Includes excluding auto-generated files and compacting leading indentation.
"""

import logging
from pathlib import Path
import io # To handle different line endings gracefully

# --- Constants ---
AUTO_GENERATED_MARKER = "// <auto-generated />"

def process_csharp_content(csharp_string: str, logger: logging.Logger, file_path_for_log: Path) -> str | None:
    """
    Processes C# content:
    1. Excludes files starting with the auto-generated marker.
    2. Compacts leading spaces based on the formula: new = floor((old + 3) / 4).

    Args:
        csharp_string: The C# content as a single string.
        logger: Logger instance for logging info/warnings.
        file_path_for_log: Original file path for logging context.

    Returns:
        Processed C# content as a string, or None if the file should be excluded.
    """
    try:
        # Use io.StringIO to handle different line endings (\n, \r\n)
        string_reader = io.StringIO(csharp_string)
        first_line = string_reader.readline().strip() # Read and strip whitespace

        # 1. Exclusion Check
        if first_line == AUTO_GENERATED_MARKER:
            logger.info(f"Excluding auto-generated file: {file_path_for_log.name}")
            return None # Signal exclusion

        return csharp_string

    except Exception as e:
        logger.error(f"Unexpected error during C# processing for '{file_path_for_log}': {e}")
        # Return original content on unexpected error? Or None? Let's return original for now.
        # Returning original might be safer than excluding due to an error here.
        logger.warning(f"Returning original content for {file_path_for_log.name} due to processing error.")
        return csharp_string # Fallback to original content on error

